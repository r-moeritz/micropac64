Sections:
00: "org0001:801" (801-176C)
01: "org0002:4000" (4000-4900)
02: "org0003:4bf0" (4BF0-4FE8)
03: "org0004:5000" (5000-5740)


Source: "src/startup.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Program startup
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         .org $0801
                        	     6: 
                        	     7:         ;; BASIC header
00:0801 0B08            	     8:         .word nxl,10
00:0803 0A00
00:0805 9E              	     9:         .byte $9e
00:0806 32303631        	    10:         .string "2061"
00:080A 00
00:080B 0000            	    11: nxl:    .word 0
                        	    12: 
                        	    13:         ;; Program initialization
00:080D 202709          	    14:         jsr initvic
00:0810 205709          	    15:         jsr fillcolmem
00:0813 20FB0B          	    16:         jsr setupirq
                        	    17:         ;; jsr setupnmi
00:0816 205C0E          	    18:         jsr newgame
                        	    19: 
                        	    20:         ;; Include program modules
                        	    21:         include macros.asm

Source: "macros.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; General purpose .macros
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5: 
                        	     6:         ;; Maths
                        	     7:         ;; ------------------------------------------------------------
                        	     8:         
                        	     9:         ;; Multiply value in .A by 8, ignore C flag
                        	    10:         ;; Reads:       .A
                        	    11:         ;; Writes:      .A
                        	    12: mula8:  .macro
                        	    13:         clc
                        	    14:         asl
                        	    15:         asl
                        	    16:         asl
                        	    17:         .endm
                        	    18:         
                        	    19:         ;; Divide value in .A by 8, ignore C flag
                        	    20:         ;; Reads:       .A
                        	    21:         ;; Writes:      .A      
                        	    22: diva8:  .macro
                        	    23:         sec
                        	    24:         lsr
                        	    25:         lsr
                        	    26:         lsr
                        	    27:         .endm
                        	    28: 
                        	    29:         ;; Add immediate value to byte and store
                        	    30: adcbimm: .macro val, byt
                        	    31:         clc
                        	    32:         lda \byt
                        	    33:         adc #\val
                        	    34:         sta \byt
                        	    35:         .endm
                        	    36: 
                        	    37:         ;; Subtract immediate value from byte and store
                        	    38: sbcbimm: .macro val, byt
                        	    39:         sec
                        	    40:         lda \byt
                        	    41:         sbc #\val
                        	    42:         sta \byt
                        	    43:         .endm
                        	    44: 
                        	    45:         ;; Add immediate word value to word and store
                        	    46: adcwimm: .macro val, wrd
                        	    47:         clc
                        	    48:         lda \wrd
                        	    49:         adc #<\val
                        	    50:         sta \wrd
                        	    51:         lda \wrd+1
                        	    52:         adc #>\val
                        	    53:         sta \wrd+1
                        	    54:         .endm
                        	    55: 
                        	    56:         ;; Subtract immediate word value from word and store
                        	    57: sbcwimm: .macro val, wrd
                        	    58:         sec
                        	    59:         lda \wrd
                        	    60:         sbc #<\val
                        	    61:         sta \wrd
                        	    62:         lda \wrd+1
                        	    63:         sbc #>\val
                        	    64:         sta \wrd+1
                        	    65:         .endm
                        	    66:         
                        	    67:         ;; Conditional jumps
                        	    68:         ;; ------------------------------------------------------------
                        	    69: 
                        	    70:         ;; BNE to distant address
                        	    71: jne:    .macro adr
                        	    72:         beq :+
                        	    73:         jmp \adr
                        	    74: :
                        	    75:         .endm
                        	    76: 
                        	    77:         ;; BEQ to distant address
                        	    78: jeq:    .macro adr
                        	    79:         bne :+
                        	    80:         jmp \adr
                        	    81: :
                        	    82:         .endm
                        	    83: 
                        	    84:         ;; BCS to distant address
                        	    85: jcs:    .macro adr
                        	    86:         bcc :+
                        	    87:         jmp \adr
                        	    88: :
                        	    89:         .endm
                        	    90: 
                        	    91:         ;; BCC to distant address
                        	    92: jcc:    .macro adr
                        	    93:         bcs :+
                        	    94:         jmp \adr
                        	    95: :
                        	    96:         .endm
                        	    97: 
                        	    98:         ;; BMI to distant address
                        	    99: jmi:    .macro adr
                        	   100:         bpl :+
                        	   101:         jmp \adr
                        	   102: :
                        	   103:         .endm
                        	   104:         
                        	   105:         ;; Stack operations
                        	   106:         ;; ------------------------------------------------------------
                        	   107: 
                        	   108:         ;; Push .X onto the stack
                        	   109: phx:    .macro
                        	   110:         txa
                        	   111:         pha
                        	   112:         .endm
                        	   113: 
                        	   114:         ;; Pop the top byte off the stack onto .X
                        	   115: plx:    .macro
                        	   116:         pla
                        	   117:         tax
                        	   118:         .endm
                        	   119: 
                        	   120:         ;; Push .Y onto the stack
                        	   121: phy:    .macro
                        	   122:         tya
                        	   123:         pha
                        	   124:         .endm
                        	   125: 
                        	   126:         ;; Pop the top byte off the stack onto .Y
                        	   127: ply:    .macro
                        	   128:         pla
                        	   129:         tay
                        	   130:         .endm
                        	   131: 
                        	   132:         ;; Memory operations
                        	   133:         ;; ------------------------------------------------------------
                        	   134: 
                        	   135:         ;; Swap bytes via the stack
                        	   136: swpbyt: .macro byt1, byt2
                        	   137:         lda \byt1
                        	   138:         pha                     ;load byt1 & push onto the stack
                        	   139:         lda \byt2
                        	   140:         sta \byt1               ;load byt2 & save to byt1
                        	   141:         pla
                        	   142:         sta \byt2               ;pop byt1 off the stack & save to byt2
                        	   143:         .endm
                        	   144:         
                        	   145:         ;; Load immediate value into byte
                        	   146: ldbimm: .macro val, byt
                        	   147:         lda #\val
                        	   148:         sta \byt
                        	   149:         .endm
                        	   150:         
                        	   151:         ;; Load immediate value into word
                        	   152: ldwimm: .macro val, wrd
                        	   153:         lda #<\val
                        	   154:         sta \wrd
                        	   155:         lda #>\val
                        	   156:         sta \wrd+1
                        	   157:         .endm
                        	   158: 
                        	   159:         ;; Load value into byte via pointer at index
                        	   160: ldbptr: .macro ptr, idx, byt
                        	   161:         ldy #\idx
                        	   162:         lda (\ptr),y
                        	   163:         sta \byt
                        	   164:         .endm
                        	   165:         
                        	   166:         ;; Load value into word via pointer at index
                        	   167: ldwptr: .macro ptr, idx, wrd
                        	   168:         ldy #\idx
                        	   169:         lda (\ptr),y
                        	   170:         sta \wrd
                        	   171:         iny
                        	   172:         lda (\ptr),y
                        	   173:         sta \wrd+1
                        	   174:         .endm
                        	   175: 
                        	   176:         ;; Copy value from one byte to another
                        	   177: cpbyt:  .macro src, dst
                        	   178:         lda \src
                        	   179:         sta \dst
                        	   180:         .endm
                        	   181: 
                        	   182:         ;; Copy value from one word to another
                        	   183: cpwrd:  .macro src, dst
                        	   184:         lda \src
                        	   185:         sta \dst
                        	   186:         lda \src+1
                        	   187:         sta \dst+1
                        	   188:         .endm
                        	   189: 
                        	   190:         ;; Fill memory range with a byte
                        	   191: filmem: .macro adr, len, val
                        	   192:         lda #\val
                        	   193:         ldx #\len        
                        	   194: :       beq :+
                        	   195:         sta \adr,x
                        	   196:         dex
                        	   197:         jmp :-
                        	   198: :       sta \adr,x
                        	   199:         .endm
                        	   200: 
                        	   201:         ;; Increment pointer using X-based, indirect adressing to ensure
                        	   202:         ;; HB is updated along with LB.
                        	   203: incptrx: .macro ptr
                        	   204:         clc
                        	   205:         lda \ptr,x
                        	   206:         adc #1
                        	   207:         sta \ptr,x
                        	   208:         inx
                        	   209:         lda \ptr,x
                        	   210:         adc #0
                        	   211:         sta \ptr,x
                        	   212:         dex
                        	   213:         .endm
                        	   214: 
                        	   215:         ;; Increment word to ensure HB is updated along with LB.
                        	   216: incwrd: .macro wrd
                        	   217:         clc
                        	   218:         lda \wrd
                        	   219:         adc #1
                        	   220:         sta \wrd
                        	   221:         lda \wrd+1
                        	   222:         adc #0
                        	   223:         sta \wrd+1
                        	   224:         .endm
                        	   225: 
                        	   226:         ;; Increment accumulator
                        	   227: ina:    .macro
                        	   228:         tay
                        	   229:         iny
                        	   230:         tya
                        	   231:         .endm
                        	   232: 
                        	   233:         ;; Decrement accumulator
                        	   234: dea:    .macro
                        	   235:         tay
                        	   236:         dey
                        	   237:         tya
                        	   238:         .endm
                        	   239: 

Source: "src/startup.asm"
                        	    22:         include symbols.asm

Source: "symbols.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Symbol definitions
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         
                        	     6:         ;; Zero page memory locations
                        	     7:         ;; ------------------------------------------------------------
                        	     8: 
                        	     9:         ;; 15-byte buffer for use in sub-routines,
                        	    10:         ;; divided into 3x blocks of 5 bytes each.
                        	    11: buf:            .ezp $16         ;$16-$24
                        	    12:         
                        	    13:         ;; Block for game loop
                        	    14: wrd1:           .ezp buf
                        	    15: wrd2:           .ezp buf+$02
                        	    16: tmp:            .ezp buf+$04
                        	    17:         
                        	    18:         ;; Block for IRQ handler
                        	    19: irqwrd1:        .ezp buf+$05
                        	    20: irqwrd2:        .ezp buf+$07
                        	    21: irqtmp:         .ezp buf+$09
                        	    22:         
                        	    23:         ;; Block for NMI handler
                        	    24: nmiwrd1:        .ezp buf+$0a
                        	    25: nmiwrd2:        .ezp buf+$0c
                        	    26: nmitmp:         .ezp buf+$0e
                        	    27: 
                        	    28:         ;; Joystick data
                        	    29: joybtn:         .ezp $92         ;button value
                        	    30: joyx:           .ezp $96         ;x axis value
                        	    31: joyy:           .ezp $97         ;y axis value
                        	    32: 
                        	    33:         ;; Pac-Man data
                        	    34: pacsrc:         .ezp $9e         ;source node
                        	    35: pactar:         .ezp $9f         ;target node
                        	    36: pacdir:         .ezp $a3         ;facing direction
                        	    37: pacdis:         .ezp $a4         ;distance to target
                        	    38: pacrem:         .ezp $a5         ;distance remaining to target
                        	    39: 
                        	    40:         ;; Scoring, gameplay
                        	    41: npelrem:        .ezp $a6          ;number of pellets remaining
                        	    42: nmenrem:        .ezp $a7          ;number of remaining "men"
                        	    43: lvlnum:         .ezp $a8          ;level number
                        	    44: frtena:         .ezp $a9          ;whether or not fruit is enabled        
                        	    45: score:          .ezp $fc          ;player's score in BCD (4 bytes: $fc-$ff)
                        	    46: 
                        	    47:         ;; Animation
                        	    48: pacaix:         .ezp $aa          ;Pac-Man animation frame index
                        	    49: enzraix:        .ezp $ab          ;energizer animation frame index
                        	    50: lvlend:         .ezp $9b          ;level end flashes
                        	    51: 
                        	    52:         ;; Still available: $f7-$fb (5 bytes)
                        	    53:         
                        	    54:         ;; Memory-mapped hardware registers
                        	    55:         ;; ------------------------------------------------------------
                        	    56:         
                        	    57:         ;; VIC II registers
                        	    58: vic:            .equ $d000
                        	    59: sp0x:           .equ vic
                        	    60: sp0y:           .equ vic + $01
                        	    61: sp1x:           .equ vic + $02
                        	    62: sp1y:           .equ vic + $03
                        	    63: sp2x:           .equ vic + $04
                        	    64: sp2y:           .equ vic + $05
                        	    65: sp3x:           .equ vic + $06
                        	    66: sp3y:           .equ vic + $07
                        	    67: sp4x:           .equ vic + $08
                        	    68: sp4y:           .equ vic + $09
                        	    69: sp5x:           .equ vic + $0a
                        	    70: sp5y:           .equ vic + $0b
                        	    71: sp6x:           .equ vic + $0c
                        	    72: sp6y:           .equ vic + $0d
                        	    73: sp7x:           .equ vic + $0e
                        	    74: sp7y:           .equ vic + $0f
                        	    75: scroly:         .equ vic + $11
                        	    76: raster:         .equ vic + $12
                        	    77: spena:          .equ vic + $15
                        	    78: vmcsb:          .equ vic + $18
                        	    79: vicirq:         .equ vic + $19
                        	    80: irqmsk:         .equ vic + $1a
                        	    81: spspcl:         .equ vic + $1e
                        	    82: spbgcl:         .equ vic + $1f
                        	    83: extcol:         .equ vic + $20
                        	    84: bgcol0:         .equ vic + $21
                        	    85: sp0col:         .equ vic + $27
                        	    86: 
                        	    87:         ;; CIA1 registers
                        	    88: cia1:           .equ $dc00
                        	    89: ci1pra:         .equ cia1
                        	    90: ci1icr:         .equ cia1 + $0d
                        	    91: 
                        	    92:         ;; CIA2 registers
                        	    93: cia2:           .equ $dd00
                        	    94: ci2pra:         .equ cia2
                        	    95: c2ddra:         .equ cia2 + $02
                        	    96: ti2a:           .equ cia2 + $04
                        	    97: ti2b:           .equ cia2 + $06
                        	    98: ci2icr:         .equ cia2 + $0d
                        	    99: ci2cra:         .equ cia2 + $0e
                        	   100: ci2crb:         .equ cia2 + $0f
                        	   101: 
                        	   102: 
                        	   103:         ;; Operating system memory locations
                        	   104:         ;; ------------------------------------------------------------
                        	   105:         
                        	   106:         ;; Interrupt vectors
                        	   107: cinv:           .equ $0314       ;IRQ vector
                        	   108: nminv:          .equ $0318       ;NMI vector
                        	   109: 
                        	   110:         ;; Interrupt routines
                        	   111: sysirq:         .equ $ea7e       ;kernal IRQ handler
                        	   112: sysnmi:         .equ $fe56       ;kernal NMI handler
                        	   113: 
                        	   114: 
                        	   115:         ;; Program memory locations
                        	   116:         ;; ------------------------------------------------------------
                        	   117:         
                        	   118: charset:        .equ $4000       ;character set definition
                        	   119: coltab:         .equ $4800       ;colour table
                        	   120: mazegfx:        .equ $4bf0       ;Pac-Man maze
                        	   121: scnmem:         .equ $4c00       ;screen memory
                        	   122: colmem:         .equ $d800       ;colour memory
                        	   123: sp0mem:         .equ $5000       ;sprite 0 address
                        	   124: sp0ptr:         .equ $4ff8       ;sprite 0 pointer
                        	   125: sp0loc:         .equ $1000/$40   ;sp0mem
                        	   126: border:         .equ $7999       ;border byte
                        	   127: 
                        	   128:         ;; Constants
                        	   129:         ;; ------------------------------------------------------------
                        	   130: 
                        	   131:         ;; Misc.
                        	   132: linclr:         .equ 249
                        	   133: linset:         .equ 255        
                        	   134: spxscog:        .equ 24          ;sprite x screen origin
                        	   135: spyscog:        .equ 50          ;sprite y screen origin
                        	   136: maxpell:        .equ 182         ;maximum number of pellets (incl. energizers)
                        	   137: maxmen:         .equ 3           ;maximum number of "men"
                        	   138: 
                        	   139:         ;; Fruit
                        	   140: frxpos:         .equ $67          ;fruit x loc
                        	   141: frypos:         .equ $a2          ;fruit y loc
                        	   142: frttim:         .equ 38           ;fruit timer: 39 x 240ms = 9.1s
                        	   143: maxftx:         .equ $48          ;maximum fruit table index
                        	   144: 
                        	   145:         ;; Screen memory indexes
                        	   146: scrmsdi:        .equ $185        ;most significant digit of score
                        	   147:         
                        	   148:         ;; Node indexes
                        	   149: wrpnixw:        .equ $1b         ;western warp tunnel node index
                        	   150: wrpnixe:        .equ $21         ;eastern warp tunnel node index
                        	   151: pacstnd:        .equ $31         ;Pac-Man's starting node index        
                        	   152: gsthmnd:        .equ $1e         ;ghost home node        
                        	   153: 
                        	   154:         ;; Character constants
                        	   155: spcechr:        .equ $20         ;space char
                        	   156: pellchr:        .equ $53         ;pellet char
                        	   157: enzrchr:        .equ $54         ;energizer char
                        	   158: 
                        	   159:         ;; Colour constants
                        	   160: dkgrey:         .equ $0b         ;dark grey
                        	   161: ltgrey:         .equ $0f         ;light grey
                        	   162:         
                        	   163:         ;; Compass directions
                        	   164: n:              .equ 2
                        	   165: s:              .equ 3
                        	   166: w:              .equ 4
                        	   167: e:              .equ 5
                        	   168: 
                        	   169:         ;; Scores, expressed as BCD pairs
                        	   170: pellpts:        .equ $10        ;10 pts for pellets
                        	   171: enzrpts:        .equ $50        ;50 pts for energizers
                        	   172: 
                        	   173:         ;; Index into buf to access memory block
                        	   174:         ;; reservedf for gameloop
                        	   175: blki:           .equ $00
                        	   176:         
                        	   177:         ;; Index into buf to access memory block
                        	   178:         ;; reserved for IRQ handler
                        	   179: irqblki:        .equ $05
                        	   180: 
                        	   181:         ;; Index into buf to access memory block
                        	   182:         ;; reserved for NMI handler
                        	   183: nmiblki:        .equ $0a
                        	   184: 
                        	   185:         ;; The number of pellets that need to be eaten for bonus items
                        	   186:         ;; to appear the 1st and 2nd time
                        	   187: nbonpel1:       .equ 52
                        	   188: nbonpel2:       .equ 127
                        	   189: 

Source: "src/startup.asm"
                        	    23:         include maths.asm

Source: "maths.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Maths sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Multiply by 5
                        	     6:         ;; Reads:
                        	     7:         ;;  - .A (multiplicand)
                        	     8:         ;;  - .X (offset to memory block in buf)
                        	     9:         ;; Writes:
                        	    10:         ;;  - Result is stored in 1st word of memory block
                        	    11:         ;;  - 2nd word of memory block is used as a work area
00:0819 E8              	    12: mula5:  inx
00:081A E8              	    13:         inx
00:081B 9516            	    14:         sta buf,x               ;stash original .A in wrd2 (lo)
00:081D 18              	    15:         clc
00:081E 0A              	    16:         asl                     ;multiply by 2
00:081F A8              	    17:         tay                     ;stash product in .Y
00:0820 A900            	    18:         lda #0
00:0822 2A              	    19:         rol
00:0823 E8              	    20:         inx
00:0824 9516            	    21:         sta buf,x               ;stash .C in wrd2 (hi)
00:0826 98              	    22:         tya                     ;restore product from .Y
00:0827 0A              	    23:         asl                     ;multiply by 2
00:0828 A8              	    24:         tay                     ;stash product in .Y
00:0829 B516            	    25:         lda buf,x               
00:082B 2A              	    26:         rol                     ;restore .C from wrd2 (hi)
00:082C CA              	    27:         dex
00:082D CA              	    28:         dex
00:082E 9516            	    29:         sta buf,x               ;write hi byte to wrd1 (hi)
00:0830 98              	    30:         tya                     ;restore product from .Y
00:0831 E8              	    31:         inx
00:0832 7516            	    32:         adc buf,x               ;add original .A value
00:0834 CA              	    33:         dex
00:0835 CA              	    34:         dex
00:0836 9516            	    35:         sta buf,x               ;write lo byte to wrd1 (lo)
00:0838 A900            	    36:         lda #0
00:083A 2A              	    37:         rol
00:083B E8              	    38:         inx
00:083C 7516            	    39:         adc buf,x               ;add .C to hi byte
00:083E 9516            	    40:         sta buf,x               ;and write to wrd1 (hi)
00:0840 CA              	    41:         dex
00:0841 60              	    42:         rts
                        	    43:         
                        	    44:         ;; Multiply by 6
                        	    45:         ;; Reads:
                        	    46:         ;;  - .A (multiplicand)
                        	    47:         ;;  - .X (offset to memory block in buf)
                        	    48:         ;; Writes:
                        	    49:         ;;  - Result is stored in 1st word of memory block
                        	    50:         ;;  - 2nd word of memory block is used as a work area        
00:0842 E8              	    51: mula6:  inx
00:0843 E8              	    52:         inx
00:0844 9516            	    53:         sta buf,x
00:0846 18              	    54:         clc
00:0847 0A              	    55:         asl
00:0848 A8              	    56:         tay
00:0849 A900            	    57:         lda #0
00:084B 2A              	    58:         rol
00:084C E8              	    59:         inx
00:084D 9516            	    60:         sta buf,x
00:084F 98              	    61:         tya
00:0850 0A              	    62:         asl
00:0851 A8              	    63:         tay
00:0852 B516            	    64:         lda buf,x
00:0854 2A              	    65:         rol
00:0855 CA              	    66:         dex
00:0856 CA              	    67:         dex
00:0857 9516            	    68:         sta buf,x
00:0859 98              	    69:         tya
00:085A E8              	    70:         inx
00:085B 7516            	    71:         adc buf,x
00:085D A8              	    72:         tay
00:085E A900            	    73:         lda #0
00:0860 2A              	    74:         rol
00:0861 CA              	    75:         dex
00:0862 7516            	    76:         adc buf,x
00:0864 9516            	    77:         sta buf,x
00:0866 98              	    78:         tya
00:0867 E8              	    79:         inx
00:0868 7516            	    80:         adc buf,x
00:086A CA              	    81:         dex
00:086B CA              	    82:         dex
00:086C 9516            	    83:         sta buf,x
00:086E A900            	    84:         lda #0
00:0870 2A              	    85:         rol
00:0871 E8              	    86:         inx
00:0872 7516            	    87:         adc buf,x
00:0874 9516            	    88:         sta buf,x
00:0876 CA              	    89:         dex
00:0877 60              	    90:         rts
                        	    91: 

Source: "src/startup.asm"
                        	    24:         include io.asm

Source: "io.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; I/O related sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Write the player's score to screen memory
                        	     6:         ;; May only be called from IRQ handler!
                        	     7:         ;; Clobbers .A, .X, and .Y
                        	     8:         ;; Reads:
                        	     9:         ;;  - score
                        	    10:         ;;  - irqwrd1
                        	    11:         ;; Writes:
                        	    12:         ;;  - irqwrd1
                        	    13:         ;;  - irqwrd2
                        	    14:         ;;  - irqtmp
                        	    15: printscr:
                        	    16:         ;; Each of the 4 bytes comprising score contains 2 BCD digits.
                        	    17:         ;; Each digit needs to be extracted and turned into a
                        	    18:         ;; printable character. Then, each digit can be written to
                        	    19:         ;; screen memory using printchr. We skip leading zeroes.
                        	    20:         ldwimm scrmsdi, irqwrd1
00:0878 A985            	     1M         lda #<scrmsdi
00:087A 851B            	     2M         sta irqwrd1
00:087C A901            	     3M         lda #>scrmsdi
00:087E 851C            	     4M         sta irqwrd1+1
                        	    21:         cpwrd irqwrd1, irqwrd2
00:0880 A51B            	     1M         lda irqwrd1
00:0882 851D            	     2M         sta irqwrd2
00:0884 A51C            	     3M         lda irqwrd1+1
00:0886 851E            	     4M         sta irqwrd2+1
                        	    22:         ldbimm 0, irqtmp
00:0888 A900            	     1M         lda #0
00:088A 851F            	     2M         sta irqtmp
00:088C A203            	    23:         ldx #3
00:088E 3070            	    24: lpprsc: bmi fiprsc
                        	    25:         ;; print hi-nybble BCD char
00:0890 B5FC            	    26:         lda score,x
00:0892 4A              	    27:         lsr
00:0893 4A              	    28:         lsr
00:0894 4A              	    29:         lsr
00:0895 4A              	    30:         lsr                     ;shift BCD digit into lo-nybble
00:0896 F007            	    31:         beq :+
00:0898 A001            	    32:         ldy #1
00:089A 841F            	    33:         sty irqtmp
00:089C 4CA608          	    34:         jmp :++
00:089F A41F            	    35: :       ldy irqtmp
00:08A1 D003            	    36:         bne :+
00:08A3 4CB208          	    37:         jmp :++
00:08A6 0930            	    38: :       ora #%00110000          ;convert to printable char
00:08A8 A8              	    39:         tay                     ;place char in .Y
                        	    40:         phx                     ;save .X onto stack
00:08A9 8A              	     1M         txa
00:08AA 48              	     2M         pha
00:08AB A205            	    41:         ldx #irqblki            ;load block index into .X
00:08AD 201409          	    42:         jsr printchr            ;print char
                        	    43:         plx                     ;restore .X from stack
00:08B0 68              	     1M         pla
00:08B1 AA              	     2M         tax
                        	    44: :       incwrd irqwrd2
00:08B2 18              	     1M         clc
00:08B3 A51D            	     2M         lda irqwrd2
00:08B5 6901            	     3M         adc #1
00:08B7 851D            	     4M         sta irqwrd2
00:08B9 A51E            	     5M         lda irqwrd2+1
00:08BB 6900            	     6M         adc #0
00:08BD 851E            	     7M         sta irqwrd2+1
                        	    45:         cpwrd irqwrd2, irqwrd1  ;increment screen memory offset
00:08BF A51D            	     1M         lda irqwrd2
00:08C1 851B            	     2M         sta irqwrd1  
00:08C3 A51E            	     3M         lda irqwrd2+1
00:08C5 851C            	     4M         sta irqwrd1  +1
                        	    46:         
                        	    47:         ;; print lo-nybble BCD char
00:08C7 B5FC            	    48: :       lda score,x
00:08C9 290F            	    49:         and #%00001111          ;mask out hi-nybble
00:08CB F007            	    50:         beq :+
00:08CD A001            	    51:         ldy #1        
00:08CF 841F            	    52:         sty irqtmp
00:08D1 4CDB08          	    53:         jmp :++
00:08D4 A41F            	    54: :       ldy irqtmp
00:08D6 D003            	    55:         bne :+
00:08D8 4CE708          	    56:         jmp :++
00:08DB 0930            	    57: :       ora #%00110000          ;convert to printable char
00:08DD A8              	    58:         tay                     ;place char in .Y
                        	    59:         phx                     ;save .X onto stack
00:08DE 8A              	     1M         txa
00:08DF 48              	     2M         pha
00:08E0 A205            	    60:         ldx #irqblki            ;load block index into .X
00:08E2 201409          	    61:         jsr printchr            ;print char
                        	    62:         plx                     ;restore .X from stack
00:08E5 68              	     1M         pla
00:08E6 AA              	     2M         tax
                        	    63: :       incwrd irqwrd2
00:08E7 18              	     1M         clc
00:08E8 A51D            	     2M         lda irqwrd2
00:08EA 6901            	     3M         adc #1
00:08EC 851D            	     4M         sta irqwrd2
00:08EE A51E            	     5M         lda irqwrd2+1
00:08F0 6900            	     6M         adc #0
00:08F2 851E            	     7M         sta irqwrd2+1
                        	    64:         cpwrd irqwrd2, irqwrd1  ;increment screen memory offset
00:08F4 A51D            	     1M         lda irqwrd2
00:08F6 851B            	     2M         sta irqwrd1  
00:08F8 A51E            	     3M         lda irqwrd2+1
00:08FA 851C            	     4M         sta irqwrd1  +1
00:08FC CA              	    65:         dex                     ;decrement .X
00:08FD 4C8E08          	    66:         jmp lpprsc
00:0900 60              	    67: fiprsc: rts
                        	    68:         
                        	    69:         ;; Write value in .Y to colour memory at 16-bit offset
                        	    70:         ;; in memory block.
                        	    71:         ;; Reads:
                        	    72:         ;;  - .Y (value to write to colour memory)
                        	    73:         ;;  - .X (buf offset to access memory block )
                        	    74:         ;;  - 1st word in memory block at offset
                        	    75:         ;; Writes:
                        	    76:         ;;  - 1st word in memory block at offset
                        	    77: printcol:       
00:0901 18              	    78:         clc
00:0902 A900            	    79:         lda #<colmem
00:0904 7516            	    80:         adc buf,x
00:0906 9516            	    81:         sta buf,x
00:0908 E8              	    82:         inx                     ;hi-byte
00:0909 A9D8            	    83:         lda #>colmem
00:090B 7516            	    84:         adc buf,x
00:090D 9516            	    85:         sta buf,x
00:090F CA              	    86:         dex                     ;lo-byte
00:0910 98              	    87:         tya
00:0911 8116            	    88:         sta (buf,x)             ;write to colour memory
00:0913 60              	    89:         rts
                        	    90: 
                        	    91:         ;; Write char in .Y to screen memory at 16-bit offset
                        	    92:         ;; in memory block.
                        	    93:         ;; Reads:
                        	    94:         ;;  - .Y (char to write to screen memory)
                        	    95:         ;;  - .X (buf offset to access memory block )
                        	    96:         ;;  - 1st word in memory block at offset
                        	    97:         ;; Writes:
                        	    98:         ;;  - 1st word in memory block at offset
                        	    99: printchr:
                        	   100:         ;; Write char to screen memory
00:0914 18              	   101:         clc        
00:0915 A900            	   102:         lda #<scnmem
00:0917 7516            	   103:         adc buf,x
00:0919 9516            	   104:         sta buf,x
00:091B E8              	   105:         inx                     ;hi-byte
00:091C A94C            	   106:         lda #>scnmem
00:091E 7516            	   107:         adc buf,x
00:0920 9516            	   108:         sta buf,x
00:0922 CA              	   109:         dex                     ;lo-byte
00:0923 98              	   110:         tya
00:0924 8116            	   111:         sta (buf,x)             ;write to screen memory
00:0926 60              	   112:         rts
                        	   113: 
                        	   114:         ;; Initialize VIC-II
                        	   115:         ;;  - Select 16K video bank
                        	   116:         ;;  - Select screen memory location
                        	   117:         ;;  - Select character memory location
                        	   118:         ;;  - Set border & background colours
                        	   119: initvic:
                        	   120:         ;; select vic bank
00:0927 AD02DD          	   121:         lda c2ddra
00:092A 0903            	   122:         ora #%00000011
00:092C 8D02DD          	   123:         sta c2ddra              ;set bits 0+1 of ci2pra as output bits
00:092F AD00DD          	   124:         lda ci2pra
00:0932 29FC            	   125:         and #%11111100
00:0934 0902            	   126:         ora #%00000010
00:0936 8D00DD          	   127:         sta ci2pra              ;select vic bank 1: $4000-$7fff
                        	   128: 
                        	   129:         ;; select screen memory loc
00:0939 A90F            	   130:         lda #$0f
00:093B 2D18D0          	   131:         and vmcsb
00:093E 0930            	   132:         ora #$30
00:0940 8D18D0          	   133:         sta vmcsb
                        	   134: 
                        	   135:         ;; select char memory loc
00:0943 A9F1            	   136:         lda #$f1
00:0945 2D18D0          	   137:         and vmcsb
00:0948 8D18D0          	   138:         sta vmcsb
                        	   139: 
                        	   140:         ;; set border & background colours
00:094B A900            	   141:         lda #0
00:094D 8D20D0          	   142:         sta extcol
00:0950 8D21D0          	   143:         sta bgcol0
00:0953 8D9979          	   144:         sta border
00:0956 60              	   145:         rts
                        	   146: 
                        	   147:         ;; Fill colour memory from colour table
                        	   148: fillcolmem:
                        	   149:         ;; populate colour memory
00:0957 A200            	   150:         ldx #0
                        	   151: setcol1:
00:0959 BD004C          	   152:         lda scnmem,x
00:095C A8              	   153:         tay
00:095D B90048          	   154:         lda coltab,y
00:0960 9D00D8          	   155:         sta colmem,x
00:0963 E8              	   156:         inx
00:0964 E0FA            	   157:         cpx #250
00:0966 D0F1            	   158:         bne setcol1
00:0968 A200            	   159:         ldx #0
                        	   160: setcol2:
00:096A BDFA4C          	   161:         lda scnmem+250,x
00:096D A8              	   162:         tay
00:096E B90048          	   163:         lda coltab,y
00:0971 9DFAD8          	   164:         sta colmem+250,x
00:0974 E8              	   165:         inx
00:0975 E0FA            	   166:         cpx #250
00:0977 D0F1            	   167:         bne setcol2
00:0979 A200            	   168:         ldx #0
                        	   169: setcol3:
00:097B BDF44D          	   170:         lda scnmem+500,x
00:097E A8              	   171:         tay
00:097F B90048          	   172:         lda coltab,y
00:0982 9DF4D9          	   173:         sta colmem+500,x
00:0985 E8              	   174:         inx
00:0986 E0FA            	   175:         cpx #250
00:0988 D0F1            	   176:         bne setcol3
00:098A A200            	   177:         ldx #0
                        	   178: setcol4:
00:098C BDEE4E          	   179:         lda scnmem+750,x
00:098F A8              	   180:         tay
00:0990 B90048          	   181:         lda coltab,y
00:0993 9DEEDA          	   182:         sta colmem+750,x
00:0996 E8              	   183:         inx
00:0997 E0FA            	   184:         cpx #250
00:0999 D0F1            	   185:         bne setcol4
00:099B 60              	   186:         rts
                        	   187:         
                        	   188:         ;; Read joystick in port 2
                        	   189:         ;; Writes:
                        	   190:         ;;  - joyx = $01: stick moved right
                        	   191:         ;;  - joyx = $ff: stick moved left
                        	   192:         ;;  - joyy = $01: stick moved down
                        	   193:         ;;  - joyy = $ff: stick moved up
                        	   194:         ;;  - joybtn = $01: button pressed
                        	   195: readjoy2:
00:099C AD00DC          	   196:         lda ci1pra
00:099F A000            	   197:         ldy #0
00:09A1 A200            	   198:         ldx #0
00:09A3 4A              	   199:         lsr
00:09A4 B001            	   200:         bcs djr0
00:09A6 88              	   201:         dey
00:09A7 4A              	   202: djr0:   lsr
00:09A8 B001            	   203:         bcs djr1
00:09AA C8              	   204:         iny
00:09AB 4A              	   205: djr1:   lsr
00:09AC B001            	   206:         bcs djr2
00:09AE CA              	   207:         dex
00:09AF 4A              	   208: djr2:   lsr
00:09B0 B001            	   209:         bcs djr3
00:09B2 E8              	   210:         inx
00:09B3 4A              	   211: djr3:   lsr
00:09B4 8696            	   212:         stx joyx
00:09B6 8497            	   213:         sty joyy
00:09B8 A900            	   214:         lda #0
00:09BA 2A              	   215:         rol
00:09BB 8592            	   216:         sta joybtn
00:09BD 60              	   217:         rts
                        	   218: 

Source: "src/startup.asm"
                        	    25:         include maze.asm

Source: "maze.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Maze related sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Convert pellet table index to pellet memory address.
                        	     6:         ;; Reads:
                        	     7:         ;;  - .A (pellet table index)
                        	     8:         ;;  - .X (offset to memory block in buf)
                        	     9:         ;; Writes:
                        	    10:         ;;  - Result is stored in 1st word of buf at offset .X
                        	    11:         ;;  - 2nd word of buf at offset .X is used as a work area
                        	    12: pelladr:
00:09BE 201908          	    13:         jsr mula5               ;multiply pellet index by 5
00:09C1 18              	    14:         clc
00:09C2 B516            	    15:         lda buf,x               ;load product (lo)
00:09C4 692A            	    16:         adc #<pelltbl           ;add pellet table address (lo)
00:09C6 9516            	    17:         sta buf,x               ;write sum (lo)
00:09C8 E8              	    18:         inx
00:09C9 B516            	    19:         lda buf,x               ;load product (hi)
00:09CB 6913            	    20:         adc #>pelltbl           ;add pellet table address (hi)
00:09CD 9516            	    21:         sta buf,x               ;write sum (hi)
00:09CF CA              	    22:         dex
00:09D0 60              	    23:         rts
                        	    24: 
                        	    25:         ;; Fill maze with pellets
                        	    26:         ;; May only be called from gameloop!
                        	    27: fillmaze:
                        	    28:         ldbimm 0, tmp           ;store pellet index in tmp
00:09D1 A900            	     1M         lda #0
00:09D3 851A            	     2M         sta tmp           
                        	    29: filloop:
00:09D5 A51A            	    30:         lda tmp
00:09D7 A200            	    31:         ldx #blki
00:09D9 20BE09          	    32:         jsr pelladr             ;get pellet address
00:09DC A001            	    33:         ldy #1
00:09DE B116            	    34:         lda (wrd1),y
00:09E0 C9FF            	    35:         cmp #$ff                ;end marker?
00:09E2 F029            	    36:         beq finfil              ;yep, we're done
00:09E4 A901            	    37:         lda #1
00:09E6 A002            	    38:         ldy #2
00:09E8 9116            	    39:         sta (wrd1),y            ;set pellet status        
                        	    40:         ldwptr wrd1, 0, wrd2
00:09EA A000            	     1M         ldy #0
00:09EC B116            	     2M         lda (wrd1),y
00:09EE 8518            	     3M         sta wrd2
00:09F0 C8              	     4M         iny
00:09F1 B116            	     5M         lda (wrd1),y
00:09F3 8519            	     6M         sta wrd2+1
00:09F5 A204            	    41:         ldx #blki+4
00:09F7 202C0B          	    42:         jsr isenzr              ;is pellet an energizer?
00:09FA F005            	    43:         beq :+
00:09FC A053            	    44:         ldy #pellchr            ;no, it's a regular pellet
00:09FE 4C030A          	    45:         jmp :++
00:0A01 A054            	    46: :       ldy #enzrchr            ;yes, it's an energizer        
00:0A03 A202            	    47: :       ldx #blki+2
00:0A05 201409          	    48:         jsr printchr            ;print pellet char
00:0A08 E61A            	    49:         inc tmp
00:0A0A 4CD509          	    50:         jmp filloop
00:0A0D 60              	    51: finfil: rts
                        	    52: 
                        	    53:         ;; Find pellet collided with by searching in the opposite direction
                        	    54:         ;; to which Pac-Man is facing.
                        	    55:         ;; May only be called from IRQ handler!
                        	    56:         ;; Reads:
                        	    57:         ;;  - sp0x, sp0y
                        	    58:         ;;  - pacdir (direction Pac-Man is facing)
                        	    59:         ;; Writes:
                        	    60:         ;;  - irqwrd1: pellet address
                        	    61:         ;;  - irqtmp: pellet index
                        	    62: findpel:
                        	    63:         ;; if pacdir=#w then find 1st pellet in row with x>=sp0x
                        	    64:         ;; if pacdir=#e then find last pellet in row with x<=sp0x
                        	    65:         ;; if pacdir=#n then find pellet in row-1 with x=sp0x
                        	    66:         ;; if pacdir=#s then find pellet in row+1 with x=sp0x
00:0A0E A5A3            	    67:         lda pacdir
00:0A10 C904            	    68:         cmp #w
00:0A12 D033            	    69:         bne fpckde
                        	    70:         cpbyt sp0y, irqtmp
00:0A14 AD01D0          	     1M         lda sp0y
00:0A17 851F            	     2M         sta irqtmp
00:0A19 20100B          	    71:         jsr fpinrow             ;get indexes of west-most & east-most pellets
                        	    72:         cpbyt irqwrd2, irqtmp   ;store index of west-most pellet
00:0A1C A51D            	     1M         lda irqwrd2
00:0A1E 851F            	     2M         sta irqtmp   
00:0A20 A205            	    73:         ldx #irqblki
00:0A22 A51F            	    74: :       lda irqtmp              ;load index of west-most pellet in row
00:0A24 20BE09          	    75:         jsr pelladr             ;load pellet address into irqwrd1
00:0A27 A003            	    76:         ldy #3
                        	    77:         cpbyt sp0x, irqwrd2     ;copy sp0x to irqwrd2 (lo)
00:0A29 AD00D0          	     1M         lda sp0x
00:0A2C 851D            	     2M         sta irqwrd2     
00:0A2E C61D            	    78:         dec irqwrd2             ;decrement irqwrd2 (lo) to give some leeway
00:0A30 B11B            	    79:         lda (irqwrd1),y         ;load pellet x loc
00:0A32 C51D            	    80:         cmp irqwrd2
00:0A34 B005            	    81:         bcs :+                  ;pellet x loc >= sp0x?
00:0A36 E61F            	    82:         inc irqtmp              ;no, try next pellet to the east
00:0A38 4C220A          	    83:         jmp :-
00:0A3B A002            	    84: :       ldy #2
00:0A3D B11B            	    85:         lda (irqwrd1),y         ;yes, load pellet state
                        	    86:         jeq pelnotfd            ;has pellet already been eaten?
00:0A3F D003            	     1M         bne :+
00:0A41 4CE30A          	     2M         jmp pelnotfd            
                        	     3M :
00:0A44 4CDC0A          	    87:         jmp pelfound
00:0A47 C905            	    88: fpckde: cmp #e
00:0A49 D036            	    89:         bne fpckdn
                        	    90:         cpbyt sp0y, irqtmp
00:0A4B AD01D0          	     1M         lda sp0y
00:0A4E 851F            	     2M         sta irqtmp
00:0A50 20100B          	    91:         jsr fpinrow             ;get indexes of west-most & east-most pellets
00:0A53 A001            	    92:         ldy #1
00:0A55 B91D00          	    93:         lda irqwrd2,y
00:0A58 851F            	    94:         sta irqtmp              ;store index of west-most pellet
00:0A5A A205            	    95:         ldx #irqblki
00:0A5C A51F            	    96: :       lda irqtmp
00:0A5E 20BE09          	    97:         jsr pelladr
                        	    98:         cpbyt sp0x, irqwrd2     ;copy sp0x to irqwrd2 (lo)
00:0A61 AD00D0          	     1M         lda sp0x
00:0A64 851D            	     2M         sta irqwrd2     
00:0A66 E61D            	    99:         inc irqwrd2             ;increment irqwrd2 (lo) to give some leeway
00:0A68 A51D            	   100:         lda irqwrd2
00:0A6A A003            	   101:         ldy #3
00:0A6C D11B            	   102:         cmp (irqwrd1),y
00:0A6E B005            	   103:         bcs :+                  ;sp0x >= pellet x loc
00:0A70 C61F            	   104:         dec irqtmp              ;no, try next pellet to the west
00:0A72 4C5C0A          	   105:         jmp :-
00:0A75 A002            	   106: :       ldy #2
00:0A77 B11B            	   107:         lda (irqwrd1),y         ;yes, load pellet state
                        	   108:         jeq pelnotfd            ;has pellet already been eaten?
00:0A79 D003            	     1M         bne :+
00:0A7B 4CE30A          	     2M         jmp pelnotfd            
                        	     3M :
00:0A7E 4CDC0A          	   109:         jmp pelfound
00:0A81 C902            	   110: fpckdn: cmp #n
00:0A83 D02D            	   111:         bne fpds
                        	   112:         cpbyt sp0y, irqtmp      ;store sp0y in irqtmp
00:0A85 AD01D0          	     1M         lda sp0y
00:0A88 851F            	     2M         sta irqtmp      
00:0A8A 20EC0A          	   113:         jsr fprixs
00:0A8D 20100B          	   114:         jsr fpinrow             ;get indexes of west-most & east-most pellets
                        	   115:         cpbyt irqwrd2, irqtmp   ;store index of west-most pellet
00:0A90 A51D            	     1M         lda irqwrd2
00:0A92 851F            	     2M         sta irqtmp   
00:0A94 A205            	   116:         ldx #irqblki
00:0A96 A51F            	   117: :       lda irqtmp
00:0A98 20BE09          	   118:         jsr pelladr
00:0A9B AD00D0          	   119:         lda sp0x
00:0A9E A003            	   120:         ldy #3
00:0AA0 D11B            	   121:         cmp (irqwrd1),y
00:0AA2 F005            	   122:         beq :+                  ;sp0x = pellet x loc?
00:0AA4 E61F            	   123:         inc irqtmp              ;no, try next pellet to the east
00:0AA6 4C960A          	   124:         jmp :-
00:0AA9 A002            	   125: :       ldy #2
00:0AAB B11B            	   126:         lda (irqwrd1),y         ;yes, load pellet state
00:0AAD F034            	   127:         beq pelnotfd            ;has pellet already been eaten?
00:0AAF 4CDC0A          	   128:         jmp pelfound
                        	   129: fpds:   cpbyt sp0y, irqtmp
00:0AB2 AD01D0          	     1M         lda sp0y
00:0AB5 851F            	     2M         sta irqtmp
00:0AB7 20FE0A          	   130:         jsr fprixn
00:0ABA 20100B          	   131:         jsr fpinrow             ;get indexes of west-most & east-most pellets
                        	   132:         cpbyt irqwrd2, irqtmp   ;store index of west-most pellet
00:0ABD A51D            	     1M         lda irqwrd2
00:0ABF 851F            	     2M         sta irqtmp   
00:0AC1 A205            	   133:         ldx #irqblki
00:0AC3 A51F            	   134: :       lda irqtmp
00:0AC5 20BE09          	   135:         jsr pelladr
00:0AC8 AD00D0          	   136:         lda sp0x
00:0ACB A003            	   137:         ldy #3
00:0ACD D11B            	   138:         cmp (irqwrd1),y
00:0ACF F005            	   139:         beq :+                  ;sp0x = pellet x loc?
00:0AD1 E61F            	   140:         inc irqtmp              ;no, try next pellet to the east
00:0AD3 4CC30A          	   141:         jmp :-
00:0AD6 A002            	   142: :       ldy #2
00:0AD8 B11B            	   143:         lda (irqwrd1),y         ;yes, load pellet state
00:0ADA F007            	   144:         beq pelnotfd            ;has pellet already been eaten?
                        	   145: pelfound:
00:0ADC A900            	   146:         lda #0
00:0ADE A002            	   147:         ldy #2
00:0AE0 911B            	   148:         sta (irqwrd1),y         ;pellet not yet eaten, mark as eaten
00:0AE2 60              	   149:         rts        
                        	   150: pelnotfd:
                        	   151:         ldwimm $ffff, irqwrd1   ;pellet already eaten
00:0AE3 A9FF            	     1M         lda #<$ffff
00:0AE5 851B            	     2M         sta irqwrd1   
00:0AE7 A9FF            	     3M         lda #>$ffff
00:0AE9 851C            	     4M         sta irqwrd1   +1
00:0AEB 60              	   152:         rts
                        	   153: 
                        	   154:         ;; Get y loc of next row to the south of the y loc in irqtmp
                        	   155:         ;; Reads:
                        	   156:         ;;  - irqtmp: y loc to find row south of
                        	   157:         ;; Writes:
                        	   158:         ;;  - irqtmp: y loc of next row to the south
00:0AEC A000            	   159: fprixs: ldy #0
00:0AEE B9D916          	   160: :       lda plrowix,y
00:0AF1 C51F            	   161:         cmp irqtmp
00:0AF3 B006            	   162:         bcs :+
00:0AF5 C8              	   163:         iny
00:0AF6 C8              	   164:         iny
00:0AF7 C8              	   165:         iny
00:0AF8 4CEE0A          	   166:         jmp :-
00:0AFB 851F            	   167: :       sta irqtmp
00:0AFD 60              	   168:         rts
                        	   169:         
                        	   170:         ;; Get y loc of next row to the north of the y loc in irqtmp
                        	   171:         ;; Reads:
                        	   172:         ;;  - irqtmp: y loc to find row north of
                        	   173:         ;; Writes:
                        	   174:         ;;  - irqtmp: y loc of next row to the north
00:0AFE A042            	   175: fprixn: ldy #66
00:0B00 B9D916          	   176: :       lda plrowix,y
00:0B03 C51F            	   177:         cmp irqtmp
00:0B05 9006            	   178:         bcc :+
00:0B07 88              	   179:         dey
00:0B08 88              	   180:         dey
00:0B09 88              	   181:         dey
00:0B0A 4C000B          	   182:         jmp :-
00:0B0D 851F            	   183: :       sta irqtmp
00:0B0F 60              	   184:         rts
                        	   185:         
                        	   186:         
                        	   187:         ;; Get pellet table indexes of west-most & east-most pellets 
                        	   188:         ;; in row whose sprite y loc is in irqtmp
                        	   189:         ;; May only be called from IRQ handler!
                        	   190:         ;; Reads:
                        	   191:         ;;  - irqtmp: pellet row y loc
                        	   192:         ;; Writes:
                        	   193:         ;;  - irqwrd2: indexes of west-most & east-most pellets in row
                        	   194: fpinrow:
00:0B10 A000            	   195:         ldy #0
00:0B12 B9D916          	   196: :       lda plrowix,y
00:0B15 C51F            	   197:         cmp irqtmp
00:0B17 F006            	   198:         beq :+
00:0B19 C8              	   199:         iny
00:0B1A C8              	   200:         iny
00:0B1B C8              	   201:         iny
00:0B1C 4C120B          	   202:         jmp :-
00:0B1F C8              	   203: :       iny
00:0B20 B9D916          	   204:         lda plrowix,y
00:0B23 851D            	   205:         sta irqwrd2
00:0B25 C8              	   206:         iny
00:0B26 B9D916          	   207:         lda plrowix,y
00:0B29 851E            	   208:         sta irqwrd2+1
00:0B2B 60              	   209:         rts
                        	   210: 
                        	   211:         ;; Check whether or not pellet at index is an energizer
                        	   212:         ;; Reads:
                        	   213:         ;;  - .X: index into buffer to access memory block
                        	   214:         ;;  - 1st byte of memory block: pellet index
                        	   215:         ;; Writes:
                        	   216:         ;;  - .Z is set if pellet is an energizer
00:0B2C A003            	   217: isenzr: ldy #3
00:0B2E 300B            	   218: :       bmi :+
00:0B30 B516            	   219:         lda buf,x
00:0B32 D9BD16          	   220:         cmp enzrlst,y
00:0B35 F004            	   221:         beq :+
00:0B37 88              	   222:         dey
00:0B38 4C2E0B          	   223:         jmp :-
00:0B3B 60              	   224: :       rts
                        	   225: 
                        	   226:         ;; Convert node index to node address
                        	   227:         ;; Reads:
                        	   228:         ;;  - .A (node index)
                        	   229:         ;;  - .X (offset into buf to access memory block)
                        	   230:         ;; Writes:
                        	   231:         ;;  - Result is stored in 1st word of memory block
                        	   232:         ;;  - 2nd word of memory block is used as a work area
                        	   233: nodeadr:
00:0B3C 204208          	   234:         jsr mula6
00:0B3F 18              	   235:         clc
00:0B40 B516            	   236:         lda buf,x
00:0B42 698C            	   237:         adc #<nodetbl
00:0B44 9516            	   238:         sta buf,x
00:0B46 E8              	   239:         inx
00:0B47 B516            	   240:         lda buf,x
00:0B49 6911            	   241:         adc #>nodetbl
00:0B4B 9516            	   242:         sta buf,x
00:0B4D CA              	   243:         dex
00:0B4E 60              	   244:         rts
                        	   245: 
                        	   246:         ;; Calculate distance from Pac-Man's source node to target node
                        	   247:         ;; Reads:
                        	   248:         ;;  - pacsrc (source node)
                        	   249:         ;;  - pactar (target node)
                        	   250:         ;;  - pacdir (compass direction)
                        	   251:         ;;  - .X (offset into buf to access memory block)
                        	   252:         ;; Writes:
                        	   253:         ;;  - pacdis (total distance)
                        	   254:         ;;  - pacrem (distance remaining)
                        	   255:         ;;  - 1st & 2nd word of memory block are used for calculations
                        	   256: setnodis:
00:0B4F A5A3            	   257:         lda pacdir
00:0B51 C904            	   258:         cmp #w
00:0B53 D01A            	   259:         bne chkne
00:0B55 A59F            	   260:         lda pactar
00:0B57 C921            	   261:         cmp #wrpnixe            ;eastern warp tunnel node
                        	   262:         jeq warp
00:0B59 D003            	     1M         bne :+
00:0B5B 4CF40B          	     2M         jmp warp
                        	     3M :
00:0B5E A59E            	   263:         lda pacsrc
00:0B60 203C0B          	   264:         jsr nodeadr             
00:0B63 A116            	   265:         lda (buf,x)             ;get source x coord...
00:0B65 48              	   266:         pha                     ;... and stash it on the stack
00:0B66 A59F            	   267:         lda pactar
00:0B68 203C0B          	   268:         jsr nodeadr             ;get target node address
00:0B6B 68              	   269:         pla                     ;restore source x coord
00:0B6C 4CEC0B          	   270:         jmp calcnd
00:0B6F C905            	   271: chkne:  cmp #e
00:0B71 D01A            	   272:         bne chknn
00:0B73 A59F            	   273:         lda pactar
00:0B75 C91B            	   274:         cmp #wrpnixw             ;western warp tunnel node
                        	   275:         jeq warp
00:0B77 D003            	     1M         bne :+
00:0B79 4CF40B          	     2M         jmp warp
                        	     3M :
00:0B7C A59F            	   276:         lda pactar
00:0B7E 203C0B          	   277:         jsr nodeadr             
00:0B81 A116            	   278:         lda (buf,x)             ;get target x coord...
00:0B83 48              	   279:         pha                     ;... and stash it on the stack
00:0B84 A59E            	   280:         lda pacsrc
00:0B86 203C0B          	   281:         jsr nodeadr             ;get source node address
00:0B89 68              	   282:         pla                     ;restore target x coord
00:0B8A 4CEC0B          	   283:         jmp calcnd
00:0B8D C902            	   284: chknn:  cmp #n
00:0B8F D02F            	   285:         bne setnds
00:0B91 A59E            	   286:         lda pacsrc
00:0B93 203C0B          	   287:         jsr nodeadr
                        	   288:         incptrx buf             ;advance pointer; we need y coord
00:0B96 18              	     1M         clc
00:0B97 B516            	     2M         lda buf             ,x
00:0B99 6901            	     3M         adc #1
00:0B9B 9516            	     4M         sta buf             ,x
00:0B9D E8              	     5M         inx
00:0B9E B516            	     6M         lda buf             ,x
00:0BA0 6900            	     7M         adc #0
00:0BA2 9516            	     8M         sta buf             ,x
00:0BA4 CA              	     9M         dex
00:0BA5 A116            	   289:         lda (buf,x)             ;get source y coord...
00:0BA7 48              	   290:         pha                     ;... and stash it on the stack
00:0BA8 A59F            	   291:         lda pactar
00:0BAA 203C0B          	   292:         jsr nodeadr             ;get target node address
                        	   293:         incptrx buf             ;advance pointer; we need y coord
00:0BAD 18              	     1M         clc
00:0BAE B516            	     2M         lda buf             ,x
00:0BB0 6901            	     3M         adc #1
00:0BB2 9516            	     4M         sta buf             ,x
00:0BB4 E8              	     5M         inx
00:0BB5 B516            	     6M         lda buf             ,x
00:0BB7 6900            	     7M         adc #0
00:0BB9 9516            	     8M         sta buf             ,x
00:0BBB CA              	     9M         dex
00:0BBC 68              	   294:         pla                     ;restore source y coord
00:0BBD 4CEC0B          	   295:         jmp calcnd
00:0BC0 A59F            	   296: setnds: lda pactar
00:0BC2 203C0B          	   297:         jsr nodeadr
                        	   298:         incptrx buf             ;advance pointer; we need y coord
00:0BC5 18              	     1M         clc
00:0BC6 B516            	     2M         lda buf             ,x
00:0BC8 6901            	     3M         adc #1
00:0BCA 9516            	     4M         sta buf             ,x
00:0BCC E8              	     5M         inx
00:0BCD B516            	     6M         lda buf             ,x
00:0BCF 6900            	     7M         adc #0
00:0BD1 9516            	     8M         sta buf             ,x
00:0BD3 CA              	     9M         dex
00:0BD4 A116            	   299:         lda (buf,x)             ;get target y coord...
00:0BD6 48              	   300:         pha                     ;... and stash it on the stack
00:0BD7 A59E            	   301:         lda pacsrc
00:0BD9 203C0B          	   302:         jsr nodeadr
                        	   303:         incptrx buf             ;advance pointer; we need y coord
00:0BDC 18              	     1M         clc
00:0BDD B516            	     2M         lda buf             ,x
00:0BDF 6901            	     3M         adc #1
00:0BE1 9516            	     4M         sta buf             ,x
00:0BE3 E8              	     5M         inx
00:0BE4 B516            	     6M         lda buf             ,x
00:0BE6 6900            	     7M         adc #0
00:0BE8 9516            	     8M         sta buf             ,x
00:0BEA CA              	     9M         dex
00:0BEB 68              	   304:         pla                     ;restore target y coord
00:0BEC 38              	   305: calcnd: sec
00:0BED E116            	   306:         sbc (buf,x)
00:0BEF 85A4            	   307:         sta pacdis
00:0BF1 85A5            	   308:         sta pacrem
00:0BF3 60              	   309:         rts
00:0BF4 A900            	   310: warp:   lda #0
00:0BF6 85A4            	   311:         sta pacdis
00:0BF8 85A5            	   312:         sta pacrem
00:0BFA 60              	   313:         rts
                        	   314: 

Source: "src/startup.asm"
                        	    26:         include irq.asm

Source: "irq.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; IRQ handler sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Setup handler for raster IRQ.
                        	     6: setupirq:
00:0BFB 78              	     7:         sei
                        	     8:         ldbimm $7f, ci1icr
00:0BFC A97F            	     1M         lda #$7f
00:0BFE 8D0DDC          	     2M         sta ci1icr
                        	     9:         ldbimm $01, irqmsk ;enable raster IRQ
00:0C01 A901            	     1M         lda #$01
00:0C03 8D1AD0          	     2M         sta irqmsk 
                        	    10:         ldbimm $1b, scroly
00:0C06 A91B            	     1M         lda #$1b
00:0C08 8D11D0          	     2M         sta scroly
                        	    11:         ldbimm linset, raster
00:0C0B A9FF            	     1M         lda #linset
00:0C0D 8D12D0          	     2M         sta raster
                        	    12:         ldwimm procirq, cinv
00:0C10 A91C            	     1M         lda #<procirq
00:0C12 8D1403          	     2M         sta cinv
00:0C15 A90C            	     3M         lda #>procirq
00:0C17 8D1503          	     4M         sta cinv+1
00:0C1A 58              	    13:         cli
00:0C1B 60              	    14:         rts
                        	    15: 
                        	    16:         ;; IRQ handler
                        	    17: procirq:
00:0C1C AD12D0          	    18:         lda raster
00:0C1F C9FF            	    19:         cmp #linset
00:0C21 F010            	    20:         beq setbit
                        	    21:         ;; Clear bit 3 of scroly
00:0C23 AD11D0          	    22:         lda scroly
00:0C26 29F7            	    23:         and #%11110111
00:0C28 8D11D0          	    24:         sta scroly
00:0C2B A9FF            	    25:         lda #linset
00:0C2D 8D12D0          	    26:         sta raster              ;next IRQ at linset
00:0C30 4C400C          	    27:         jmp movpac
                        	    28:         ;; Set bit 3 of scroly
00:0C33 AD11D0          	    29: setbit: lda scroly
00:0C36 0908            	    30:         ora #%00001000
00:0C38 8D11D0          	    31:         sta scroly
00:0C3B A9F9            	    32:         lda #linclr
00:0C3D 8D12D0          	    33:         sta raster              ;next IRQ at linclr
                        	    34:         
                        	    35:         ;; Update sprite 0 (Pac-Man) x & y coordinates
00:0C40 A5A5            	    36: movpac: lda pacrem
00:0C42 F025            	    37:         beq finras
00:0C44 A5A3            	    38:         lda pacdir
00:0C46 C904            	    39:         cmp #w
00:0C48 D006            	    40:         bne chkpde
00:0C4A CE00D0          	    41:         dec sp0x
00:0C4D 4C670C          	    42:         jmp decrem
00:0C50 C905            	    43: chkpde: cmp #e
00:0C52 D006            	    44:         bne chkpdn
00:0C54 EE00D0          	    45:         inc sp0x
00:0C57 4C670C          	    46:         jmp decrem
00:0C5A C902            	    47: chkpdn: cmp #n
00:0C5C D006            	    48:         bne pds
00:0C5E CE01D0          	    49:         dec sp0y
00:0C61 4C670C          	    50:         jmp decrem
00:0C64 EE01D0          	    51: pds:    inc sp0y
00:0C67 C6A5            	    52: decrem: dec pacrem
00:0C69 0E19D0          	    53: finras: asl vicirq              ;acknowledge IRQ
00:0C6C 4C7EEA          	    54:         jmp sysirq              ;return from interrupt
                        	    55: 

Source: "src/startup.asm"
                        	    27:         include nmi.asm

Source: "nmi.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; NMI handler sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Setup handler for CIA2 timer NMI.
                        	     6: setupnmi:
00:0C6F 78              	     7:         sei
                        	     8:         ldwimm $740d, ti2a              ;timer A fires every ~30ms (PAL)
00:0C70 A90D            	     1M         lda #<$740d
00:0C72 8D04DD          	     2M         sta ti2a              
00:0C75 A974            	     3M         lda #>$740d
00:0C77 8D05DD          	     4M         sta ti2a              +1
                        	     9:         ldwimm 8, ti2b                  ;timer B fires every ~240ms (PAL)
00:0C7A A908            	     1M         lda #<8
00:0C7C 8D06DD          	     2M         sta ti2b                  
00:0C7F A900            	     3M         lda #>8
00:0C81 8D07DD          	     4M         sta ti2b                  +1
                        	    10:         ldbimm %00010001, ci2cra
00:0C84 A911            	     1M         lda #%00010001
00:0C86 8D0EDD          	     2M         sta ci2cra
                        	    11:         ldbimm %01010001, ci2crb
00:0C89 A951            	     1M         lda #%01010001
00:0C8B 8D0FDD          	     2M         sta ci2crb
00:0C8E AD0DDD          	    12:         lda ci2icr
                        	    13:         ldbimm %10000011, ci2icr        ;allow interrupts from both timers
00:0C91 A983            	     1M         lda #%10000011
00:0C93 8D0DDD          	     2M         sta ci2icr        
                        	    14:         ldbimm 0, pacaix                ;init Pac-Man's animation index
00:0C96 A900            	     1M         lda #0
00:0C98 85AA            	     2M         sta pacaix                
                        	    15:         ldbimm 0, enzraix               ;init energizer animation index
00:0C9A A900            	     1M         lda #0
00:0C9C 85AB            	     2M         sta enzraix               
                        	    16:         ldwimm procnmi, nminv
00:0C9E A9AA            	     1M         lda #<procnmi
00:0CA0 8D1803          	     2M         sta nminv
00:0CA3 A90C            	     3M         lda #>procnmi
00:0CA5 8D1903          	     4M         sta nminv+1
00:0CA8 58              	    17:         cli
00:0CA9 60              	    18:         rts
                        	    19: 
                        	    20:         ;; NMI handler. Here we animate the various in-game objects such as:
                        	    21:         ;;  - Pac-Man (in-game and death animations)
                        	    22:         ;;  - Energizers (phase)
                        	    23:         ;;  - The ghosts (regular, fright, and death animations)
                        	    24:         ;; We also handle timer events such as:
                        	    25:         ;;  - Fruit (appearance and disappearance)
                        	    26:         ;;  - Ghosts switching between scatter & chase mode
                        	    27: procnmi:
00:0CAA 48              	    28:         pha
                        	    29:         phx
00:0CAB 8A              	     1M         txa
00:0CAC 48              	     2M         pha
                        	    30:         phy                             ;push .A, .X, and .Y onto the stack
00:0CAD 98              	     1M         tya
00:0CAE 48              	     2M         pha
00:0CAF AD0DDD          	    31:         lda ci2icr
00:0CB2 A8              	    32:         tay
00:0CB3 2902            	    33:         and #%00000010
                        	    34:         jne timbev
00:0CB5 F003            	     1M         beq :+
00:0CB7 4C1F0D          	     2M         jmp timbev
                        	     3M :
00:0CBA 98              	    35:         tya
00:0CBB 2901            	    36:         and #%00000001
                        	    37:         jeq sysnmi
00:0CBD D003            	     1M         bne :+
00:0CBF 4C56FE          	     2M         jmp sysnmi
                        	     3M :
                        	    38:         
                        	    39:         ;; Timer A fired: animate Pac-Man
00:0CC2 A5A6            	    40: timaev: lda npelrem
                        	    41:         jeq finnmi                      ;don't animate PM if all pellets eaten
00:0CC4 D003            	     1M         bne :+
00:0CC6 4C560E          	     2M         jmp finnmi                      
                        	     3M :
00:0CC9 A5A5            	    42:         lda pacrem
                        	    43:         jeq finnmi                      ;don't animate PM if he's not moving
00:0CCB D003            	     1M         bne :+
00:0CCD 4C560E          	     2M         jmp finnmi                      
                        	     3M :
00:0CD0 E6AA            	    44:         inc pacaix
00:0CD2 A4AA            	    45:         ldy pacaix
00:0CD4 C006            	    46:         cpy #6                          ;past final animation?
00:0CD6 9005            	    47:         bcc :+
                        	    48:         ldbimm 0, pacaix                ;yes, reset animation index
00:0CD8 A900            	     1M         lda #0
00:0CDA 85AA            	     2M         sta pacaix                
00:0CDC A8              	    49:         tay
00:0CDD A5A3            	    50: :       lda pacdir                      ;no, check Pac-Man's direction
00:0CDF C902            	    51:         cmp #n
00:0CE1 F013            	    52:         beq :+
00:0CE3 C903            	    53:         cmp #s
00:0CE5 F01A            	    54:         beq :++
00:0CE7 C904            	    55:         cmp #w
00:0CE9 F021            	    56:         beq :+++
                        	    57:         ldwimm pacalste, nmiwrd1        ;east
00:0CEB A9D3            	     1M         lda #<pacalste
00:0CED 8520            	     2M         sta nmiwrd1        
00:0CEF A916            	     3M         lda #>pacalste
00:0CF1 8521            	     4M         sta nmiwrd1        +1
00:0CF3 4C140D          	    58:         jmp ldanim
                        	    59: :       ldwimm pacalstn, nmiwrd1        ;north
00:0CF6 A9C1            	     1M         lda #<pacalstn
00:0CF8 8520            	     2M         sta nmiwrd1        
00:0CFA A916            	     3M         lda #>pacalstn
00:0CFC 8521            	     4M         sta nmiwrd1        +1
00:0CFE 4C140D          	    60:         jmp ldanim
                        	    61: :       ldwimm pacalsts, nmiwrd1        ;south
00:0D01 A9C7            	     1M         lda #<pacalsts
00:0D03 8520            	     2M         sta nmiwrd1        
00:0D05 A916            	     3M         lda #>pacalsts
00:0D07 8521            	     4M         sta nmiwrd1        +1
00:0D09 4C140D          	    62:         jmp ldanim
                        	    63: :       ldwimm pacalstw, nmiwrd1        ;west
00:0D0C A9CD            	     1M         lda #<pacalstw
00:0D0E 8520            	     2M         sta nmiwrd1        
00:0D10 A916            	     3M         lda #>pacalstw
00:0D12 8521            	     4M         sta nmiwrd1        +1
00:0D14 18              	    64: ldanim: clc
00:0D15 B120            	    65:         lda (nmiwrd1),y
00:0D17 6940            	    66:         adc #sp0loc
00:0D19 8DF84F          	    67:         sta sp0ptr
00:0D1C 4C560E          	    68:         jmp finnmi
                        	    69:         
                        	    70:         ;; Timer B fired:
                        	    71:         ;;  - animate energizers
                        	    72:         ;;  - flash maze on level end
                        	    73:         ;;  - hide fruit
00:0D1F A5A9            	    74: timbev: lda frtena
00:0D21 F00C            	    75:         beq :++                         ;fruit enabled?
00:0D23 C926            	    76:         cmp #frttim
00:0D25 D006            	    77:         bne :+                          ;yes, fruit timer expired?
00:0D27 207F11          	    78:         jsr hidefrt                     ;yes, hide fruit
00:0D2A 4C2F0D          	    79:         jmp :++
00:0D2D E6A9            	    80: :       inc frtena                      ;no, increment timer
00:0D2F A5A6            	    81: :       lda npelrem
                        	    82:         jeq flshmaz                     ;all pellets eaten, flash maze
00:0D31 D003            	     1M         bne :+
00:0D33 4C9C0D          	     2M         jmp flshmaz                     
                        	     3M :
00:0D36 A5AB            	    83:         lda enzraix
00:0D38 F037            	    84:         beq tic
00:0D3A C6AB            	    85:         dec enzraix
00:0D3C A003            	    86:         ldy #3
                        	    87: tocloop:
                        	    88:         jmi finnmi
00:0D3E 1003            	     1M         bpl :+
00:0D40 4C560E          	     2M         jmp finnmi
                        	     3M :
                        	    89:         phy                             ;save loop counter onto stack        
00:0D43 98              	     1M         tya
00:0D44 48              	     2M         pha
00:0D45 B9BD16          	    90:         lda enzrlst,y                   ;load energizer pelltbl index into .A
00:0D48 A20A            	    91:         ldx #nmiblki
00:0D4A 20BE09          	    92:         jsr pelladr                     ;load pellet address into nmiwrd1
00:0D4D A002            	    93:         ldy #2
00:0D4F B120            	    94:         lda (nmiwrd1),y                 ;load pellet state
00:0D51 D006            	    95:         bne :+                          ;has the pellet been eaten?
                        	    96:         ply                             ;yes, next energizer
00:0D53 68              	     1M         pla
00:0D54 A8              	     2M         tay
00:0D55 88              	    97:         dey
00:0D56 4C3E0D          	    98:         jmp tocloop
                        	    99: :       ldwptr nmiwrd1, 0, nmiwrd2      ;energizer not eaten
00:0D59 A000            	     1M         ldy #0
00:0D5B B120            	     2M         lda (nmiwrd1),y
00:0D5D 8522            	     3M         sta nmiwrd2      
00:0D5F C8              	     4M         iny
00:0D60 B120            	     5M         lda (nmiwrd1),y
00:0D62 8523            	     6M         sta nmiwrd2      +1
00:0D64 A00F            	   100:         ldy #ltgrey
00:0D66 A20C            	   101:         ldx #nmiblki+2
00:0D68 200109          	   102:         jsr printcol                    ;colour energizer light grey
                        	   103:         ply                             ;pop loop counter off the stack
00:0D6B 68              	     1M         pla
00:0D6C A8              	     2M         tay
00:0D6D 88              	   104:         dey
00:0D6E 4C3E0D          	   105:         jmp tocloop
00:0D71 E6AB            	   106: tic:    inc enzraix
00:0D73 A003            	   107:         ldy #3
                        	   108: ticloop:
                        	   109:         jmi finnmi
00:0D75 1003            	     1M         bpl :+
00:0D77 4C560E          	     2M         jmp finnmi
                        	     3M :
                        	   110:         phy                             ;push loop counter onto stack
00:0D7A 98              	     1M         tya
00:0D7B 48              	     2M         pha
00:0D7C B9BD16          	   111:         lda enzrlst,y                   ;load energizer pelltbl index into .A
00:0D7F A20A            	   112:         ldx #nmiblki
00:0D81 20BE09          	   113:         jsr pelladr                     ;load pellet address into nmiwrd1
                        	   114:         ldwptr nmiwrd1, 0, nmiwrd2
00:0D84 A000            	     1M         ldy #0
00:0D86 B120            	     2M         lda (nmiwrd1),y
00:0D88 8522            	     3M         sta nmiwrd2
00:0D8A C8              	     4M         iny
00:0D8B B120            	     5M         lda (nmiwrd1),y
00:0D8D 8523            	     6M         sta nmiwrd2+1
00:0D8F A00B            	   115:         ldy #dkgrey
00:0D91 A20C            	   116:         ldx #nmiblki+2
00:0D93 200109          	   117:         jsr printcol                    ;colour energizer dark grey
                        	   118:         ply                             ;pop loop counter off the stack
00:0D96 68              	     1M         pla
00:0D97 A8              	     2M         tay
00:0D98 88              	   119:         dey
00:0D99 4C750D          	   120:         jmp ticloop
                        	   121: flshmaz:
00:0D9C A59B            	   122:         lda lvlend                      ;read number of flashes remaining
                        	   123:         jeq finnmi
00:0D9E D003            	     1M         bne :+
00:0DA0 4C560E          	     2M         jmp finnmi
                        	     3M :
00:0DA3 6A              	   124:         ror
                        	   125:         jcc flshwht                     ;flash white on even, blue on odd
00:0DA4 B003            	     1M         bcs :+
00:0DA6 4C000E          	     2M         jmp flshwht                     
                        	     3M :
00:0DA9 A200            	   126:         ldx #0
                        	   127: setblu1:
00:0DAB BD00D8          	   128:         lda colmem,x                    ;load value in colmem at pos
00:0DAE 290F            	   129:         and #%00001111                  ;mask out high nybble
00:0DB0 C901            	   130:         cmp #$01
00:0DB2 D005            	   131:         bne :+                          ;is colour = white?
00:0DB4 A906            	   132:         lda #$06
00:0DB6 9D00D8          	   133:         sta colmem,x                    ;yes, make it blue
00:0DB9 E8              	   134: :       inx                     
00:0DBA E0FA            	   135:         cpx #250
00:0DBC D0ED            	   136:         bne setblu1
00:0DBE A200            	   137:         ldx #0
                        	   138: setblu2:
00:0DC0 BDFAD8          	   139:         lda colmem+250,x                ;load value in colmem at pos
00:0DC3 290F            	   140:         and #%00001111                  ;mask out high nybble
00:0DC5 C901            	   141:         cmp #$01
00:0DC7 D005            	   142:         bne :+                          ;is colour = white?
00:0DC9 A906            	   143:         lda #$06
00:0DCB 9DFAD8          	   144:         sta colmem+250,x                ;yes, make it blue
00:0DCE E8              	   145: :       inx                     
00:0DCF E0FA            	   146:         cpx #250
00:0DD1 D0ED            	   147:         bne setblu2
00:0DD3 A200            	   148:         ldx #0
                        	   149: setblu3:
00:0DD5 BDF4D9          	   150:         lda colmem+500,x                ;load value in colmem at pos
00:0DD8 290F            	   151:         and #%00001111                  ;mask out high nybble
00:0DDA C901            	   152:         cmp #$01
00:0DDC D005            	   153:         bne :+                          ;is colour = white?
00:0DDE A906            	   154:         lda #$06
00:0DE0 9DF4D9          	   155:         sta colmem+500,x                ;yes, make it blue
00:0DE3 E8              	   156: :       inx                     
00:0DE4 E0FA            	   157:         cpx #250
00:0DE6 D0ED            	   158:         bne setblu3
00:0DE8 A200            	   159:         ldx #0
                        	   160: setblu4:
00:0DEA BDEEDA          	   161:         lda colmem+750,x                ;load value in colmem at pos
00:0DED 290F            	   162:         and #%00001111                  ;mask out high nybble
00:0DEF C901            	   163:         cmp #$01
00:0DF1 D005            	   164:         bne :+                          ;is colour = white?
00:0DF3 A906            	   165:         lda #$06
00:0DF5 9DEEDA          	   166:         sta colmem+750,x                ;yes, make it blue
00:0DF8 E8              	   167: :       inx
00:0DF9 E0FA            	   168:         cpx #250
00:0DFB D0ED            	   169:         bne setblu4
00:0DFD 4C540E          	   170:         jmp flshfin
                        	   171: flshwht:
00:0E00 A200            	   172:         ldx #0
                        	   173: setwht1:
00:0E02 BD00D8          	   174:         lda colmem,x                    ;load value in colmem at pos
00:0E05 290F            	   175:         and #%00001111                  ;mask out high nybble
00:0E07 C906            	   176:         cmp #$06
00:0E09 D005            	   177:         bne :+                          ;is colour = blue?
00:0E0B A901            	   178:         lda #$01
00:0E0D 9D00D8          	   179:         sta colmem,x                    ;yes, make it white
00:0E10 E8              	   180: :       inx                     
00:0E11 E0FA            	   181:         cpx #250
00:0E13 D0ED            	   182:         bne setwht1
00:0E15 A200            	   183:         ldx #0
                        	   184: setwht2:
00:0E17 BDFAD8          	   185:         lda colmem+250,x                ;load value in colmem at pos
00:0E1A 290F            	   186:         and #%00001111                  ;mask out high nybble
00:0E1C C906            	   187:         cmp #$06
00:0E1E D005            	   188:         bne :+                          ;is colour = blue?
00:0E20 A901            	   189:         lda #$01
00:0E22 9DFAD8          	   190:         sta colmem+250,x                ;yes, make it white
00:0E25 E8              	   191: :       inx                     
00:0E26 E0FA            	   192:         cpx #250
00:0E28 D0ED            	   193:         bne setwht2
00:0E2A A200            	   194:         ldx #0
                        	   195: setwht3:
00:0E2C BDF4D9          	   196:         lda colmem+500,x                ;load value in colmem at pos
00:0E2F 290F            	   197:         and #%00001111                  ;mask out high nybble
00:0E31 C906            	   198:         cmp #$06
00:0E33 D005            	   199:         bne :+                          ;is colour = blue?
00:0E35 A901            	   200:         lda #$01
00:0E37 9DF4D9          	   201:         sta colmem+500,x                ;yes, make it white
00:0E3A E8              	   202: :       inx                     
00:0E3B E0FA            	   203:         cpx #250
00:0E3D D0ED            	   204:         bne setwht3
00:0E3F A200            	   205:         ldx #0
                        	   206: setwht4:
00:0E41 BDEEDA          	   207:         lda colmem+750,x                ;load value in colmem at pos
00:0E44 290F            	   208:         and #%00001111                  ;mask out high nybble
00:0E46 C906            	   209:         cmp #$06
00:0E48 D005            	   210:         bne :+                          ;is colour = blue?
00:0E4A A901            	   211:         lda #$01
00:0E4C 9DEEDA          	   212:         sta colmem+750,x                ;yes, make it white
00:0E4F E8              	   213: :       inx                     
00:0E50 E0FA            	   214:         cpx #250
00:0E52 D0ED            	   215:         bne setwht4
                        	   216: flshfin:
00:0E54 C69B            	   217:         dec lvlend                      ;decrement flashes remaining
                        	   218:         
                        	   219:         ;; Restore machine state & return from NMI
                        	   220: finnmi: ply
00:0E56 68              	     1M         pla
00:0E57 A8              	     2M         tay
                        	   221:         plx
00:0E58 68              	     1M         pla
00:0E59 AA              	     2M         tax
00:0E5A 68              	   222:         pla                             ;restore .Y, .X, and .A from stack
00:0E5B 40              	   223:         rti
                        	   224: 

Source: "src/startup.asm"
                        	    28:         include game.asm

Source: "game.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Game-logic related routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Start a new game
                        	     6: newgame:
00:0E5C 20D109          	     7:         jsr fillmaze            ;fill maze with pellets
00:0E5F 208D0E          	     8:         jsr clrzp
                        	     9:         ldbimm maxpell, npelrem
00:0E62 A9B6            	     1M         lda #maxpell
00:0E64 85A6            	     2M         sta npelrem
                        	    10:         ldbimm maxmen, nmenrem
00:0E66 A903            	     1M         lda #maxmen
00:0E68 85A7            	     2M         sta nmenrem
00:0E6A 204C0F          	    11:         jsr initpac
00:0E6D 20B80E          	    12:         jsr printmen
00:0E70 20F30E          	    13:         jsr printlvl
00:0E73 4C880F          	    14:         jmp gameloop
                        	    15: 
                        	    16:         ;; Setup next game level
                        	    17: nextlvl:
00:0E76 E6A8            	    18:         inc lvlnum
00:0E78 20D109          	    19:         jsr fillmaze
00:0E7B 205709          	    20:         jsr fillcolmem
00:0E7E 20A90E          	    21:         jsr clrbuf
                        	    22:         ldbimm maxpell, npelrem
00:0E81 A9B6            	     1M         lda #maxpell
00:0E83 85A6            	     2M         sta npelrem
                        	    23:         ldbimm 0, frtena
00:0E85 A900            	     1M         lda #0
00:0E87 85A9            	     2M         sta frtena
00:0E89 204C0F          	    24:         jsr initpac
00:0E8C 60              	    25:         rts
                        	    26:         
                        	    27:         ;; Clear out ZP memory used to avoid garbage data
                        	    28: clrzp:  filmem $a3, 9, 0        ;$a3 - $ab
00:0E8D A900            	     1M         lda #0        
00:0E8F A209            	     2M         ldx #9        
00:0E91 F006            	     3M :       beq :+
00:0E93 95A3            	     4M         sta $a3,x
00:0E95 CA              	     5M         dex
00:0E96 4C910E          	     6M         jmp :-
00:0E99 95A3            	     7M :       sta $a3,x
                        	    29:         filmem $f7, 9, 0        ;$f7 - $ff
00:0E9B A900            	     1M         lda #0        
00:0E9D A209            	     2M         ldx #9        
00:0E9F F006            	     3M :       beq :+
00:0EA1 95F7            	     4M         sta $f7,x
00:0EA3 CA              	     5M         dex
00:0EA4 4C9F0E          	     6M         jmp :-
00:0EA7 95F7            	     7M :       sta $f7,x
                        	    30:         
                        	    31:         ;; Clear out temporary buffer to avoid garbage data
                        	    32: clrbuf: filmem buf, 15, 0       ;$16 - $24
00:0EA9 A900            	     1M         lda #0       
00:0EAB A20F            	     2M         ldx #15        
00:0EAD F006            	     3M :       beq :+
00:0EAF 9516            	     4M         sta buf,x
00:0EB1 CA              	     5M         dex
00:0EB2 4CAD0E          	     6M         jmp :-
00:0EB5 9516            	     7M :       sta buf,x
00:0EB7 60              	    33:         rts
                        	    34: 
                        	    35: printmen:
                        	    36:         ;; Sprite 3
                        	    37:         ldbimm sp0loc+2, sp0ptr+3     ;set sprite 3 pointer
00:0EB8 A942            	     1M         lda #sp0loc+2
00:0EBA 8DFB4F          	     2M         sta sp0ptr+3     
00:0EBD AD27D0          	    38:         lda sp0col
00:0EC0 8D2AD0          	    39:         sta sp0col+3                  ;set sprite 3 colour
                        	    40:         ldbimm 26, sp3x               ;set sprite 3 x loc
00:0EC3 A91A            	     1M         lda #26
00:0EC5 8D06D0          	     2M         sta sp3x               
                        	    41:         ldbimm 0, sp3y                ;set sprite 3 y loc
00:0EC8 A900            	     1M         lda #0
00:0ECA 8D07D0          	     2M         sta sp3y                
00:0ECD AD15D0          	    42:         lda spena
00:0ED0 0908            	    43:         ora #%00001000
00:0ED2 8D15D0          	    44:         sta spena                     ;enable sprite 3
                        	    45:         ;; Sprite 4
                        	    46:         ldbimm sp0loc+2, sp0ptr+4     ;set sprite 4 pointer
00:0ED5 A942            	     1M         lda #sp0loc+2
00:0ED7 8DFC4F          	     2M         sta sp0ptr+4     
00:0EDA AD27D0          	    47:         lda sp0col
00:0EDD 8D2BD0          	    48:         sta sp0col+4                  ;set sprite 4 colour
                        	    49:         ldbimm 38, sp4x               ;set sprite 4 x loc
00:0EE0 A926            	     1M         lda #38
00:0EE2 8D08D0          	     2M         sta sp4x               
                        	    50:         ldbimm 0, sp4y                ;set sprite 4 y loc
00:0EE5 A900            	     1M         lda #0
00:0EE7 8D09D0          	     2M         sta sp4y                
00:0EEA AD15D0          	    51:         lda spena
00:0EED 0910            	    52:         ora #%00010000
00:0EEF 8D15D0          	    53:         sta spena                     ;enable sprite 4
                        	    54:         ;; Return
00:0EF2 60              	    55:         rts
                        	    56: 
                        	    57: printlvl:
00:0EF3 20D710          	    58:         jsr lvlfrtspix          ;find fruit sprite index for level, store in .A
00:0EF6 18              	    59:         clc
00:0EF7 6940            	    60:         adc #sp0loc
00:0EF9 8DF94F          	    61:         sta sp0ptr+1            ;write to sprite 1 pointer
                        	    62:         ina                     ;increment .A
00:0EFC A8              	     1M         tay
00:0EFD C8              	     2M         iny
00:0EFE 98              	     3M         tya
00:0EFF 8DFA4F          	    63:         sta sp0ptr+2            ;write to sprite 2 pointer
                        	    64:         ;; Set sprite colours
00:0F02 20F210          	    65:         jsr lvlfrtspof          ;find fruit sprite memory offset
00:0F05 841B            	    66:         sty irqwrd1             ;save offset (lo) onto irqwrd (lo)
00:0F07 851C            	    67:         sta irqwrd1+1           ;save offset (hi) onto irqwrd (hi)
                        	    68:         adcwimm sp0mem, irqwrd1
00:0F09 18              	     1M         clc
00:0F0A A51B            	     2M         lda irqwrd1
00:0F0C 6900            	     3M         adc #<sp0mem
00:0F0E 851B            	     4M         sta irqwrd1
00:0F10 A51C            	     5M         lda irqwrd1+1
00:0F12 6950            	     6M         adc #>sp0mem
00:0F14 851C            	     7M         sta irqwrd1+1
00:0F16 A03F            	    69:         ldy #$3f                ;index to sprite colour value
00:0F18 B11B            	    70:         lda (irqwrd1),y         ;load sprite colour value
00:0F1A 290F            	    71:         and #%00001111          ;mask out hi nybble
00:0F1C 8D28D0          	    72:         sta sp0col+1            ;write to sprite 1 colour register
                        	    73:         adcwimm $0040, irqwrd1  ;Add $40 to offset to advance to next sprite
00:0F1F 18              	     1M         clc
00:0F20 A51B            	     2M         lda irqwrd1  
00:0F22 6940            	     3M         adc #<$0040
00:0F24 851B            	     4M         sta irqwrd1  
00:0F26 A51C            	     5M         lda irqwrd1  +1
00:0F28 6900            	     6M         adc #>$0040
00:0F2A 851C            	     7M         sta irqwrd1  +1
00:0F2C B11B            	    74:         lda (irqwrd1),y         ;load sprite colour value
00:0F2E 290F            	    75:         and #%00001111          ;mask out hi nybble
00:0F30 8D29D0          	    76:         sta sp0col+2            ;write to sprite 2 colour register
                        	    77:         ;; Set sprite 1+2 x,y locations
00:0F33 A9B4            	    78:         lda #180
00:0F35 8D02D0          	    79:         sta sp1x
00:0F38 8D04D0          	    80:         sta sp2x
00:0F3B A900            	    81:         lda #0
00:0F3D 8D03D0          	    82:         sta sp1y
00:0F40 8D05D0          	    83:         sta sp2y
                        	    84:         ;; Enable sprites 1+2
00:0F43 AD15D0          	    85:         lda spena
00:0F46 0906            	    86:         ora #%00000110
00:0F48 8D15D0          	    87:         sta spena
                        	    88:         ;; Return
00:0F4B 60              	    89:         rts
                        	    90:         
                        	    91:         ;; Initialize Pac-Man
                        	    92: initpac:
                        	    93:         ;; Sprite 0: Pac-Man
                        	    94:         ldbimm sp0loc, sp0ptr   ;set sprite 0 pointer
00:0F4C A940            	     1M         lda #sp0loc
00:0F4E 8DF84F          	     2M         sta sp0ptr   
00:0F51 AD3F50          	    95:         lda sp0mem+$3f          ;read byte 63
00:0F54 290F            	    96:         and #%00001111          ;mask out hi nybble
00:0F56 8D27D0          	    97:         sta sp0col              ;set sprite 0 (Pac-Man) colour
00:0F59 A931            	    98:         lda #pacstnd
00:0F5B A200            	    99:         ldx #0
00:0F5D 203C0B          	   100:         jsr nodeadr             ;get address of Pac's starting node
                        	   101:         ldbptr wrd1, 0, sp0x    ;set Pac's x loc
00:0F60 A000            	     1M         ldy #0
00:0F62 B116            	     2M         lda (wrd1),y
00:0F64 8D00D0          	     3M         sta sp0x    
                        	   102:         ldbptr wrd1, 1, sp0y    ;set Pac's y loc
00:0F67 A001            	     1M         ldy #1
00:0F69 B116            	     2M         lda (wrd1),y
00:0F6B 8D01D0          	     3M         sta sp0y    
00:0F6E AD15D0          	   103:         lda spena
00:0F71 0901            	   104:         ora #%00000001
00:0F73 8D15D0          	   105:         sta spena               ;enable sprite 0 (Pac-Man)
                        	   106:         ;; Init Pac's direction & calc distance between source & target nodes
                        	   107:         ldbimm w, pacdir        ;set Pac's initial direction to west
00:0F76 A904            	     1M         lda #w
00:0F78 85A3            	     2M         sta pacdir        
                        	   108:         ldbimm pacstnd, pacsrc  ;set Pac's starting node as source node
00:0F7A A931            	     1M         lda #pacstnd
00:0F7C 859E            	     2M         sta pacsrc  
                        	   109:         ldbptr wrd1, w, pactar  ;set western neighbour as target node
00:0F7E A004            	     1M         ldy #w
00:0F80 B116            	     2M         lda (wrd1),y
00:0F82 859F            	     3M         sta pactar  
00:0F84 204F0B          	   110:         jsr setnodis            ;calculate distance between source & target
00:0F87 60              	   111:         rts
                        	   112:         
                        	   113:         ;; Main game loop
                        	   114: gameloop:
00:0F88 A5A6            	   115:         lda npelrem             ;check remaining pellets
00:0F8A D00C            	   116:         bne rdinpt              ;if != 0 read joystick input
00:0F8C A2FF            	   117: :       ldx #$ff
00:0F8E CA              	   118: :       dex
00:0F8F D0FD            	   119:         bne :-                  ;delay
00:0F91 A59B            	   120:         lda lvlend              ;check if end level animation finished
00:0F93 D0F7            	   121:         bne :--                 ;no? wait a bit longer
00:0F95 20760E          	   122:         jsr nextlvl 
00:0F98 209C09          	   123: rdinpt: jsr readjoy2
00:0F9B A901            	   124:         lda #1
00:0F9D C596            	   125:         cmp joyx
00:0F9F F009            	   126:         beq move
00:0FA1 B00E            	   127:         bcs chky
                        	   128:         ldbimm w, tmp
00:0FA3 A904            	     1M         lda #w
00:0FA5 851A            	     2M         sta tmp
00:0FA7 4CC70F          	   129:         jmp chkmov
                        	   130: move:   ldbimm e, tmp
00:0FAA A905            	     1M         lda #e
00:0FAC 851A            	     2M         sta tmp
00:0FAE 4CC70F          	   131:         jmp chkmov
00:0FB1 A901            	   132: chky:   lda #1
00:0FB3 C597            	   133:         cmp joyy
00:0FB5 F00C            	   134:         beq movs
                        	   135:         jcs setnsrc
00:0FB7 9003            	     1M         bcc :+
00:0FB9 4C2710          	     2M         jmp setnsrc
                        	     3M :
                        	   136:         ldbimm n, tmp
00:0FBC A902            	     1M         lda #n
00:0FBE 851A            	     2M         sta tmp
00:0FC0 4CC70F          	   137:         jmp chkmov
                        	   138: movs:   ldbimm s, tmp
00:0FC3 A903            	     1M         lda #s
00:0FC5 851A            	     2M         sta tmp
00:0FC7 A5A5            	   139: chkmov: lda pacrem
00:0FC9 38              	   140:         sec
00:0FCA E903            	   141:         sbc #3
                        	   142:         jcs chkrvw
00:0FCC 9003            	     1M         bcc :+
00:0FCE 4CD40F          	     2M         jmp chkrvw
                        	     3M :
00:0FD1 4C2710          	   143:         jmp setnsrc
00:0FD4 A5A3            	   144: chkrvw: lda pacdir
00:0FD6 C904            	   145:         cmp #w
00:0FD8 D00C            	   146:         bne chkrve
00:0FDA A51A            	   147:         lda tmp
00:0FDC C905            	   148:         cmp #e
                        	   149:         jne setnsrc
00:0FDE F003            	     1M         beq :+
00:0FE0 4C2710          	     2M         jmp setnsrc
                        	     3M :
00:0FE3 4C0F10          	   150:         jmp reverse
00:0FE6 C905            	   151: chkrve: cmp #e
00:0FE8 D00C            	   152:         bne chkrvn
00:0FEA A51A            	   153:         lda tmp
00:0FEC C904            	   154:         cmp #w
                        	   155:         jne setnsrc
00:0FEE F003            	     1M         beq :+
00:0FF0 4C2710          	     2M         jmp setnsrc
                        	     3M :
00:0FF3 4C0F10          	   156:         jmp reverse
00:0FF6 C902            	   157: chkrvn: cmp #n
00:0FF8 D00C            	   158:         bne revs
00:0FFA A51A            	   159:         lda tmp
00:0FFC C903            	   160:         cmp #s
                        	   161:         jne setnsrc
00:0FFE F003            	     1M         beq :+
00:1000 4C2710          	     2M         jmp setnsrc
                        	     3M :
00:1003 4C0F10          	   162:         jmp reverse
                        	   163: revs:
00:1006 A51A            	   164:         lda tmp
00:1008 C902            	   165:         cmp #n
                        	   166:         jne setnsrc
00:100A F003            	     1M         beq :+
00:100C 4C2710          	     2M         jmp setnsrc
                        	     3M :
                        	   167: reverse:
                        	   168:         cpbyt tmp, pacdir
00:100F A51A            	     1M         lda tmp
00:1011 85A3            	     2M         sta pacdir
                        	   169:         swpbyt pacsrc, pactar
00:1013 A59E            	     1M         lda pacsrc
00:1015 48              	     2M         pha                     ;load byt1 & push onto the stack
00:1016 A59F            	     3M         lda pactar
00:1018 859E            	     4M         sta pacsrc               ;load byt2 & save to byt1
00:101A 68              	     5M         pla
00:101B 859F            	     6M         sta pactar               ;pop byt1 off the stack & save to byt2
00:101D A5A4            	   170:         lda pacdis
00:101F 38              	   171:         sec
00:1020 E5A5            	   172:         sbc pacrem
00:1022 85A5            	   173:         sta pacrem
00:1024 4C880F          	   174:         jmp gameloop
                        	   175: 
                        	   176:         ;; Check if Pac-Man arrived at target & set new target
                        	   177: setnsrc:
00:1027 A5A5            	   178:         lda pacrem
                        	   179:         jne gameloop            ;return to gameloop if pellets remaining
00:1029 F003            	     1M         beq :+
00:102B 4C880F          	     2M         jmp gameloop            
                        	     3M :
                        	   180:         cpbyt pactar, pacsrc    ;set target node as new source node
00:102E A59F            	     1M         lda pactar
00:1030 859E            	     2M         sta pacsrc    
00:1032 A200            	   181:         ldx #blki
00:1034 203C0B          	   182:         jsr nodeadr             ;load node address into wrd1
                        	   183:         ldbptr wrd1, 0, sp0x    ;store node x loc into sp0x
00:1037 A000            	     1M         ldy #0
00:1039 B116            	     2M         lda (wrd1),y
00:103B 8D00D0          	     3M         sta sp0x    
                        	   184:         ldbptr wrd1, 1, sp0y    ;store node y loc into sp0y
00:103E A001            	     1M         ldy #1
00:1040 B116            	     2M         lda (wrd1),y
00:1042 8D01D0          	     3M         sta sp0y    
00:1045 A41A            	   185:         ldy tmp                 ;new direction?
00:1047 F014            	   186:         beq chkcon              ;no, check for node in current direction
00:1049 B116            	   187:         lda (wrd1),y            ;yes, load node in new dir
00:104B C9FF            	   188:         cmp #$ff
00:104D F00E            	   189:         beq chkcon
00:104F C91E            	   190:         cmp #gsthmnd
00:1051 F00A            	   191:         beq chkcon
00:1053 859F            	   192:         sta pactar
00:1055 84A3            	   193:         sty pacdir
00:1057 204F0B          	   194:         jsr setnodis
00:105A 4C880F          	   195:         jmp gameloop
00:105D A4A3            	   196: chkcon: ldy pacdir
00:105F B116            	   197:         lda (wrd1),y
00:1061 C9FF            	   198:         cmp #$ff
                        	   199:         jeq gameloop            ;if nowhere to go, return to gameloop
00:1063 D003            	     1M         bne :+
00:1065 4C880F          	     2M         jmp gameloop            
                        	     3M :
00:1068 859F            	   200:         sta pactar              ;set new target...
00:106A 204F0B          	   201:         jsr setnodis            ;... and calculate distance
00:106D 4C880F          	   202:         jmp gameloop
                        	   203: 

Source: "src/startup.asm"
                        	    29:         include score.asm

Source: "score.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Score related routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Score fruit (pts vary by level)
                        	     6:         ;; May only be called from IRQ handler!
                        	     7:         ;; Reads:
                        	     8:         ;;  - lvlnum
                        	     9:         ;; Writes:
                        	    10:         ;;  - irqwrd2
                        	    11:         ;;  - score
00:1070 20B410          	    12: scrfrt: jsr lvlfrtpts           ;read fruit points
00:1073 841B            	    13:         sty irqwrd1
00:1075 851C            	    14:         sta irqwrd1+1
00:1077 A205            	    15:         ldx #irqblki
00:1079 4C9610          	    16:         jmp addscr
                        	    17:         
                        	    18:         ;; Score pellet (10 pts)
                        	    19:         ;; Reads:
                        	    20:         ;;  - .X (offset to memory block)
                        	    21:         ;; Writes:
                        	    22:         ;;  - score
00:107C A910            	    23: scrpel: lda #pellpts
00:107E 9516            	    24:         sta buf,x
00:1080 E8              	    25:         inx
00:1081 A900            	    26:         lda #0
00:1083 9516            	    27:         sta buf,x
00:1085 CA              	    28:         dex
00:1086 4C9610          	    29:         jmp addscr
                        	    30: 
                        	    31:         ;; Score energizer (50 pts)
                        	    32:         ;; Reads:
                        	    33:         ;;  - .X (offset to memory block)
                        	    34:         ;; Writes:
                        	    35:         ;;  - 1st word in memory block
                        	    36:         ;;  - score
                        	    37: screnzr:
00:1089 A950            	    38:         lda #enzrpts
00:108B 9516            	    39:         sta buf,x
00:108D E8              	    40:         inx
00:108E A900            	    41:         lda #0
00:1090 9516            	    42:         sta buf,x
00:1092 CA              	    43:         dex
00:1093 4C9610          	    44:         jmp addscr
                        	    45:       
                        	    46:         ;; Add 16-bit BCD value to score
                        	    47:         ;; Reads:
                        	    48:         ;;  - .X: index into buffer to access memory block
                        	    49:         ;;  - 1st word in memory block containing 4 BCD digits
                        	    50:         ;; Writes:
                        	    51:         ;;  - score
00:1096 F8              	    52: addscr: sed
00:1097 18              	    53:         clc
00:1098 A5FC            	    54:         lda score
00:109A 7516            	    55:         adc buf,x
00:109C 85FC            	    56:         sta score
00:109E A5FD            	    57:         lda score+1
00:10A0 E8              	    58:         inx
00:10A1 7516            	    59:         adc buf,x 
00:10A3 85FD            	    60:         sta score+1
00:10A5 A5FE            	    61:         lda score+2
00:10A7 6900            	    62:         adc #0
00:10A9 85FE            	    63:         sta score+2
00:10AB A5FF            	    64:         lda score+3
00:10AD 6900            	    65:         adc #0
00:10AF 85FF            	    66:         sta score+3
00:10B1 D8              	    67:         cld
00:10B2 CA              	    68:         dex
00:10B3 60              	    69:         rts
                        	    70: 

Source: "src/startup.asm"
                        	    30:         include fruit.asm

Source: "fruit.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Fruit related sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Get fruit bonus points by level number
                        	     6:         ;; Reads:
                        	     7:         ;;  - lvlnum
                        	     8:         ;;  - frtsptbl
                        	     9:         ;; Write:
                        	    10:         ;;  - .Y (points lo-byte)
                        	    11:         ;;  - .A (points hi-byte)
                        	    12:         ;; Clobbers:
                        	    13:         ;;  - .X
                        	    14: lvlfrtpts:
00:10B4 A200            	    15:         ldx #0
00:10B6 BD1E17          	    16: :       lda frtsptbl,x
00:10B9 C5A8            	    17:         cmp lvlnum
00:10BB F00D            	    18:         beq :++
00:10BD B009            	    19:         bcs :+
00:10BF E8              	    20:         inx
00:10C0 E8              	    21:         inx
00:10C1 E8              	    22:         inx
00:10C2 E8              	    23:         inx
00:10C3 E8              	    24:         inx
00:10C4 E8              	    25:         inx
00:10C5 4CB610          	    26:         jmp :-
00:10C8 A248            	    27: :       ldx #maxftx
00:10CA E8              	    28: :       inx
00:10CB E8              	    29:         inx
00:10CC E8              	    30:         inx
00:10CD E8              	    31:         inx
00:10CE BD1E17          	    32:         lda frtsptbl,x          ;load points (lo)
00:10D1 A8              	    33:         tay
00:10D2 E8              	    34:         inx
00:10D3 BD1E17          	    35:         lda frtsptbl,x          ;load points (hi)
00:10D6 60              	    36:         rts
                        	    37: 
                        	    38:         ;; Get fruit sprite index by level number
                        	    39:         ;; Reads:
                        	    40:         ;;  - lvlnum
                        	    41:         ;;  - frtsptbl
                        	    42:         ;; Writes:
                        	    43:         ;;  - .A (fruit sprite index)
                        	    44:         ;; Clobbers:
                        	    45:         ;;  - .X
                        	    46: lvlfrtspix:
00:10D7 A200            	    47:         ldx #0
00:10D9 BD1E17          	    48: :       lda frtsptbl,x
00:10DC C5A8            	    49:         cmp lvlnum
00:10DE F00D            	    50:         beq :++
00:10E0 B009            	    51:         bcs :+                  ;found row for level?
00:10E2 E8              	    52:         inx
00:10E3 E8              	    53:         inx
00:10E4 E8              	    54:         inx
00:10E5 E8              	    55:         inx
00:10E6 E8              	    56:         inx
00:10E7 E8              	    57:         inx
00:10E8 4CD910          	    58:         jmp :-                  ;no, keep looking
00:10EB A248            	    59: :       ldx #maxftx
00:10ED E8              	    60: :       inx                     ;yes...
00:10EE BD1E17          	    61:         lda frtsptbl,x          ;...load sprite index
00:10F1 60              	    62:         rts
                        	    63: 
                        	    64:         ;; Get fruit sprite shape memory offset
                        	    65:         ;; Reads:
                        	    66:         ;;  - lvlnum
                        	    67:         ;;  - frtsptbl
                        	    68:         ;; Writes:
                        	    69:         ;;  - .Y (offset lo byte)
                        	    70:         ;;  - .A (offset hi byte)
                        	    71:         ;; Clobbers:
                        	    72:         ;;  - .X
                        	    73: lvlfrtspof:
00:10F2 A200            	    74:         ldx #0
00:10F4 BD1E17          	    75: :       lda frtsptbl,x
00:10F7 C5A8            	    76:         cmp lvlnum
00:10F9 F00D            	    77:         beq :++
00:10FB B009            	    78:         bcs :+                  ;found row for level?
00:10FD E8              	    79:         inx
00:10FE E8              	    80:         inx
00:10FF E8              	    81:         inx
00:1100 E8              	    82:         inx
00:1101 E8              	    83:         inx
00:1102 E8              	    84:         inx
00:1103 4CF410          	    85:         jmp :-                  ;no, keep looking
00:1106 A248            	    86: :       ldx #maxftx
00:1108 E8              	    87: :       inx                     ;yes...
00:1109 E8              	    88:         inx
00:110A BD1E17          	    89:         lda frtsptbl,x          ;load offset (lo)
00:110D A8              	    90:         tay
00:110E E8              	    91:         inx
00:110F BD1E17          	    92:         lda frtsptbl,x          ;load offset (hi)
00:1112 60              	    93:         rts
                        	    94:         
                        	    95:         ;; Check number of pellets remaining and enable fruit if
                        	    96:         ;; - 130 pellets remaining OR
                        	    97:         ;; - 55 pellets remaining
                        	    98:         ;; May only be called from IRQ handler!
                        	    99:         ;; Clobbers:
                        	   100:         ;;  - irqwrd1
                        	   101: showfrt:
00:1113 A5A6            	   102:         lda npelrem
00:1115 C982            	   103:         cmp #130
00:1117 F005            	   104:         beq :+
00:1119 C937            	   105:         cmp #55
00:111B F001            	   106:         beq :+
00:111D 60              	   107:         rts
                        	   108:         ;; Set sprite pointers
00:111E 20D710          	   109: :       jsr lvlfrtspix          ;find fruit sprite index for level, store in .A
00:1121 18              	   110:         clc
00:1122 6940            	   111:         adc #sp0loc
00:1124 8DF94F          	   112:         sta sp0ptr+1            ;write to sprite 1 pointer
                        	   113:         ina                     ;increment .A
00:1127 A8              	     1M         tay
00:1128 C8              	     2M         iny
00:1129 98              	     3M         tya
00:112A 8DFA4F          	   114:         sta sp0ptr+2            ;write to sprite 2 pointer
                        	   115:         ;; Set sprite colours
00:112D 20F210          	   116:         jsr lvlfrtspof          ;find fruit sprite memory offset
00:1130 841B            	   117:         sty irqwrd1             ;save offset (lo) onto irqwrd (lo)
00:1132 851C            	   118:         sta irqwrd1+1           ;save offset (hi) onto irqwrd (hi)
                        	   119:         adcwimm sp0mem, irqwrd1
00:1134 18              	     1M         clc
00:1135 A51B            	     2M         lda irqwrd1
00:1137 6900            	     3M         adc #<sp0mem
00:1139 851B            	     4M         sta irqwrd1
00:113B A51C            	     5M         lda irqwrd1+1
00:113D 6950            	     6M         adc #>sp0mem
00:113F 851C            	     7M         sta irqwrd1+1
00:1141 A03F            	   120:         ldy #$3f                ;index to sprite colour value
00:1143 B11B            	   121:         lda (irqwrd1),y         ;load sprite colour value
00:1145 290F            	   122:         and #%00001111          ;mask out hi nybble
00:1147 8D28D0          	   123:         sta sp0col+1            ;write to sprite 1 colour register
                        	   124:         adcwimm $0040, irqwrd1  ;Add $40 to offset to advance to next sprite
00:114A 18              	     1M         clc
00:114B A51B            	     2M         lda irqwrd1  
00:114D 6940            	     3M         adc #<$0040
00:114F 851B            	     4M         sta irqwrd1  
00:1151 A51C            	     5M         lda irqwrd1  +1
00:1153 6900            	     6M         adc #>$0040
00:1155 851C            	     7M         sta irqwrd1  +1
00:1157 B11B            	   125:         lda (irqwrd1),y         ;load sprite colour value
00:1159 290F            	   126:         and #%00001111          ;mask out hi nybble
00:115B 8D29D0          	   127:         sta sp0col+2            ;write to sprite 2 colour register
                        	   128:         ;; Set sprite x,y locations
                        	   129:         ldbimm frxpos, sp1x
00:115E A967            	     1M         lda #frxpos
00:1160 8D02D0          	     2M         sta sp1x
                        	   130:         ldbimm frxpos, sp2x
00:1163 A967            	     1M         lda #frxpos
00:1165 8D04D0          	     2M         sta sp2x
                        	   131:         ldbimm frypos, sp1y
00:1168 A9A2            	     1M         lda #frypos
00:116A 8D03D0          	     2M         sta sp1y
                        	   132:         ldbimm frypos, sp2y
00:116D A9A2            	     1M         lda #frypos
00:116F 8D05D0          	     2M         sta sp2y
                        	   133:         ;; Enable sprites 1+2
00:1172 AD15D0          	   134:         lda spena
00:1175 0906            	   135:         ora #%00000110
00:1177 8D15D0          	   136:         sta spena
                        	   137:         ;; Start fruit timer countdown
                        	   138:         ldbimm 1, frtena
00:117A A901            	     1M         lda #1
00:117C 85A9            	     2M         sta frtena
00:117E 60              	   139:         rts
                        	   140: 
                        	   141:         ;; Hide fruit
                        	   142: hidefrt:
00:117F AD15D0          	   143:         lda spena
00:1182 29F9            	   144:         and #%11111001
00:1184 8D15D0          	   145:         sta spena               ;disable sprites 1+2
                        	   146:         ldbimm 0, frtena        ;disable fruit timer
00:1187 A900            	     1M         lda #0
00:1189 85A9            	     2M         sta frtena        
00:118B 60              	   147:         rts
                        	   148: 

Source: "src/startup.asm"
                        	    31: 
                        	    32:         ;; Include tables
                        	    33:         .include tables.asm

Source: "tables.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Data table definitions
                        	     3:         ;; ============================================================
                        	     4:         
                        	     5:         ;; Node table
                        	     6:         ;; Format:        
                        	     7:         ;;  .byte x,y (node loc in sprite coords)
                        	     8:         ;;  .byte n,s,w,e (indices of neighboring nodes)
                        	     9: nodetbl:
                        	    10:         ;; Row 1
00:118C 20              	    11:         .byte $20,$3a,$ff,$06,$ff,$01
00:118D 3A
00:118E FF
00:118F 06
00:1190 FF
00:1191 01
00:1192 40              	    12:         .byte $40,$3a,$ff,$07,$00,$02
00:1193 3A
00:1194 FF
00:1195 07
00:1196 00
00:1197 02
00:1198 60              	    13:         .byte $60,$3a,$ff,$09,$01,$ff
00:1199 3A
00:119A FF
00:119B 09
00:119C 01
00:119D FF
00:119E 70              	    14:         .byte $70,$3a,$ff,$0a,$ff,$04
00:119F 3A
00:11A0 FF
00:11A1 0A
00:11A2 FF
00:11A3 04
00:11A4 90              	    15:         .byte $90,$3a,$ff,$0c,$03,$05
00:11A5 3A
00:11A6 FF
00:11A7 0C
00:11A8 03
00:11A9 05
00:11AA B0              	    16:         .byte $b0,$3a,$ff,$0d,$04,$ff
00:11AB 3A
00:11AC FF
00:11AD 0D
00:11AE 04
00:11AF FF
                        	    17:         ;; Row 2
00:11B0 20              	    18:         .byte $20,$52,$00,$0e,$ff,$07
00:11B1 52
00:11B2 00
00:11B3 0E
00:11B4 FF
00:11B5 07
00:11B6 40              	    19:         .byte $40,$52,$01,$0f,$06,$08
00:11B7 52
00:11B8 01
00:11B9 0F
00:11BA 06
00:11BB 08
00:11BC 50              	    20:         .byte $50,$52,$ff,$10,$07,$09
00:11BD 52
00:11BE FF
00:11BF 10
00:11C0 07
00:11C1 09
00:11C2 60              	    21:         .byte $60,$52,$02,$ff,$08,$0a
00:11C3 52
00:11C4 02
00:11C5 FF
00:11C6 08
00:11C7 0A
00:11C8 70              	    22:         .byte $70,$52,$03,$ff,$09,$0b
00:11C9 52
00:11CA 03
00:11CB FF
00:11CC 09
00:11CD 0B
00:11CE 80              	    23:         .byte $80,$52,$ff,$13,$0a,$0c
00:11CF 52
00:11D0 FF
00:11D1 13
00:11D2 0A
00:11D3 0C
00:11D4 90              	    24:         .byte $90,$52,$04,$14,$0b,$0d
00:11D5 52
00:11D6 04
00:11D7 14
00:11D8 0B
00:11D9 0D
00:11DA B0              	    25:         .byte $b0,$52,$05,$15,$0c,$ff
00:11DB 52
00:11DC 05
00:11DD 15
00:11DE 0C
00:11DF FF
                        	    26:         ;; Row 3
00:11E0 20              	    27:         .byte $20,$6a,$06,$ff,$ff,$0f
00:11E1 6A
00:11E2 06
00:11E3 FF
00:11E4 FF
00:11E5 0F
00:11E6 40              	    28:         .byte $40,$6a,$07,$1c,$0e,$ff
00:11E7 6A
00:11E8 07
00:11E9 1C
00:11EA 0E
00:11EB FF
00:11EC 50              	    29:         .byte $50,$6a,$08,$ff,$ff,$11
00:11ED 6A
00:11EE 08
00:11EF FF
00:11F0 FF
00:11F1 11
00:11F2 60              	    30:         .byte $60,$6a,$ff,$17,$10,$ff
00:11F3 6A
00:11F4 FF
00:11F5 17
00:11F6 10
00:11F7 FF
00:11F8 70              	    31:         .byte $70,$6a,$ff,$19,$ff,$13
00:11F9 6A
00:11FA FF
00:11FB 19
00:11FC FF
00:11FD 13
00:11FE 80              	    32:         .byte $80,$6a,$0b,$ff,$12,$ff
00:11FF 6A
00:1200 0B
00:1201 FF
00:1202 12
00:1203 FF
00:1204 90              	    33:         .byte $90,$6a,$0c,$20,$ff,$15
00:1205 6A
00:1206 0C
00:1207 20
00:1208 FF
00:1209 15
00:120A B0              	    34:         .byte $b0,$6a,$0d,$ff,$14,$ff
00:120B 6A
00:120C 0D
00:120D FF
00:120E 14
00:120F FF
                        	    35:         ;; Row 4
00:1210 50              	    36:         .byte $50,$7a,$ff,$1d,$ff,$17
00:1211 7A
00:1212 FF
00:1213 1D
00:1214 FF
00:1215 17
00:1216 60              	    37:         .byte $60,$7a,$11,$ff,$16,$18
00:1217 7A
00:1218 11
00:1219 FF
00:121A 16
00:121B 18
00:121C 68              	    38:         .byte $68,$7a,$ff,$1e,$17,$19
00:121D 7A
00:121E FF
00:121F 1E
00:1220 17
00:1221 19
00:1222 70              	    39:         .byte $70,$7a,$12,$ff,$18,$1a
00:1223 7A
00:1224 12
00:1225 FF
00:1226 18
00:1227 1A
00:1228 80              	    40:         .byte $80,$7a,$ff,$1f,$19,$ff
00:1229 7A
00:122A FF
00:122B 1F
00:122C 19
00:122D FF
                        	    41:         ;; Row 5
00:122E 18              	    42:         .byte $18,$92,$ff,$ff,$21,$1c
00:122F 92
00:1230 FF
00:1231 FF
00:1232 21
00:1233 1C
00:1234 40              	    43:         .byte $40,$92,$0f,$25,$1b,$1d
00:1235 92
00:1236 0F
00:1237 25
00:1238 1B
00:1239 1D
00:123A 50              	    44:         .byte $50,$92,$16,$22,$1c,$ff
00:123B 92
00:123C 16
00:123D 22
00:123E 1C
00:123F FF
00:1240 68              	    45:         .byte $68,$92,$18,$ff,$ff,$ff
00:1241 92
00:1242 18
00:1243 FF
00:1244 FF
00:1245 FF
00:1246 80              	    46:         .byte $80,$92,$1a,$23,$ff,$20
00:1247 92
00:1248 1A
00:1249 23
00:124A FF
00:124B 20
00:124C 90              	    47:         .byte $90,$92,$14,$2a,$1f,$21
00:124D 92
00:124E 14
00:124F 2A
00:1250 1F
00:1251 21
00:1252 B8              	    48:         .byte $b8,$92,$ff,$ff,$20,$1b
00:1253 92
00:1254 FF
00:1255 FF
00:1256 20
00:1257 1B
                        	    49:         ;; Row 6
00:1258 50              	    50:         .byte $50,$a2,$1d,$26,$ff,$23
00:1259 A2
00:125A 1D
00:125B 26
00:125C FF
00:125D 23
00:125E 80              	    51:         .byte $80,$a2,$1f,$29,$22,$ff
00:125F A2
00:1260 1F
00:1261 29
00:1262 22
00:1263 FF
                        	    52:         ;; Row 7
00:1264 20              	    53:         .byte $20,$ba,$ff,$2c,$ff,$25
00:1265 BA
00:1266 FF
00:1267 2C
00:1268 FF
00:1269 25
00:126A 40              	    54:         .byte $40,$ba,$1c,$2e,$24,$26
00:126B BA
00:126C 1C
00:126D 2E
00:126E 24
00:126F 26
00:1270 50              	    55:         .byte $50,$ba,$22,$ff,$25,$27
00:1271 BA
00:1272 22
00:1273 FF
00:1274 25
00:1275 27
00:1276 60              	    56:         .byte $60,$ba,$ff,$30,$26,$ff
00:1277 BA
00:1278 FF
00:1279 30
00:127A 26
00:127B FF
00:127C 70              	    57:         .byte $70,$ba,$ff,$32,$ff,$29
00:127D BA
00:127E FF
00:127F 32
00:1280 FF
00:1281 29
00:1282 80              	    58:         .byte $80,$ba,$23,$ff,$28,$2a
00:1283 BA
00:1284 23
00:1285 FF
00:1286 28
00:1287 2A
00:1288 90              	    59:         .byte $90,$ba,$20,$34,$29,$2b
00:1289 BA
00:128A 20
00:128B 34
00:128C 29
00:128D 2B
00:128E B0              	    60:         .byte $b0,$ba,$ff,$36,$2a,$ff
00:128F BA
00:1290 FF
00:1291 36
00:1292 2A
00:1293 FF
                        	    61:         ;; Row 8
00:1294 20              	    62:         .byte $20,$ca,$24,$ff,$ff,$2d
00:1295 CA
00:1296 24
00:1297 FF
00:1298 FF
00:1299 2D
00:129A 30              	    63:         .byte $30,$ca,$ff,$38,$2c,$ff
00:129B CA
00:129C FF
00:129D 38
00:129E 2C
00:129F FF
00:12A0 40              	    64:         .byte $40,$ca,$25,$39,$ff,$2f
00:12A1 CA
00:12A2 25
00:12A3 39
00:12A4 FF
00:12A5 2F
00:12A6 50              	    65:         .byte $50,$ca,$ff,$3a,$2e,$30
00:12A7 CA
00:12A8 FF
00:12A9 3A
00:12AA 2E
00:12AB 30
00:12AC 60              	    66:         .byte $60,$ca,$27,$ff,$2f,$31
00:12AD CA
00:12AE 27
00:12AF FF
00:12B0 2F
00:12B1 31
00:12B2 68              	    67:         .byte $68,$ca,$ff,$ff,$30,$32
00:12B3 CA
00:12B4 FF
00:12B5 FF
00:12B6 30
00:12B7 32
00:12B8 70              	    68:         .byte $70,$ca,$28,$ff,$31,$33
00:12B9 CA
00:12BA 28
00:12BB FF
00:12BC 31
00:12BD 33
00:12BE 80              	    69:         .byte $80,$ca,$ff,$3d,$32,$34
00:12BF CA
00:12C0 FF
00:12C1 3D
00:12C2 32
00:12C3 34
00:12C4 90              	    70:         .byte $90,$ca,$2a,$3e,$33,$ff
00:12C5 CA
00:12C6 2A
00:12C7 3E
00:12C8 33
00:12C9 FF
00:12CA A0              	    71:         .byte $a0,$ca,$ff,$3f,$ff,$36
00:12CB CA
00:12CC FF
00:12CD 3F
00:12CE FF
00:12CF 36
00:12D0 B0              	    72:         .byte $b0,$ca,$2b,$ff,$35,$ff
00:12D1 CA
00:12D2 2B
00:12D3 FF
00:12D4 35
00:12D5 FF
                        	    73:         ;; Row 9
00:12D6 20              	    74:         .byte $20,$da,$ff,$41,$ff,$38
00:12D7 DA
00:12D8 FF
00:12D9 41
00:12DA FF
00:12DB 38
00:12DC 30              	    75:         .byte $30,$da,$2d,$ff,$37,$39
00:12DD DA
00:12DE 2D
00:12DF FF
00:12E0 37
00:12E1 39
00:12E2 40              	    76:         .byte $40,$da,$2e,$ff,$38,$ff
00:12E3 DA
00:12E4 2E
00:12E5 FF
00:12E6 38
00:12E7 FF
00:12E8 50              	    77:         .byte $50,$da,$2f,$ff,$ff,$3b
00:12E9 DA
00:12EA 2F
00:12EB FF
00:12EC FF
00:12ED 3B
00:12EE 60              	    78:         .byte $60,$da,$ff,$42,$3a,$ff
00:12EF DA
00:12F0 FF
00:12F1 42
00:12F2 3A
00:12F3 FF
00:12F4 70              	    79:         .byte $70,$da,$ff,$43,$ff,$3d
00:12F5 DA
00:12F6 FF
00:12F7 43
00:12F8 FF
00:12F9 3D
00:12FA 80              	    80:         .byte $80,$da,$33,$ff,$3c,$ff
00:12FB DA
00:12FC 33
00:12FD FF
00:12FE 3C
00:12FF FF
00:1300 90              	    81:         .byte $90,$da,$34,$ff,$ff,$3f
00:1301 DA
00:1302 34
00:1303 FF
00:1304 FF
00:1305 3F
00:1306 A0              	    82:         .byte $a0,$da,$35,$ff,$3e,$40
00:1307 DA
00:1308 35
00:1309 FF
00:130A 3E
00:130B 40
00:130C B0              	    83:         .byte $b0,$da,$ff,$44,$3f,$ff
00:130D DA
00:130E FF
00:130F 44
00:1310 3F
00:1311 FF
                        	    84:         ;; Row 10
00:1312 20              	    85:         .byte $20,$ea,$37,$ff,$ff,$42
00:1313 EA
00:1314 37
00:1315 FF
00:1316 FF
00:1317 42
00:1318 60              	    86:         .byte $60,$ea,$3b,$ff,$41,$43
00:1319 EA
00:131A 3B
00:131B FF
00:131C 41
00:131D 43
00:131E 70              	    87:         .byte $70,$ea,$3c,$ff,$42,$44
00:131F EA
00:1320 3C
00:1321 FF
00:1322 42
00:1323 44
00:1324 B0              	    88:         .byte $b0,$ea,$40,$ff,$43,$ff
00:1325 EA
00:1326 40
00:1327 FF
00:1328 43
00:1329 FF
                        	    89: 
                        	    90: 
                        	    91:         ;; Pellet table
                        	    92:         ;; Format:        
                        	    93:         ;;  .word address (screen memory address)
                        	    94:         ;;  .byte status (0=eaten, 1=not eaten)
                        	    95:         ;;  .byte x,y (sprite coordinates of char)
                        	    96: pelltbl:
                        	    97:         ;; Row 1
00:132A 2900            	    98:         .word $0029
00:132C 01              	    99:         .byte 1,$20,$3a
00:132D 20
00:132E 3A
00:132F 2A00            	   100:         .word $002a
00:1331 01              	   101:         .byte 1,$28,$3a
00:1332 28
00:1333 3A
00:1334 2B00            	   102:         .word $002b
00:1336 01              	   103:         .byte 1,$30,$3a
00:1337 30
00:1338 3A
00:1339 2C00            	   104:         .word $002c
00:133B 01              	   105:         .byte 1,$38,$3a
00:133C 38
00:133D 3A
00:133E 2D00            	   106:         .word $002d
00:1340 01              	   107:         .byte 1,$40,$3a
00:1341 40
00:1342 3A
00:1343 2E00            	   108:         .word $002e
00:1345 01              	   109:         .byte 1,$48,$3a
00:1346 48
00:1347 3A
00:1348 2F00            	   110:         .word $002f
00:134A 01              	   111:         .byte 1,$50,$3a
00:134B 50
00:134C 3A
00:134D 3000            	   112:         .word $0030
00:134F 01              	   113:         .byte 1,$58,$3a
00:1350 58
00:1351 3A
00:1352 3100            	   114:         .word $0031
00:1354 01              	   115:         .byte 1,$60,$3a
00:1355 60
00:1356 3A
00:1357 3300            	   116:         .word $0033
00:1359 01              	   117:         .byte 1,$70,$3a
00:135A 70
00:135B 3A
00:135C 3400            	   118:         .word $0034
00:135E 01              	   119:         .byte 1,$78,$3a
00:135F 78
00:1360 3A
00:1361 3500            	   120:         .word $0035
00:1363 01              	   121:         .byte 1,$80,$3a
00:1364 80
00:1365 3A
00:1366 3600            	   122:         .word $0036
00:1368 01              	   123:         .byte 1,$88,$3a
00:1369 88
00:136A 3A
00:136B 3700            	   124:         .word $0037
00:136D 01              	   125:         .byte 1,$90,$3a
00:136E 90
00:136F 3A
00:1370 3800            	   126:         .word $0038
00:1372 01              	   127:         .byte 1,$98,$3a
00:1373 98
00:1374 3A
00:1375 3900            	   128:         .word $0039
00:1377 01              	   129:         .byte 1,$a0,$3a
00:1378 A0
00:1379 3A
00:137A 3A00            	   130:         .word $003a
00:137C 01              	   131:         .byte 1,$a8,$3a
00:137D A8
00:137E 3A
00:137F 3B00            	   132:         .word $003b
00:1381 01              	   133:         .byte 1,$b0,$3a
00:1382 B0
00:1383 3A
                        	   134:         ;; Row 2
00:1384 5100            	   135:         .word $0051
00:1386 01              	   136:         .byte 1,$20,$42          ;energizer
00:1387 20
00:1388 42
00:1389 5500            	   137:         .word $0055
00:138B 01              	   138:         .byte 1,$40,$42
00:138C 40
00:138D 42
00:138E 5900            	   139:         .word $0059
00:1390 01              	   140:         .byte 1,$60,$42
00:1391 60
00:1392 42
00:1393 5B00            	   141:         .word $005b
00:1395 01              	   142:         .byte 1,$70,$42
00:1396 70
00:1397 42
00:1398 5F00            	   143:         .word $005f
00:139A 01              	   144:         .byte 1,$90,$42
00:139B 90
00:139C 42
00:139D 6300            	   145:         .word $0063
00:139F 01              	   146:         .byte 1,$b0,$42          ;energizer
00:13A0 B0
00:13A1 42
                        	   147:         ;; Row 3
00:13A2 7900            	   148:         .word $0079
00:13A4 01              	   149:         .byte 1,$20,$4a
00:13A5 20
00:13A6 4A
00:13A7 7D00            	   150:         .word $007d
00:13A9 01              	   151:         .byte 1,$40,$4a
00:13AA 40
00:13AB 4A
00:13AC 8100            	   152:         .word $0081
00:13AE 01              	   153:         .byte 1,$60,$4a
00:13AF 60
00:13B0 4A
00:13B1 8300            	   154:         .word $0083
00:13B3 01              	   155:         .byte 1,$70,$4a
00:13B4 70
00:13B5 4A
00:13B6 8700            	   156:         .word $0087
00:13B8 01              	   157:         .byte 1,$90,$4a
00:13B9 90
00:13BA 4A
00:13BB 8B00            	   158:         .word $008b
00:13BD 01              	   159:         .byte 1,$b0,$4a
00:13BE B0
00:13BF 4A
                        	   160:         ;; Row 4
00:13C0 A100            	   161:         .word $00a1
00:13C2 01              	   162:         .byte 1,$20,$52
00:13C3 20
00:13C4 52
00:13C5 A200            	   163:         .word $00a2
00:13C7 01              	   164:         .byte 1,$28,$52
00:13C8 28
00:13C9 52
00:13CA A300            	   165:         .word $00a3
00:13CC 01              	   166:         .byte 1,$30,$52
00:13CD 30
00:13CE 52
00:13CF A400            	   167:         .word $00a4
00:13D1 01              	   168:         .byte 1,$38,$52
00:13D2 38
00:13D3 52
00:13D4 A500            	   169:         .word $00a5
00:13D6 01              	   170:         .byte 1,$40,$52
00:13D7 40
00:13D8 52
00:13D9 A600            	   171:         .word $00a6
00:13DB 01              	   172:         .byte 1,$48,$52
00:13DC 48
00:13DD 52
00:13DE A700            	   173:         .word $00a7
00:13E0 01              	   174:         .byte 1,$50,$52
00:13E1 50
00:13E2 52
00:13E3 A800            	   175:         .word $00a8
00:13E5 01              	   176:         .byte 1,$58,$52
00:13E6 58
00:13E7 52
00:13E8 A900            	   177:         .word $00a9
00:13EA 01              	   178:         .byte 1,$60,$52
00:13EB 60
00:13EC 52
00:13ED AA00            	   179:         .word $00aa
00:13EF 01              	   180:         .byte 1,$68,$52
00:13F0 68
00:13F1 52
00:13F2 AB00            	   181:         .word $00ab
00:13F4 01              	   182:         .byte 1,$70,$52
00:13F5 70
00:13F6 52
00:13F7 AC00            	   183:         .word $00ac
00:13F9 01              	   184:         .byte 1,$78,$52
00:13FA 78
00:13FB 52
00:13FC AD00            	   185:         .word $00ad
00:13FE 01              	   186:         .byte 1,$80,$52
00:13FF 80
00:1400 52
00:1401 AE00            	   187:         .word $00ae
00:1403 01              	   188:         .byte 1,$88,$52
00:1404 88
00:1405 52
00:1406 AF00            	   189:         .word $00af
00:1408 01              	   190:         .byte 1,$90,$52
00:1409 90
00:140A 52
00:140B B000            	   191:         .word $00b0
00:140D 01              	   192:         .byte 1,$98,$52
00:140E 98
00:140F 52
00:1410 B100            	   193:         .word $00b1
00:1412 01              	   194:         .byte 1,$a0,$52
00:1413 A0
00:1414 52
00:1415 B200            	   195:         .word $00b2
00:1417 01              	   196:         .byte 1,$a8,$52
00:1418 A8
00:1419 52
00:141A B300            	   197:         .word $00b3
00:141C 01              	   198:         .byte 1,$b0,$52
00:141D B0
00:141E 52
                        	   199:         ;; Row 5
00:141F C900            	   200:         .word $00c9
00:1421 01              	   201:         .byte 1,$20,$5a
00:1422 20
00:1423 5A
00:1424 CD00            	   202:         .word $00cd
00:1426 01              	   203:         .byte 1,$40,$5a
00:1427 40
00:1428 5A
00:1429 CF00            	   204:         .word $00cf
00:142B 01              	   205:         .byte 1,$50,$5a
00:142C 50
00:142D 5A
00:142E D500            	   206:         .word $00d5
00:1430 01              	   207:         .byte 1,$80,$5a
00:1431 80
00:1432 5A
00:1433 D700            	   208:         .word $00d7
00:1435 01              	   209:         .byte 1,$90,$5a
00:1436 90
00:1437 5A
00:1438 DB00            	   210:         .word $00db
00:143A 01              	   211:         .byte 1,$b0,$5a
00:143B B0
00:143C 5A
                        	   212:         ;; Row 6
00:143D F100            	   213:         .word $00f1
00:143F 01              	   214:         .byte 1,$20,$62
00:1440 20
00:1441 62
00:1442 F500            	   215:         .word $00f5
00:1444 01              	   216:         .byte 1,$40,$62
00:1445 40
00:1446 62
00:1447 F700            	   217:         .word $00f7
00:1449 01              	   218:         .byte 1,$50,$62
00:144A 50
00:144B 62
00:144C FD00            	   219:         .word $00fd
00:144E 01              	   220:         .byte 1,$80,$62
00:144F 80
00:1450 62
00:1451 FF00            	   221:         .word $00ff
00:1453 01              	   222:         .byte 1,$90,$62
00:1454 90
00:1455 62
00:1456 0301            	   223:         .word $0103
00:1458 01              	   224:         .byte 1,$b0,$62
00:1459 B0
00:145A 62
                        	   225:         ;; Row 7
00:145B 1901            	   226:         .word $0119
00:145D 01              	   227:         .byte 1,$20,$6a
00:145E 20
00:145F 6A
00:1460 1A01            	   228:         .word $011a
00:1462 01              	   229:         .byte 1,$28,$6a
00:1463 28
00:1464 6A
00:1465 1B01            	   230:         .word $011b
00:1467 01              	   231:         .byte 1,$30,$6a
00:1468 30
00:1469 6A
00:146A 1C01            	   232:         .word $011c
00:146C 01              	   233:         .byte 1,$38,$6a
00:146D 38
00:146E 6A
00:146F 1D01            	   234:         .word $011d
00:1471 01              	   235:         .byte 1,$40,$6a
00:1472 40
00:1473 6A
00:1474 1F01            	   236:         .word $011f
00:1476 01              	   237:         .byte 1,$50,$6a
00:1477 50
00:1478 6A
00:1479 2001            	   238:         .word $0120
00:147B 01              	   239:         .byte 1,$58,$6a
00:147C 58
00:147D 6A
00:147E 2101            	   240:         .word $0121
00:1480 01              	   241:         .byte 1,$60,$6a
00:1481 60
00:1482 6A
00:1483 2301            	   242:         .word $0123
00:1485 01              	   243:         .byte 1,$70,$6a
00:1486 70
00:1487 6A
00:1488 2401            	   244:         .word $0124
00:148A 01              	   245:         .byte 1,$78,$6a
00:148B 78
00:148C 6A
00:148D 2501            	   246:         .word $0125
00:148F 01              	   247:         .byte 1,$80,$6a
00:1490 80
00:1491 6A
00:1492 2701            	   248:         .word $0127
00:1494 01              	   249:         .byte 1,$90,$6a
00:1495 90
00:1496 6A
00:1497 2801            	   250:         .word $0128
00:1499 01              	   251:         .byte 1,$98,$6a
00:149A 98
00:149B 6A
00:149C 2901            	   252:         .word $0129
00:149E 01              	   253:         .byte 1,$a0,$6a
00:149F A0
00:14A0 6A
00:14A1 2A01            	   254:         .word $012a
00:14A3 01              	   255:         .byte 1,$a8,$6a
00:14A4 A8
00:14A5 6A
00:14A6 2B01            	   256:         .word $012b
00:14A8 01              	   257:         .byte 1,$b0,$6a
00:14A9 B0
00:14AA 6A
                        	   258:         ;; Row 8
00:14AB 4501            	   259:         .word $0145
00:14AD 01              	   260:         .byte 1,$40,$72
00:14AE 40
00:14AF 72
00:14B0 4901            	   261:         .word $0149
00:14B2 01              	   262:         .byte 1,$60,$72
00:14B3 60
00:14B4 72
00:14B5 4B01            	   263:         .word $014b
00:14B7 01              	   264:         .byte 1,$70,$72
00:14B8 70
00:14B9 72
00:14BA 4F01            	   265:         .word $014f
00:14BC 01              	   266:         .byte 1,$90,$72
00:14BD 90
00:14BE 72
                        	   267:         ;; Row 9
00:14BF 6D01            	   268:         .word $016d
00:14C1 01              	   269:         .byte 1,$40,$7a
00:14C2 40
00:14C3 7A
00:14C4 7701            	   270:         .word $0177
00:14C6 01              	   271:         .byte 1,$90,$7a
00:14C7 90
00:14C8 7A
                        	   272:         ;; Row 10
00:14C9 9501            	   273:         .word $0195
00:14CB 01              	   274:         .byte 1,$40,$82
00:14CC 40
00:14CD 82
00:14CE 9F01            	   275:         .word $019f
00:14D0 01              	   276:         .byte 1,$90,$82
00:14D1 90
00:14D2 82
                        	   277:         ;; Row 11
00:14D3 BD01            	   278:         .word $01bd
00:14D5 01              	   279:         .byte 1,$40,$8a
00:14D6 40
00:14D7 8A
00:14D8 C701            	   280:         .word $01c7
00:14DA 01              	   281:         .byte 1,$90,$8a
00:14DB 90
00:14DC 8A
                        	   282:         ;; Row 12
00:14DD E501            	   283:         .word $01e5
00:14DF 01              	   284:         .byte 1,$40,$92
00:14E0 40
00:14E1 92
00:14E2 EF01            	   285:         .word $01ef
00:14E4 01              	   286:         .byte 1,$90,$92
00:14E5 90
00:14E6 92
                        	   287:         ;; Row 13
00:14E7 0D02            	   288:         .word $020d
00:14E9 01              	   289:         .byte 1,$40,$9a
00:14EA 40
00:14EB 9A
00:14EC 1702            	   290:         .word $0217
00:14EE 01              	   291:         .byte 1,$90,$9a
00:14EF 90
00:14F0 9A
                        	   292:         ;; Row 14
00:14F1 3502            	   293:         .word $0235
00:14F3 01              	   294:         .byte 1,$40,$a2
00:14F4 40
00:14F5 A2
00:14F6 3F02            	   295:         .word $023f
00:14F8 01              	   296:         .byte 1,$90,$a2
00:14F9 90
00:14FA A2
                        	   297:         ;; Row 15
00:14FB 5D02            	   298:         .word $025d
00:14FD 01              	   299:         .byte 1,$40,$aa
00:14FE 40
00:14FF AA
00:1500 6702            	   300:         .word $0267
00:1502 01              	   301:         .byte 1,$90,$aa
00:1503 90
00:1504 AA
                        	   302:         ;; Row 16
00:1505 8502            	   303:         .word $0285
00:1507 01              	   304:         .byte 1,$40,$b2
00:1508 40
00:1509 B2
00:150A 8F02            	   305:         .word $028f
00:150C 01              	   306:         .byte 1,$90,$b2
00:150D 90
00:150E B2
                        	   307:         ;; Row 17
00:150F A902            	   308:         .word $02a9
00:1511 01              	   309:         .byte 1,$20,$ba
00:1512 20
00:1513 BA
00:1514 AA02            	   310:         .word $02aa
00:1516 01              	   311:         .byte 1,$28,$ba
00:1517 28
00:1518 BA
00:1519 AB02            	   312:         .word $02ab
00:151B 01              	   313:         .byte 1,$30,$ba
00:151C 30
00:151D BA
00:151E AC02            	   314:         .word $02ac
00:1520 01              	   315:         .byte 1,$38,$ba
00:1521 38
00:1522 BA
00:1523 AD02            	   316:         .word $02ad
00:1525 01              	   317:         .byte 1,$40,$ba
00:1526 40
00:1527 BA
00:1528 AE02            	   318:         .word $02ae
00:152A 01              	   319:         .byte 1,$48,$ba
00:152B 48
00:152C BA
00:152D AF02            	   320:         .word $02af
00:152F 01              	   321:         .byte 1,$50,$ba
00:1530 50
00:1531 BA
00:1532 B002            	   322:         .word $02b0
00:1534 01              	   323:         .byte 1,$58,$ba
00:1535 58
00:1536 BA
00:1537 B102            	   324:         .word $02b1
00:1539 01              	   325:         .byte 1,$60,$ba
00:153A 60
00:153B BA
00:153C B302            	   326:         .word $02b3
00:153E 01              	   327:         .byte 1,$70,$ba
00:153F 70
00:1540 BA
00:1541 B402            	   328:         .word $02b4
00:1543 01              	   329:         .byte 1,$78,$ba
00:1544 78
00:1545 BA
00:1546 B502            	   330:         .word $02b5
00:1548 01              	   331:         .byte 1,$80,$ba
00:1549 80
00:154A BA
00:154B B602            	   332:         .word $02b6
00:154D 01              	   333:         .byte 1,$88,$ba
00:154E 88
00:154F BA
00:1550 B702            	   334:         .word $02b7
00:1552 01              	   335:         .byte 1,$90,$ba
00:1553 90
00:1554 BA
00:1555 B802            	   336:         .word $02b8
00:1557 01              	   337:         .byte 1,$98,$ba
00:1558 98
00:1559 BA
00:155A B902            	   338:         .word $02b9
00:155C 01              	   339:         .byte 1,$a0,$ba
00:155D A0
00:155E BA
00:155F BA02            	   340:         .word $02ba
00:1561 01              	   341:         .byte 1,$a8,$ba
00:1562 A8
00:1563 BA
00:1564 BB02            	   342:         .word $02bb
00:1566 01              	   343:         .byte 1,$b0,$ba
00:1567 B0
00:1568 BA
                        	   344:         ;; Row 18
00:1569 D102            	   345:         .word $02d1
00:156B 01              	   346:         .byte 1,$20,$c2
00:156C 20
00:156D C2
00:156E D502            	   347:         .word $02d5
00:1570 01              	   348:         .byte 1,$40,$c2
00:1571 40
00:1572 C2
00:1573 D902            	   349:         .word $02d9
00:1575 01              	   350:         .byte 1,$60,$c2
00:1576 60
00:1577 C2
00:1578 DB02            	   351:         .word $02db
00:157A 01              	   352:         .byte 1,$70,$c2
00:157B 70
00:157C C2
00:157D DF02            	   353:         .word $02df
00:157F 01              	   354:         .byte 1,$90,$c2
00:1580 90
00:1581 C2
00:1582 E302            	   355:         .word $02e3
00:1584 01              	   356:         .byte 1,$b0,$c2
00:1585 B0
00:1586 C2
                        	   357:         ;; Row 19
00:1587 F902            	   358:         .word $02f9
00:1589 01              	   359:         .byte 1,$20,$ca          ;energizer
00:158A 20
00:158B CA
00:158C FA02            	   360:         .word $02fa
00:158E 01              	   361:         .byte 1,$28,$ca
00:158F 28
00:1590 CA
00:1591 FB02            	   362:         .word $02fb
00:1593 01              	   363:         .byte 1,$30,$ca
00:1594 30
00:1595 CA
00:1596 FD02            	   364:         .word $02fd
00:1598 01              	   365:         .byte 1,$40,$ca
00:1599 40
00:159A CA
00:159B FE02            	   366:         .word $02fe
00:159D 01              	   367:         .byte 1,$48,$ca
00:159E 48
00:159F CA
00:15A0 FF02            	   368:         .word $02ff
00:15A2 01              	   369:         .byte 1,$50,$ca
00:15A3 50
00:15A4 CA
00:15A5 0003            	   370:         .word $0300
00:15A7 01              	   371:         .byte 1,$58,$ca
00:15A8 58
00:15A9 CA
00:15AA 0103            	   372:         .word $0301
00:15AC 01              	   373:         .byte 1,$60,$ca
00:15AD 60
00:15AE CA
00:15AF 0303            	   374:         .word $0303
00:15B1 01              	   375:         .byte 1,$70,$ca
00:15B2 70
00:15B3 CA
00:15B4 0403            	   376:         .word $0304
00:15B6 01              	   377:         .byte 1,$78,$ca
00:15B7 78
00:15B8 CA
00:15B9 0503            	   378:         .word $0305
00:15BB 01              	   379:         .byte 1,$80,$ca
00:15BC 80
00:15BD CA
00:15BE 0603            	   380:         .word $0306
00:15C0 01              	   381:         .byte 1,$88,$ca
00:15C1 88
00:15C2 CA
00:15C3 0703            	   382:         .word $0307
00:15C5 01              	   383:         .byte 1,$90,$ca
00:15C6 90
00:15C7 CA
00:15C8 0903            	   384:         .word $0309
00:15CA 01              	   385:         .byte 1,$a0,$ca
00:15CB A0
00:15CC CA
00:15CD 0A03            	   386:         .word $030a
00:15CF 01              	   387:         .byte 1,$a8,$ca
00:15D0 A8
00:15D1 CA
00:15D2 0B03            	   388:         .word $030b
00:15D4 01              	   389:         .byte 1,$b0,$ca          ;energizer
00:15D5 B0
00:15D6 CA
                        	   390:         ;; Row 20
00:15D7 2303            	   391:         .word $0323
00:15D9 01              	   392:         .byte 1,$30,$d2
00:15DA 30
00:15DB D2
00:15DC 2503            	   393:         .word $0325
00:15DE 01              	   394:         .byte 1,$40,$d2
00:15DF 40
00:15E0 D2
00:15E1 2703            	   395:         .word $0327
00:15E3 01              	   396:         .byte 1,$50,$d2
00:15E4 50
00:15E5 D2
00:15E6 2D03            	   397:         .word $032d
00:15E8 01              	   398:         .byte 1,$80,$d2
00:15E9 80
00:15EA D2
00:15EB 2F03            	   399:         .word $032f
00:15ED 01              	   400:         .byte 1,$90,$d2
00:15EE 90
00:15EF D2
00:15F0 3103            	   401:         .word $0331
00:15F2 01              	   402:         .byte 1,$a0,$d2
00:15F3 A0
00:15F4 D2
                        	   403:         ;; Row 21
00:15F5 4903            	   404:         .word $0349
00:15F7 01              	   405:         .byte 1,$20,$da
00:15F8 20
00:15F9 DA
00:15FA 4A03            	   406:         .word $034a
00:15FC 01              	   407:         .byte 1,$28,$da
00:15FD 28
00:15FE DA
00:15FF 4B03            	   408:         .word $034b
00:1601 01              	   409:         .byte 1,$30,$da
00:1602 30
00:1603 DA
00:1604 4C03            	   410:         .word $034c
00:1606 01              	   411:         .byte 1,$38,$da
00:1607 38
00:1608 DA
00:1609 4D03            	   412:         .word $034d
00:160B 01              	   413:         .byte 1,$40,$da
00:160C 40
00:160D DA
00:160E 4F03            	   414:         .word $034f
00:1610 01              	   415:         .byte 1,$50,$da
00:1611 50
00:1612 DA
00:1613 5003            	   416:         .word $0350
00:1615 01              	   417:         .byte 1,$58,$da
00:1616 58
00:1617 DA
00:1618 5103            	   418:         .word $0351
00:161A 01              	   419:         .byte 1,$60,$da
00:161B 60
00:161C DA
00:161D 5303            	   420:         .word $0353
00:161F 01              	   421:         .byte 1,$70,$da
00:1620 70
00:1621 DA
00:1622 5403            	   422:         .word $0354
00:1624 01              	   423:         .byte 1,$78,$da
00:1625 78
00:1626 DA
00:1627 5503            	   424:         .word $0355
00:1629 01              	   425:         .byte 1,$80,$da
00:162A 80
00:162B DA
00:162C 5703            	   426:         .word $0357
00:162E 01              	   427:         .byte 1,$90,$da
00:162F 90
00:1630 DA
00:1631 5803            	   428:         .word $0358
00:1633 01              	   429:         .byte 1,$98,$da
00:1634 98
00:1635 DA
00:1636 5903            	   430:         .word $0359
00:1638 01              	   431:         .byte 1,$a0,$da
00:1639 A0
00:163A DA
00:163B 5A03            	   432:         .word $035a
00:163D 01              	   433:         .byte 1,$a8,$da
00:163E A8
00:163F DA
00:1640 5B03            	   434:         .word $035b
00:1642 01              	   435:         .byte 1,$b0,$da
00:1643 B0
00:1644 DA
                        	   436:         ;; Row 22
00:1645 7103            	   437:         .word $0371
00:1647 01              	   438:         .byte 1,$20,$e2
00:1648 20
00:1649 E2
00:164A 7903            	   439:         .word $0379
00:164C 01              	   440:         .byte 1,$60,$e2
00:164D 60
00:164E E2
00:164F 7B03            	   441:         .word $037b
00:1651 01              	   442:         .byte 1,$70,$e2
00:1652 70
00:1653 E2
00:1654 8303            	   443:         .word $0383
00:1656 01              	   444:         .byte 1,$b0,$e2
00:1657 B0
00:1658 E2
                        	   445:         ;; Row 23
00:1659 9903            	   446:         .word $0399
00:165B 01              	   447:         .byte 1,$20,$ea
00:165C 20
00:165D EA
00:165E 9A03            	   448:         .word $039a
00:1660 01              	   449:         .byte 1,$28,$ea
00:1661 28
00:1662 EA
00:1663 9B03            	   450:         .word $039b
00:1665 01              	   451:         .byte 1,$30,$ea
00:1666 30
00:1667 EA
00:1668 9C03            	   452:         .word $039c
00:166A 01              	   453:         .byte 1,$38,$ea
00:166B 38
00:166C EA
00:166D 9D03            	   454:         .word $039d
00:166F 01              	   455:         .byte 1,$40,$ea
00:1670 40
00:1671 EA
00:1672 9E03            	   456:         .word $039e
00:1674 01              	   457:         .byte 1,$48,$ea
00:1675 48
00:1676 EA
00:1677 9F03            	   458:         .word $039f
00:1679 01              	   459:         .byte 1,$50,$ea
00:167A 50
00:167B EA
00:167C A003            	   460:         .word $03a0
00:167E 01              	   461:         .byte 1,$58,$ea
00:167F 58
00:1680 EA
00:1681 A103            	   462:         .word $03a1
00:1683 01              	   463:         .byte 1,$60,$ea
00:1684 60
00:1685 EA
00:1686 A203            	   464:         .word $03a2
00:1688 01              	   465:         .byte 1,$68,$ea
00:1689 68
00:168A EA
00:168B A303            	   466:         .word $03a3
00:168D 01              	   467:         .byte 1,$70,$ea
00:168E 70
00:168F EA
00:1690 A403            	   468:         .word $03a4
00:1692 01              	   469:         .byte 1,$78,$ea
00:1693 78
00:1694 EA
00:1695 A503            	   470:         .word $03a5
00:1697 01              	   471:         .byte 1,$80,$ea
00:1698 80
00:1699 EA
00:169A A603            	   472:         .word $03a6
00:169C 01              	   473:         .byte 1,$88,$ea
00:169D 88
00:169E EA
00:169F A703            	   474:         .word $03a7
00:16A1 01              	   475:         .byte 1,$90,$ea
00:16A2 90
00:16A3 EA
00:16A4 A803            	   476:         .word $03a8
00:16A6 01              	   477:         .byte 1,$98,$ea
00:16A7 98
00:16A8 EA
00:16A9 A903            	   478:         .word $03a9
00:16AB 01              	   479:         .byte 1,$a0,$ea
00:16AC A0
00:16AD EA
00:16AE AA03            	   480:         .word $03aa
00:16B0 01              	   481:         .byte 1,$a8,$ea
00:16B1 A8
00:16B2 EA
00:16B3 AB03            	   482:         .word $03ab
00:16B5 01              	   483:         .byte 1,$b0,$ea
00:16B6 B0
00:16B7 EA
                        	   484:         ;; End marker
00:16B8 FFFF            	   485:         .word $ffff
00:16BA FF              	   486:         .byte $ff,$ff,$ff
00:16BB FF
00:16BC FF
                        	   487:         
                        	   488:         ;; Energizer list
                        	   489:         ;; Index into pelltbl
                        	   490: enzrlst:
00:16BD 12              	   491:         .byte $12
00:16BE 17              	   492:         .byte $17
00:16BF 79              	   493:         .byte $79
00:16C0 88              	   494:         .byte $88
                        	   495: 
                        	   496:         ;; Pac-Man animation frames
                        	   497:         ;; Format:
                        	   498:         ;;  .byte sprite offset values
                        	   499: pacalstn:                       ;north-facing animation frames
00:16C1 00              	   500:         .byte $00,$07,$08,$09,$08,$07
00:16C2 07
00:16C3 08
00:16C4 09
00:16C5 08
00:16C6 07
                        	   501: pacalsts:                       ;south-facing animation frames
00:16C7 00              	   502:         .byte $00,$0a,$0b,$0c,$0b,$0a
00:16C8 0A
00:16C9 0B
00:16CA 0C
00:16CB 0B
00:16CC 0A
                        	   503: pacalstw:                       ;west-facing animation frames
00:16CD 00              	   504:         .byte $00,$01,$02,$03,$02,$01
00:16CE 01
00:16CF 02
00:16D0 03
00:16D1 02
00:16D2 01
                        	   505: pacalste:                       ;east-facing animation frames
00:16D3 00              	   506:         .byte $00,$04,$05,$06,$05,$04
00:16D4 04
00:16D5 05
00:16D6 06
00:16D7 05
00:16D8 04
                        	   507: 
                        	   508:         ;; Index in pelltbl of leftmost+rightmost pellet in row by sprite y loc
                        	   509:         ;; Format:
                        	   510:         ;;  .byte y (sprite y loc of row)
                        	   511:         ;;  .byte ixl (pelltbl index of leftmost pellet in row)
                        	   512:         ;;  .byte ixr (pelltbl index of rightmost pellet in row)
                        	   513: plrowix:
00:16D9 3A              	   514:         .byte $3a,$00,$11        ;row 1
00:16DA 00
00:16DB 11
00:16DC 42              	   515:         .byte $42,$12,$17        ;row 2
00:16DD 12
00:16DE 17
00:16DF 4A              	   516:         .byte $4a,$18,$1d        ;row 3
00:16E0 18
00:16E1 1D
00:16E2 52              	   517:         .byte $52,$1e,$30        ;row 4
00:16E3 1E
00:16E4 30
00:16E5 5A              	   518:         .byte $5a,$31,$36        ;row 5
00:16E6 31
00:16E7 36
00:16E8 62              	   519:         .byte $62,$37,$3c        ;row 6
00:16E9 37
00:16EA 3C
00:16EB 6A              	   520:         .byte $6a,$3d,$4c        ;row 7
00:16EC 3D
00:16ED 4C
00:16EE 72              	   521:         .byte $72,$4d,$50        ;row 8
00:16EF 4D
00:16F0 50
00:16F1 7A              	   522:         .byte $7a,$51,$52        ;row 9
00:16F2 51
00:16F3 52
00:16F4 82              	   523:         .byte $82,$53,$54        ;row 10
00:16F5 53
00:16F6 54
00:16F7 8A              	   524:         .byte $8a,$55,$56        ;row 11
00:16F8 55
00:16F9 56
00:16FA 92              	   525:         .byte $92,$57,$58        ;row 12
00:16FB 57
00:16FC 58
00:16FD 9A              	   526:         .byte $9a,$59,$5a        ;row 13
00:16FE 59
00:16FF 5A
00:1700 A2              	   527:         .byte $a2,$5b,$5c        ;row 14
00:1701 5B
00:1702 5C
00:1703 AA              	   528:         .byte $aa,$5d,$5e        ;row 15
00:1704 5D
00:1705 5E
00:1706 B2              	   529:         .byte $b2,$5f,$60        ;row 16
00:1707 5F
00:1708 60
00:1709 BA              	   530:         .byte $ba,$61,$72        ;row 17
00:170A 61
00:170B 72
00:170C C2              	   531:         .byte $c2,$73,$78        ;row 18
00:170D 73
00:170E 78
00:170F CA              	   532:         .byte $ca,$79,$88        ;row 19
00:1710 79
00:1711 88
00:1712 D2              	   533:         .byte $d2,$89,$8e        ;row 20
00:1713 89
00:1714 8E
00:1715 DA              	   534:         .byte $da,$8f,$9e        ;row 21
00:1716 8F
00:1717 9E
00:1718 E2              	   535:         .byte $e2,$9f,$a2        ;row 22
00:1719 9F
00:171A A2
00:171B EA              	   536:         .byte $ea,$a3,$b5        ;row 23
00:171C A3
00:171D B5
                        	   537: 
                        	   538:         ;; Fruit sprite table
                        	   539:         ;; Format:
                        	   540:         ;;  .byte lvl (level number)
                        	   541:         ;;  .byte spi (sprite index)
                        	   542:         ;;  .word ofs (sp0mem offset)
                        	   543:         ;;  .word pts (bonus points: 4 BCD digits)
                        	   544: frtsptbl:
                        	   545:         ;; 1st level: Cherries
00:171E 00              	   546:         .byte $00,$0d
00:171F 0D
00:1720 4003            	   547:         .word $0d*$40,$0100
00:1722 0001
                        	   548:         ;; 2nd level: Strawberry
00:1724 01              	   549:         .byte $01,$0f
00:1725 0F
00:1726 C003            	   550:         .word $0f*$40,$0300
00:1728 0003
                        	   551:         ;; 3rd & 4th level: Peach
00:172A 02              	   552:         .byte $02,$11
00:172B 11
00:172C 4004            	   553:         .word $11*$40,$0500
00:172E 0005
00:1730 03              	   554:         .byte $03,$11
00:1731 11
00:1732 4004            	   555:         .word $11*$40,$0500
00:1734 0005
                        	   556:         ;; 5th & 6th level: Apple
00:1736 04              	   557:         .byte $04,$13
00:1737 13
00:1738 C004            	   558:         .word $13*$40,$0700
00:173A 0007
00:173C 05              	   559:         .byte $05,$13
00:173D 13
00:173E C004            	   560:         .word $13*$40,$0700
00:1740 0007
                        	   561:         ;; 7th & 8th level: Grapes
00:1742 06              	   562:         .byte $06,$15
00:1743 15
00:1744 4005            	   563:         .word $15*$40,$1000
00:1746 0010
00:1748 07              	   564:         .byte $07,$15
00:1749 15
00:174A 4005            	   565:         .word $15*$40,$1000
00:174C 0010
                        	   566:         ;; 9th & 10th levels: Galaxian
00:174E 08              	   567:         .byte $08,$17
00:174F 17
00:1750 C005            	   568:         .word $17*$40,$2000
00:1752 0020
00:1754 09              	   569:         .byte $09,$17
00:1755 17
00:1756 C005            	   570:         .word $17*$40,$2000
00:1758 0020
                        	   571:         ;; 11th & 12th level: Bell
00:175A 0A              	   572:         .byte $0a,$19
00:175B 19
00:175C 4006            	   573:         .word $19*$40,$3000
00:175E 0030
00:1760 0B              	   574:         .byte $0b,$19
00:1761 19
00:1762 4006            	   575:         .word $19*$40,$3000
00:1764 0030
                        	   576:         ;; level 13 onwards: Key
00:1766 0C              	   577:         .byte $0c,$1b
00:1767 1B
00:1768 C006            	   578:         .word $1b*$40,$5000
00:176A 0050
                        	   579: 

Source: "src/startup.asm"
                        	    34:         
                        	    35:         ;; Include assets
                        	    36:         .org charset
01:4000 3C666E6E60623C00	    37:         .incbin assets/charset,2
01:4008 183C667E66666600
01:4010 7C66667C66667C00
01:4018 3C66606060663C00
01:4020 786C6666666C7800
01:4028 7E60607860607E00
01:4030 7E60607860606000
01:4038 3C66606E66663C00
01:4040 6666667E66666600
01:4048 3C18181818183C00
01:4050 1E0C0C0C0C6C3800
01:4058 666C7870786C6600
01:4060 6060606060607E00
01:4068 63777F6B63636300
01:4070 66767E7E6E666600
01:4078 3C66666666663C00
01:4080 7C66667C60606000
01:4088 3C666666663C0E00
01:4090 7C66667C786C6600
01:4098 3C66603C06663C00
01:40A0 7E18181818181800
01:40A8 6666666666663C00
01:40B0 66666666663C1800
01:40B8 6363636B7F776300
01:40C0 66663C183C666600
01:40C8 6666663C18181800
01:40D0 7E060C1830607E00
01:40D8 3C30303030303C00
01:40E0 0C12307C3062FC00
01:40E8 3C0C0C0C0C0C3C00
01:40F0 00183C7E18181818
01:40F8 0010307F7F301000
01:4100 0000000000000000
01:4108 1818181800001800
01:4110 6666660000000000
01:4118 6666FF66FF666600
01:4120 183E603C067C1800
01:4128 62660C1830664600
01:4130 3C663C3867663F00
01:4138 060C180000000000
01:4140 0C18303030180C00
01:4148 30180C0C0C183000
01:4150 00663CFF3C660000
01:4158 0018187E18180000
01:4160 0000000000181830
01:4168 0000007E00000000
01:4170 0000000000181800
01:4178 0003060C18306000
01:4180 3C666E7666663C00
01:4188 1818381818187E00
01:4190 3C66060C30607E00
01:4198 3C66061C06663C00
01:41A0 060E1E667F060600
01:41A8 7E607C0606663C00
01:41B0 3C66607C66663C00
01:41B8 7E660C1818181800
01:41C0 3C66663C66663C00
01:41C8 3C66663E06663C00
01:41D0 0000180000180000
01:41D8 0000180000181830
01:41E0 0E18306030180E00
01:41E8 00007E007E000000
01:41F0 70180C060C187000
01:41F8 3C66060C18001800
01:4200 00000F1020232424
01:4208 24242320100F0000
01:4210 0000F00804C42424
01:4218 2424C40408F00000
01:4220 0000FF0000FF0000
01:4228 2424242424242424
01:4230 2424242424180000
01:4238 0000182424242424
01:4240 0000F80404F80000
01:4248 00001F20201F0000
01:4250 0000FF0000C32424
01:4258 2424C30000FF0000
01:4260 2424232020232424
01:4268 2424C40404C42424
01:4270 00003F2020272424
01:4278 24242720203F0000
01:4280 0000FC0404E42424
01:4288 2424E40404FC0000
01:4290 000000FFFF000000
01:4298 0000001000000000
01:42A0 0000387C7C380000
01:42A8 0000000000000000
01:42B0 0000000000000000
01:42B8 0000000000000000
01:42C0 0000000000000000
01:42C8 0000000000000000
01:42D0 0000000000000000
01:42D8 0000000000000000
01:42E0 0000000000000000
01:42E8 0000000000000000
01:42F0 0000000000000000
01:42F8 0000000000000000
01:4300 0000000000000000
01:4308 0000000000000000
01:4310 0000000000000000
01:4318 0000000000000000
01:4320 0000000000000000
01:4328 0000000000000000
01:4330 0000000000000000
01:4338 0000000000000000
01:4340 0000000000000000
01:4348 0000000000000000
01:4350 0000000000000000
01:4358 0000000000000000
01:4360 0000000000000000
01:4368 0000000000000000
01:4370 0000000000000000
01:4378 0000000000000000
01:4380 0000000000000000
01:4388 0000000000000000
01:4390 0000000000000000
01:4398 0000000000000000
01:43A0 0000000000000000
01:43A8 0000000000000000
01:43B0 0000000000000000
01:43B8 0000000000000000
01:43C0 0000000000000000
01:43C8 0000000000000000
01:43D0 0000000000000000
01:43D8 0000000000000000
01:43E0 0000000000000000
01:43E8 0000000000000000
01:43F0 0000000000000000
01:43F8 0000000000000000
01:4400 0000000000000000
01:4408 0000000000000000
01:4410 0000000000000000
01:4418 0000000000000000
01:4420 0000000000000000
01:4428 0000000000000000
01:4430 0000000000000000
01:4438 0000000000000000
01:4440 0000000000000000
01:4448 0000000000000000
01:4450 0000000000000000
01:4458 0000000000000000
01:4460 0000000000000000
01:4468 0000000000000000
01:4470 0000000000000000
01:4478 0000000000000000
01:4480 0000000000000000
01:4488 0000000000000000
01:4490 0000000000000000
01:4498 0000000000000000
01:44A0 0000000000000000
01:44A8 0000000000000000
01:44B0 0000000000000000
01:44B8 0000000000000000
01:44C0 0000000000000000
01:44C8 0000000000000000
01:44D0 0000000000000000
01:44D8 0000000000000000
01:44E0 0000000000000000
01:44E8 0000000000000000
01:44F0 0000000000000000
01:44F8 0000000000000000
01:4500 0000000000000000
01:4508 0000000000000000
01:4510 0000000000000000
01:4518 0000000000000000
01:4520 0000000000000000
01:4528 0000000000000000
01:4530 0000000000000000
01:4538 0000000000000000
01:4540 0000000000000000
01:4548 0000000000000000
01:4550 0000000000000000
01:4558 0000000000000000
01:4560 0000000000000000
01:4568 0000000000000000
01:4570 0000000000000000
01:4578 0000000000000000
01:4580 0000000000000000
01:4588 0000000000000000
01:4590 0000000000000000
01:4598 0000000000000000
01:45A0 0000000000000000
01:45A8 0000000000000000
01:45B0 0000000000000000
01:45B8 0000000000000000
01:45C0 0000000000000000
01:45C8 0000000000000000
01:45D0 0000000000000000
01:45D8 0000000000000000
01:45E0 0000000000000000
01:45E8 0000000000000000
01:45F0 0000000000000000
01:45F8 0000000000000000
01:4600 0000000000000000
01:4608 0000000000000000
01:4610 0000000000000000
01:4618 0000000000000000
01:4620 0000000000000000
01:4628 0000000000000000
01:4630 0000000000000000
01:4638 0000000000000000
01:4640 0000000000000000
01:4648 0000000000000000
01:4650 0000000000000000
01:4658 0000000000000000
01:4660 0000000000000000
01:4668 0000000000000000
01:4670 0000000000000000
01:4678 0000000000000000
01:4680 0000000000000000
01:4688 0000000000000000
01:4690 0000000000000000
01:4698 0000000000000000
01:46A0 0000000000000000
01:46A8 0000000000000000
01:46B0 0000000000000000
01:46B8 0000000000000000
01:46C0 0000000000000000
01:46C8 0000000000000000
01:46D0 0000000000000000
01:46D8 0000000000000000
01:46E0 0000000000000000
01:46E8 0000000000000000
01:46F0 0000000000000000
01:46F8 0000000000000000
01:4700 0000000000000000
01:4708 0000000000000000
01:4710 0000000000000000
01:4718 0000000000000000
01:4720 0000000000000000
01:4728 0000000000000000
01:4730 0000000000000000
01:4738 0000000000000000
01:4740 0000000000000000
01:4748 0000000000000000
01:4750 0000000000000000
01:4758 0000000000000000
01:4760 0000000000000000
01:4768 0000000000000000
01:4770 0000000000000000
01:4778 0000000000000000
01:4780 0000000000000000
01:4788 0000000000000000
01:4790 0000000000000000
01:4798 0000000000000000
01:47A0 0000000000000000
01:47A8 0000000000000000
01:47B0 0000000000000000
01:47B8 0000000000000000
01:47C0 0000000000000000
01:47C8 0000000000000000
01:47D0 0000000000000000
01:47D8 0000000000000000
01:47E0 0000000000000000
01:47E8 5555555555555555
01:47F0 AAAAAAAAAAAAAAAA
01:47F8 FFFFFFFFFFFFFFFF
01:4800 0101010101010101
01:4808 0101010101010101
01:4810 0101010101010101
01:4818 0101010101010101
01:4820 0101010101010101
01:4828 0101010101010101
01:4830 0101010101010101
01:4838 0101010101010101
01:4840 0606060606060606
01:4848 0606060606060606
01:4850 06060F0F0F010101
01:4858 0101010101010101
01:4860 0101010101010101
01:4868 0101010101010101
01:4870 0101010101010101
01:4878 0101010101010101
01:4880 0101010101010101
01:4888 0101010101010101
01:4890 0101010101010101
01:4898 0101010101010101
01:48A0 0101010101010101
01:48A8 0101010101010101
01:48B0 0101010101010101
01:48B8 0101010101010101
01:48C0 0101010101010101
01:48C8 0101010101010101
01:48D0 0101010101010101
01:48D8 0101010101010101
01:48E0 0101010101010101
01:48E8 0101010101010101
01:48F0 0101010101010101
01:48F8 0101010101010101
                        	    38: 
                        	    39:         .org mazegfx
02:4BF0 E803E84327001800	    40:         .incbin assets/mazegfx,2
02:4BF8 000F0B0628001900
02:4C00 4044444444444444
02:4C08 44444A4444444444
02:4C10 4444444442202020
02:4C18 2020202020202020
02:4C20 2020202020202020
02:4C28 4553535353535353
02:4C30 5353455353535353
02:4C38 5353535345202020
02:4C40 2020200809070820
02:4C48 13030F1205202020
02:4C50 4554404442534044
02:4C58 4253455340444253
02:4C60 4044425445202020
02:4C68 2020202020202020
02:4C70 2020202020202020
02:4C78 4553414443534144
02:4C80 4353465341444353
02:4C88 4144435345202020
02:4C90 2020202020202020
02:4C98 2020202030202020
02:4CA0 4553535353535353
02:4CA8 5353535353535353
02:4CB0 5353535345202020
02:4CB8 2020202020202020
02:4CC0 2020202020202020
02:4CC8 4553404442534753
02:4CD0 4044444442534753
02:4CD8 4044425345202020
02:4CE0 2020202020202020
02:4CE8 2020202020202020
02:4CF0 4553414443534553
02:4CF8 41444A4443534553
02:4D00 4144435345202020
02:4D08 2020202020202020
02:4D10 2020202020202020
02:4D18 4553535353534553
02:4D20 5353455353534553
02:4D28 5353535345202020
02:4D30 2020202020202020
02:4D38 2020311510202020
02:4D40 4144444442534C44
02:4D48 4853465349444D53
02:4D50 4044444443202020
02:4D58 2020202020202020
02:4D60 2020202020202020
02:4D68 2020202045534520
02:4D70 2020202020204553
02:4D78 4520202020202020
02:4D80 2020202020202020
02:4D88 2020202030202020
02:4D90 2020202045534520
02:4D98 4E52525250204553
02:4DA0 4520202020202020
02:4DA8 2020202020202020
02:4DB0 2020202020202020
02:4DB8 4444444443534620
02:4DC0 4520202045204653
02:4DC8 4144444444202020
02:4DD0 2020202020202020
02:4DD8 2020202020202020
02:4DE0 2020202020532020
02:4DE8 4520202045202053
02:4DF0 2020202020202020
02:4DF8 2020202020202020
02:4E00 2020202020202020
02:4E08 4444444442534720
02:4E10 4F44444451204753
02:4E18 4044444444202020
02:4E20 2020202020202020
02:4E28 2020202020202020
02:4E30 2020202045534520
02:4E38 2020202020204553
02:4E40 4520202020202020
02:4E48 2020202020202020
02:4E50 2020202020202020
02:4E58 2020202045534520
02:4E60 4044444442204553
02:4E68 4520202020202020
02:4E70 2020202020202020
02:4E78 2020202020202020
02:4E80 4044444443534620
02:4E88 41444A4443204653
02:4E90 4144444442202020
02:4E98 2020202020202020
02:4EA0 2020202020202020
02:4EA8 4553535353535353
02:4EB0 5353455353535353
02:4EB8 5353535345202020
02:4EC0 2020202020202020
02:4EC8 2020202020202020
02:4ED0 4553494442534944
02:4ED8 4853465349444853
02:4EE0 4044485345202020
02:4EE8 2020202020202020
02:4EF0 2020202020202020
02:4EF8 4554535345535353
02:4F00 5353205353535353
02:4F08 4553535445202020
02:4F10 2020202020202020
02:4F18 2020202020202020
02:4F20 4C44485346534753
02:4F28 49444A4448534753
02:4F30 465349444D202020
02:4F38 2020202020202020
02:4F40 2020202020202020
02:4F48 4553535353534553
02:4F50 5353455353534553
02:4F58 5353535345202020
02:4F60 2020202020202020
02:4F68 2020202020202020
02:4F70 4553494444444B44
02:4F78 4853465349444B44
02:4F80 4444485345202020
02:4F88 2020202020202020
02:4F90 2020202020202020
02:4F98 4553535353535353
02:4FA0 5353535353535353
02:4FA8 5353535345202020
02:4FB0 2020202020202020
02:4FB8 2020202020202020
02:4FC0 4144444444444444
02:4FC8 4444444444444444
02:4FD0 4444444443202020
02:4FD8 2020202020202020
02:4FE0 2020202020202020
                        	    41: 
                        	    42:         .org sp0mem
03:5000 3E00007F0000FF80	    43:         .incbin assets/sprites,2
03:5008 00FF8000FF8000FF
03:5010 8000FF80007F0000
03:5018 3E00000000000000
03:5020 0000000000000000
03:5028 0000000000000000
03:5030 0000000000000000
03:5038 0000000000000087
03:5040 3E00007F0000FF80
03:5048 003F80000780003F
03:5050 8000FF80007F0000
03:5058 3E00000000000000
03:5060 0000000000000000
03:5068 0000000000000000
03:5070 0000000000000000
03:5078 0000000000000087
03:5080 7E0000FF00003F80
03:5088 000F80000780000F
03:5090 80003F8000FF0000
03:5098 7E00000000000000
03:50A0 0000000000000000
03:50A8 0000000000000000
03:50B0 0000000000000000
03:50B8 0000000000000087
03:50C0 FC00003F00000F80
03:50C8 0007800003800007
03:50D0 80000F80003F0000
03:50D8 FC00000000000000
03:50E0 0000000000000000
03:50E8 0000000000000000
03:50F0 0000000000000000
03:50F8 0000000000000087
03:5100 3E00007F0000FF80
03:5108 00FE0000F00000FE
03:5110 0000FF80007F0000
03:5118 3E00000000000000
03:5120 0000000000000000
03:5128 0000000000000000
03:5130 0000000000000000
03:5138 0000000000000087
03:5140 3F00007F8000FE00
03:5148 00F80000F00000F8
03:5150 0000FE00007F8000
03:5158 3F00000000000000
03:5160 0000000000000000
03:5168 0000000000000000
03:5170 0000000000000000
03:5178 0000000000000087
03:5180 1F80007E0000F800
03:5188 00F00000E00000F0
03:5190 0000F800007E0000
03:5198 1F80000000000000
03:51A0 0000000000000000
03:51A8 0000000000000000
03:51B0 0000000000000000
03:51B8 0000000000000087
03:51C0 220000630000F780
03:51C8 00F78000F78000FF
03:51D0 8000FF80007F0000
03:51D8 3E00000000000000
03:51E0 0000000000000000
03:51E8 0000000000000000
03:51F0 0000000000000000
03:51F8 0000000000000087
03:5200 410000C18000E380
03:5208 00E38000F78000FF
03:5210 8000FF80007F0000
03:5218 3E00000000000000
03:5220 0000000000000000
03:5228 0000000000000000
03:5230 0000000000000000
03:5238 0000000000000087
03:5240 808000808000C180
03:5248 00C18000E38000F7
03:5250 80007F00007F0000
03:5258 3E00000000000000
03:5260 0000000000000000
03:5268 0000000000000000
03:5270 0000000000000000
03:5278 0000000000000087
03:5280 3E00007F0000FF80
03:5288 00FF8000F78000F7
03:5290 8000F78000630000
03:5298 2200000000000000
03:52A0 0000000000000000
03:52A8 0000000000000000
03:52B0 0000000000000000
03:52B8 0000000000000087
03:52C0 3E00007F0000FF80
03:52C8 00FF8000F78000E3
03:52D0 8000E38000C18000
03:52D8 4100000000000000
03:52E0 0000000000000000
03:52E8 0000000000000000
03:52F0 0000000000000000
03:52F8 0000000000000087
03:5300 3E00007F00007F00
03:5308 00F78000E38000C1
03:5310 8000C18000808000
03:5318 8080000000000000
03:5320 0000000000000000
03:5328 0000000000000000
03:5330 0000000000000000
03:5338 0000000000000087
03:5340 0700001900002200
03:5348 0002000002000000
03:5350 0000000000000000
03:5358 0000000000000000
03:5360 0000000000000000
03:5368 0000000000000000
03:5370 0000000000000000
03:5378 0000000000000089
03:5380 0000000000006000
03:5388 00F00000F70000EF
03:5390 80006F80000F8000
03:5398 0700000000000000
03:53A0 0000000000000000
03:53A8 0000000000000000
03:53B0 0000000000000000
03:53B8 0000000000000082
03:53C0 1000003C00001800
03:53C8 0000000024000000
03:53D0 0000080000000000
03:53D8 0000000000000000
03:53E0 0000000000000000
03:53E8 0000000000000000
03:53F0 0000000000000000
03:53F8 0000000000000085
03:5400 0000000000006600
03:5408 00FF0000FF0000FF
03:5410 00007E00003C0000
03:5418 1800000000000000
03:5420 0000000000000000
03:5428 0000000000000000
03:5430 0000000000000000
03:5438 0000000000000082
03:5440 0B00000E00000800
03:5448 0008000000000000
03:5450 0000000000000000
03:5458 0000000000000000
03:5460 0000000000000000
03:5468 0000000000000000
03:5470 0000000000000000
03:5478 0000000000000085
03:5480 0000000000000000
03:5488 003E00007F00007F
03:5490 00007F00007F0000
03:5498 3E00000000000000
03:54A0 0000000000000000
03:54A8 0000000000000000
03:54B0 0000000000000000
03:54B8 0000000000000088
03:54C0 0000000A00000C00
03:54C8 0008000000000000
03:54D0 0000000000000000
03:54D8 0000000000000000
03:54E0 0000000000000000
03:54E8 0000000000000000
03:54F0 0000000000000000
03:54F8 0000000000000089
03:5500 0000000000000000
03:5508 007F0000FF8000FF
03:5510 8000FF80007F0000
03:5518 3600000000000000
03:5520 0000000000000000
03:5528 0000000000000000
03:5530 0000000000000000
03:5538 0000000000000082
03:5540 0000000000000000
03:5548 000800001400002A
03:5550 00005500002A0000
03:5558 1400000000000000
03:5560 0000000000000000
03:5568 0000000000000000
03:5570 0000000000000000
03:5578 000000000000008B
03:5580 2000001C00000800
03:5588 001C00003E00007F
03:5590 00007F00007F0000
03:5598 3E00000000000000
03:55A0 0000000000000000
03:55A8 0000000000000000
03:55B0 0000000000000000
03:55B8 0000000000000085
03:55C0 0800001C0000AA80
03:55C8 0088800080800041
03:55D0 0000220000000000
03:55D8 0000000000000000
03:55E0 0000000000000000
03:55E8 0000000000000000
03:55F0 0000000000000000
03:55F8 00000000000000E2
03:5600 0000000000003E00
03:5608 007F00007F00006B
03:5610 0000080000080000
03:5618 0800000000000000
03:5620 0000000000000000
03:5628 0000000000000000
03:5630 0000000000000000
03:5638 00000000000000E7
03:5640 0000000000000800
03:5648 0010000000000020
03:5650 0000200000000000
03:5658 7B00000000000000
03:5660 0000000000000000
03:5668 0000000000000000
03:5670 0000000000000000
03:5678 0000000000000086
03:5680 1C00003E00003E00
03:5688 007F00007F0000FF
03:5690 8000FF8000FF8000
03:5698 7F00000000000000
03:56A0 0000000000000000
03:56A8 0000000000000000
03:56B0 0000000000000000
03:56B8 0000000000000087
03:56C0 1C00002200003E00
03:56C8 003E000000000000
03:56D0 0000000000000000
03:56D8 0000000000000000
03:56E0 0000000000000000
03:56E8 0000000000000000
03:56F0 0000000000000000
03:56F8 000000000000008E
03:5700 0000000000000000
03:5708 0000000014000016
03:5710 00001400001A0000
03:5718 0C00000000000000
03:5720 0000000000000000
03:5728 0000000000000000
03:5730 0000000000000000
03:5738 000000000000008F
                        	    44: 


Symbols by name:
addscr                           A:1096
bgcol0                           E:D021
blki                             E:0000
border                           E:7999
buf                              E:0016
c2ddra                           E:DD02
calcnd                           A:0BEC
charset                          E:4000
chkcon                           A:105D
chkmov                           A:0FC7
chkne                            A:0B6F
chknn                            A:0B8D
chkpde                           A:0C50
chkpdn                           A:0C5A
chkrve                           A:0FE6
chkrvn                           A:0FF6
chkrvw                           A:0FD4
chky                             A:0FB1
ci1icr                           E:DC0D
ci1pra                           E:DC00
ci2cra                           E:DD0E
ci2crb                           E:DD0F
ci2icr                           E:DD0D
ci2pra                           E:DD00
cia1                             E:DC00
cia2                             E:DD00
cinv                             E:0314
clrbuf                           A:0EA9
clrzp                            A:0E8D
colmem                           E:D800
coltab                           E:4800
decrem                           A:0C67
djr0                             A:09A7
djr1                             A:09AB
djr2                             A:09AF
djr3                             A:09B3
dkgrey                           E:000B
e                                E:0005
enzraix                          E:00AB
enzrchr                          E:0054
enzrlst                          A:16BD
enzrpts                          E:0050
extcol                           E:D020
fillcolmem                       A:0957
fillmaze                         A:09D1
filloop                          A:09D5
findpel                          A:0A0E
finfil                           A:0A0D
finnmi                           A:0E56
finras                           A:0C69
fiprsc                           A:0900
flshfin                          A:0E54
flshmaz                          A:0D9C
flshwht                          A:0E00
fpckde                           A:0A47
fpckdn                           A:0A81
fpds                             A:0AB2
fpinrow                          A:0B10
fprixn                           A:0AFE
fprixs                           A:0AEC
frtena                           E:00A9
frtsptbl                         A:171E
frttim                           E:0026
frxpos                           E:0067
frypos                           E:00A2
gameloop                         A:0F88
gsthmnd                          E:001E
hidefrt                          A:117F
initpac                          A:0F4C
initvic                          A:0927
irqblki                          E:0005
irqmsk                           E:D01A
irqtmp                           E:001F
irqwrd1                          E:001B
irqwrd2                          E:001D
isenzr                           A:0B2C
joybtn                           E:0092
joyx                             E:0096
joyy                             E:0097
ldanim                           A:0D14
linclr                           E:00F9
linset                           E:00FF
lpprsc                           A:088E
ltgrey                           E:000F
lvlend                           E:009B
lvlfrtpts                        A:10B4
lvlfrtspix                       A:10D7
lvlfrtspof                       A:10F2
lvlnum                           E:00A8
maxftx                           E:0048
maxmen                           E:0003
maxpell                          E:00B6
mazegfx                          E:4BF0
move                             A:0FAA
movpac                           A:0C40
movs                             A:0FC3
mula5                            A:0819
mula6                            A:0842
n                                E:0002
newgame                          A:0E5C
nextlvl                          A:0E76
nmenrem                          E:00A7
nmiblki                          E:000A
nminv                            E:0318
nmiwrd1                          E:0020
nmiwrd2                          E:0022
nodeadr                          A:0B3C
nodetbl                          A:118C
npelrem                          E:00A6
nxl                              A:080B
pacaix                           E:00AA
pacalste                         A:16D3
pacalstn                         A:16C1
pacalsts                         A:16C7
pacalstw                         A:16CD
pacdir                           E:00A3
pacdis                           E:00A4
pacrem                           E:00A5
pacsrc                           E:009E
pacstnd                          E:0031
pactar                           E:009F
pds                              A:0C64
pelfound                         A:0ADC
pelladr                          A:09BE
pellchr                          E:0053
pellpts                          E:0010
pelltbl                          A:132A
pelnotfd                         A:0AE3
plrowix                          A:16D9
printchr                         A:0914
printcol                         A:0901
printlvl                         A:0EF3
printmen                         A:0EB8
printscr                         A:0878
procirq                          A:0C1C
procnmi                          A:0CAA
raster                           E:D012
rdinpt                           A:0F98
readjoy2                         A:099C
reverse                          A:100F
revs                             A:1006
s                                E:0003
scnmem                           E:4C00
score                            E:00FC
screnzr                          A:1089
scrfrt                           A:1070
scrmsdi                          E:0185
scroly                           E:D011
scrpel                           A:107C
setbit                           A:0C33
setblu1                          A:0DAB
setblu2                          A:0DC0
setblu3                          A:0DD5
setblu4                          A:0DEA
setcol1                          A:0959
setcol2                          A:096A
setcol3                          A:097B
setcol4                          A:098C
setnds                           A:0BC0
setnodis                         A:0B4F
setnsrc                          A:1027
setupirq                         A:0BFB
setupnmi                         A:0C6F
setwht1                          A:0E02
setwht2                          A:0E17
setwht3                          A:0E2C
setwht4                          A:0E41
showfrt                          A:1113
sp0col                           E:D027
sp0loc                           E:0040
sp0mem                           E:5000
sp0ptr                           E:4FF8
sp0x                             E:D000
sp0y                             E:D001
sp1x                             E:D002
sp1y                             E:D003
sp2x                             E:D004
sp2y                             E:D005
sp3x                             E:D006
sp3y                             E:D007
sp4x                             E:D008
sp4y                             E:D009
spena                            E:D015
sysirq                           E:EA7E
sysnmi                           E:FE56
ti2a                             E:DD04
ti2b                             E:DD06
tic                              A:0D71
ticloop                          A:0D75
timaev                           A:0CC2
timbev                           A:0D1F
tmp                              E:001A
tocloop                          A:0D3E
vic                              E:D000
vicirq                           E:D019
vmcsb                            E:D018
w                                E:0004
warp                             A:0BF4
wrd1                             E:0016
wrd2                             E:0018
wrpnixe                          E:0021
wrpnixw                          E:001B

Symbols by value:
0000 blki
0002 n
0003 maxmen
0003 s
0004 w
0005 e
0005 irqblki
000A nmiblki
000B dkgrey
000F ltgrey
0010 pellpts
0016 buf
0016 wrd1
0018 wrd2
001A tmp
001B irqwrd1
001B wrpnixw
001D irqwrd2
001E gsthmnd
001F irqtmp
0020 nmiwrd1
0021 wrpnixe
0022 nmiwrd2
0026 frttim
0031 pacstnd
0040 sp0loc
0048 maxftx
0050 enzrpts
0053 pellchr
0054 enzrchr
0067 frxpos
0092 joybtn
0096 joyx
0097 joyy
009B lvlend
009E pacsrc
009F pactar
00A2 frypos
00A3 pacdir
00A4 pacdis
00A5 pacrem
00A6 npelrem
00A7 nmenrem
00A8 lvlnum
00A9 frtena
00AA pacaix
00AB enzraix
00B6 maxpell
00F9 linclr
00FC score
00FF linset
0185 scrmsdi
0314 cinv
0318 nminv
080B nxl
0819 mula5
0842 mula6
0878 printscr
088E lpprsc
0900 fiprsc
0901 printcol
0914 printchr
0927 initvic
0957 fillcolmem
0959 setcol1
096A setcol2
097B setcol3
098C setcol4
099C readjoy2
09A7 djr0
09AB djr1
09AF djr2
09B3 djr3
09BE pelladr
09D1 fillmaze
09D5 filloop
0A0D finfil
0A0E findpel
0A47 fpckde
0A81 fpckdn
0AB2 fpds
0ADC pelfound
0AE3 pelnotfd
0AEC fprixs
0AFE fprixn
0B10 fpinrow
0B2C isenzr
0B3C nodeadr
0B4F setnodis
0B6F chkne
0B8D chknn
0BC0 setnds
0BEC calcnd
0BF4 warp
0BFB setupirq
0C1C procirq
0C33 setbit
0C40 movpac
0C50 chkpde
0C5A chkpdn
0C64 pds
0C67 decrem
0C69 finras
0C6F setupnmi
0CAA procnmi
0CC2 timaev
0D14 ldanim
0D1F timbev
0D3E tocloop
0D71 tic
0D75 ticloop
0D9C flshmaz
0DAB setblu1
0DC0 setblu2
0DD5 setblu3
0DEA setblu4
0E00 flshwht
0E02 setwht1
0E17 setwht2
0E2C setwht3
0E41 setwht4
0E54 flshfin
0E56 finnmi
0E5C newgame
0E76 nextlvl
0E8D clrzp
0EA9 clrbuf
0EB8 printmen
0EF3 printlvl
0F4C initpac
0F88 gameloop
0F98 rdinpt
0FAA move
0FB1 chky
0FC3 movs
0FC7 chkmov
0FD4 chkrvw
0FE6 chkrve
0FF6 chkrvn
1006 revs
100F reverse
1027 setnsrc
105D chkcon
1070 scrfrt
107C scrpel
1089 screnzr
1096 addscr
10B4 lvlfrtpts
10D7 lvlfrtspix
10F2 lvlfrtspof
1113 showfrt
117F hidefrt
118C nodetbl
132A pelltbl
16BD enzrlst
16C1 pacalstn
16C7 pacalsts
16CD pacalstw
16D3 pacalste
16D9 plrowix
171E frtsptbl
4000 charset
4800 coltab
4BF0 mazegfx
4C00 scnmem
4FF8 sp0ptr
5000 sp0mem
7999 border
D000 sp0x
D000 vic
D001 sp0y
D002 sp1x
D003 sp1y
D004 sp2x
D005 sp2y
D006 sp3x
D007 sp3y
D008 sp4x
D009 sp4y
D011 scroly
D012 raster
D015 spena
D018 vmcsb
D019 vicirq
D01A irqmsk
D020 extcol
D021 bgcol0
D027 sp0col
D800 colmem
DC00 ci1pra
DC00 cia1
DC0D ci1icr
DD00 ci2pra
DD00 cia2
DD02 c2ddra
DD04 ti2a
DD06 ti2b
DD0D ci2icr
DD0E ci2cra
DD0F ci2crb
EA7E sysirq
FE56 sysnmi
