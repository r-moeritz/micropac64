Sections:
00: "org0001:801" (801-1740)
01: "org0002:4000" (4000-4900)
02: "org0003:4bf0" (4BF0-4FE8)
03: "org0004:5000" (5000-5740)


Source: "src/startup.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Program startup
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         .org $0801
                        	     6: 
                        	     7:         ;; BASIC header
00:0801 0B08            	     8:         .word nxl,10
00:0803 0A00
00:0805 9E              	     9:         .byte $9e
00:0806 32303631        	    10:         .string "2061"
00:080A 00
00:080B 0000            	    11: nxl:    .word 0
                        	    12: 
                        	    13:         ;; Program initialization
00:080D 202A09          	    14:         jsr initvic
00:0810 205709          	    15:         jsr fillcolmem
00:0813 20FB0B          	    16:         jsr setupirq
00:0816 20E00C          	    17:         jsr setupnmi
00:0819 20CD0E          	    18:         jsr newgame
                        	    19: 
                        	    20:         ;; Include program modules
                        	    21:         include macros.asm

Source: "macros.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; General purpose .macros
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5: 
                        	     6:         ;; Maths
                        	     7:         ;; ------------------------------------------------------------
                        	     8:         
                        	     9:         ;; Multiply value in .A by 8, ignore C flag
                        	    10:         ;; Reads:       .A
                        	    11:         ;; Writes:      .A
                        	    12: mula8:  .macro
                        	    13:         clc
                        	    14:         asl
                        	    15:         asl
                        	    16:         asl
                        	    17:         .endm
                        	    18:         
                        	    19:         ;; Divide value in .A by 8, ignore C flag
                        	    20:         ;; Reads:       .A
                        	    21:         ;; Writes:      .A      
                        	    22: diva8:  .macro
                        	    23:         sec
                        	    24:         lsr
                        	    25:         lsr
                        	    26:         lsr
                        	    27:         .endm
                        	    28: 
                        	    29:         ;; Add immediate value to byte and store
                        	    30: adcbimm: .macro val, byt
                        	    31:         clc
                        	    32:         lda \byt
                        	    33:         adc #\val
                        	    34:         sta \byt
                        	    35:         .endm
                        	    36: 
                        	    37:         ;; Subtract immediate value from byte and store
                        	    38: sbcbimm: .macro val, byt
                        	    39:         sec
                        	    40:         lda \byt
                        	    41:         sbc #\val
                        	    42:         sta \byt
                        	    43:         .endm
                        	    44: 
                        	    45:         ;; Add immediate word value to word and store
                        	    46: adcwimm: .macro val, wrd
                        	    47:         clc
                        	    48:         lda \wrd
                        	    49:         adc #<\val
                        	    50:         sta \wrd
                        	    51:         lda \wrd+1
                        	    52:         adc #>\val
                        	    53:         sta \wrd+1
                        	    54:         .endm
                        	    55: 
                        	    56:         ;; Subtract immediate word value from word and store
                        	    57: sbcwimm: .macro val, wrd
                        	    58:         sec
                        	    59:         lda \wrd
                        	    60:         sbc #<\val
                        	    61:         sta \wrd
                        	    62:         lda \wrd+1
                        	    63:         sbc #>\val
                        	    64:         sta \wrd+1
                        	    65:         .endm
                        	    66:         
                        	    67:         ;; Conditional jumps
                        	    68:         ;; ------------------------------------------------------------
                        	    69: 
                        	    70:         ;; BNE to distant address
                        	    71: jne:    .macro adr
                        	    72:         beq :+
                        	    73:         jmp \adr
                        	    74: :
                        	    75:         .endm
                        	    76: 
                        	    77:         ;; BEQ to distant address
                        	    78: jeq:    .macro adr
                        	    79:         bne :+
                        	    80:         jmp \adr
                        	    81: :
                        	    82:         .endm
                        	    83: 
                        	    84:         ;; BCS to distant address
                        	    85: jcs:    .macro adr
                        	    86:         bcc :+
                        	    87:         jmp \adr
                        	    88: :
                        	    89:         .endm
                        	    90: 
                        	    91:         ;; BCC to distant address
                        	    92: jcc:    .macro adr
                        	    93:         bcs :+
                        	    94:         jmp \adr
                        	    95: :
                        	    96:         .endm
                        	    97: 
                        	    98:         ;; BMI to distant address
                        	    99: jmi:    .macro adr
                        	   100:         bpl :+
                        	   101:         jmp \adr
                        	   102: :
                        	   103:         .endm
                        	   104:         
                        	   105:         ;; Stack operations
                        	   106:         ;; ------------------------------------------------------------
                        	   107: 
                        	   108:         ;; Push .X onto the stack
                        	   109: phx:    .macro
                        	   110:         txa
                        	   111:         pha
                        	   112:         .endm
                        	   113: 
                        	   114:         ;; Pop the top byte off the stack onto .X
                        	   115: plx:    .macro
                        	   116:         pla
                        	   117:         tax
                        	   118:         .endm
                        	   119: 
                        	   120:         ;; Push .Y onto the stack
                        	   121: phy:    .macro
                        	   122:         tya
                        	   123:         pha
                        	   124:         .endm
                        	   125: 
                        	   126:         ;; Pop the top byte off the stack onto .Y
                        	   127: ply:    .macro
                        	   128:         pla
                        	   129:         tay
                        	   130:         .endm
                        	   131: 
                        	   132:         ;; Memory operations
                        	   133:         ;; ------------------------------------------------------------
                        	   134: 
                        	   135:         ;; Swap bytes via the stack
                        	   136: swpbyt: .macro byt1, byt2
                        	   137:         lda \byt1
                        	   138:         pha                     ;load byt1 & push onto the stack
                        	   139:         lda \byt2
                        	   140:         sta \byt1               ;load byt2 & save to byt1
                        	   141:         pla
                        	   142:         sta \byt2               ;pop byt1 off the stack & save to byt2
                        	   143:         .endm
                        	   144:         
                        	   145:         ;; Load immediate value into byte
                        	   146: ldbimm: .macro val, byt
                        	   147:         lda #\val
                        	   148:         sta \byt
                        	   149:         .endm
                        	   150:         
                        	   151:         ;; Load immediate value into word
                        	   152: ldwimm: .macro val, wrd
                        	   153:         lda #<\val
                        	   154:         sta \wrd
                        	   155:         lda #>\val
                        	   156:         sta \wrd+1
                        	   157:         .endm
                        	   158: 
                        	   159:         ;; Load value into byte via pointer at index
                        	   160: ldbptr: .macro ptr, idx, byt
                        	   161:         ldy #\idx
                        	   162:         lda (\ptr),y
                        	   163:         sta \byt
                        	   164:         .endm
                        	   165:         
                        	   166:         ;; Load value into word via pointer at index
                        	   167: ldwptr: .macro ptr, idx, wrd
                        	   168:         ldy #\idx
                        	   169:         lda (\ptr),y
                        	   170:         sta \wrd
                        	   171:         iny
                        	   172:         lda (\ptr),y
                        	   173:         sta \wrd+1
                        	   174:         .endm
                        	   175: 
                        	   176:         ;; Copy value from one byte to another
                        	   177: cpbyt:  .macro src, dst
                        	   178:         lda \src
                        	   179:         sta \dst
                        	   180:         .endm
                        	   181: 
                        	   182:         ;; Copy value from one word to another
                        	   183: cpwrd:  .macro src, dst
                        	   184:         lda \src
                        	   185:         sta \dst
                        	   186:         lda \src+1
                        	   187:         sta \dst+1
                        	   188:         .endm
                        	   189: 
                        	   190:         ;; Fill memory range with a byte
                        	   191: filmem: .macro adr, len, val
                        	   192:         lda #\val
                        	   193:         ldx #\len        
                        	   194: :       beq :+
                        	   195:         sta \adr,x
                        	   196:         dex
                        	   197:         jmp :-
                        	   198: :       sta \adr,x
                        	   199:         .endm
                        	   200: 
                        	   201:         ;; Increment pointer using X-based, indirect adressing to ensure
                        	   202:         ;; HB is updated along with LB.
                        	   203: incptrx: .macro ptr
                        	   204:         clc
                        	   205:         lda \ptr,x
                        	   206:         adc #1
                        	   207:         sta \ptr,x
                        	   208:         inx
                        	   209:         lda \ptr,x
                        	   210:         adc #0
                        	   211:         sta \ptr,x
                        	   212:         dex
                        	   213:         .endm
                        	   214: 
                        	   215:         ;; Increment word to ensure HB is updated along with LB.
                        	   216: incwrd: .macro wrd
                        	   217:         clc
                        	   218:         lda \wrd
                        	   219:         adc #1
                        	   220:         sta \wrd
                        	   221:         lda \wrd+1
                        	   222:         adc #0
                        	   223:         sta \wrd+1
                        	   224:         .endm
                        	   225: 
                        	   226:         ;; Increment accumulator
                        	   227: ina:    .macro
                        	   228:         tay
                        	   229:         iny
                        	   230:         tya
                        	   231:         .endm
                        	   232: 
                        	   233:         ;; Decrement accumulator
                        	   234: dea:    .macro
                        	   235:         tay
                        	   236:         dey
                        	   237:         tya
                        	   238:         .endm
                        	   239: 

Source: "src/startup.asm"
                        	    22:         include symbols.asm

Source: "symbols.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Symbol definitions
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         
                        	     6:         ;; Zero page memory locations
                        	     7:         ;; ------------------------------------------------------------
                        	     8: 
                        	     9:         ;; 15-byte buffer for use in sub-routines,
                        	    10:         ;; divided into 3x blocks of 5 bytes each.
                        	    11: buf:            .ezp $16         ;$16-$24
                        	    12:         
                        	    13:         ;; Block for game loop
                        	    14: wrd1:           .ezp buf
                        	    15: wrd2:           .ezp buf+$02
                        	    16: tmp:            .ezp buf+$04
                        	    17:         
                        	    18:         ;; Block for IRQ handler
                        	    19: irqwrd1:        .ezp buf+$05
                        	    20: irqwrd2:        .ezp buf+$07
                        	    21: irqtmp:         .ezp buf+$09
                        	    22:         
                        	    23:         ;; Block for NMI handler
                        	    24: nmiwrd1:        .ezp buf+$0a
                        	    25: nmiwrd2:        .ezp buf+$0c
                        	    26: nmitmp:         .ezp buf+$0e
                        	    27: 
                        	    28:         ;; Joystick data
                        	    29: joybtn:         .ezp $92         ;button value
                        	    30: joyx:           .ezp $96         ;x axis value
                        	    31: joyy:           .ezp $97         ;y axis value
                        	    32: 
                        	    33:         ;; Pac-Man data
                        	    34: pacsrc:         .ezp $9e         ;source node
                        	    35: pactar:         .ezp $9f         ;target node
                        	    36: pacdir:         .ezp $a3         ;facing direction
                        	    37: pacdis:         .ezp $a4         ;distance to target
                        	    38: pacrem:         .ezp $a5         ;distance remaining to target
                        	    39: 
                        	    40:         ;; Scoring, gameplay
                        	    41: npelrem:        .ezp $a6          ;number of pellets remaining
                        	    42: nmenrem:        .ezp $a7          ;number of remaining "men"
                        	    43: lvlnum:         .ezp $a8          ;level number
                        	    44: frtena:         .ezp $a9          ;whether or not fruit is enabled        
                        	    45: score:          .ezp $fc          ;player's score in BCD (4 bytes: $fc-$ff)
                        	    46: 
                        	    47:         ;; Animation
                        	    48: pacaix:         .ezp $aa          ;Pac-Man animation frame index
                        	    49: enzraix:        .ezp $ab          ;energizer animation frame index
                        	    50: lvlend:         .ezp $9b          ;level end flashes
                        	    51: 
                        	    52:         ;; Still available: $f7-$fb (5 bytes)
                        	    53:         
                        	    54:         ;; Memory-mapped hardware registers
                        	    55:         ;; ------------------------------------------------------------
                        	    56:         
                        	    57:         ;; VIC II registers
                        	    58: vic:            .equ $d000
                        	    59: sp0x:           .equ vic
                        	    60: sp0y:           .equ vic + $01
                        	    61: sp1x:           .equ vic + $02
                        	    62: sp1y:           .equ vic + $03
                        	    63: sp2x:           .equ vic + $04
                        	    64: sp2y:           .equ vic + $05
                        	    65: sp3x:           .equ vic + $06
                        	    66: sp3y:           .equ vic + $07
                        	    67: sp4x:           .equ vic + $08
                        	    68: sp4y:           .equ vic + $09
                        	    69: sp5x:           .equ vic + $0a
                        	    70: sp5y:           .equ vic + $0b
                        	    71: sp6x:           .equ vic + $0c
                        	    72: sp6y:           .equ vic + $0d
                        	    73: sp7x:           .equ vic + $0e
                        	    74: sp7y:           .equ vic + $0f
                        	    75: scroly:         .equ vic + $11
                        	    76: raster:         .equ vic + $12
                        	    77: spena:          .equ vic + $15
                        	    78: vmcsb:          .equ vic + $18
                        	    79: vicirq:         .equ vic + $19
                        	    80: irqmsk:         .equ vic + $1a
                        	    81: spspcl:         .equ vic + $1e
                        	    82: spbgcl:         .equ vic + $1f
                        	    83: extcol:         .equ vic + $20
                        	    84: bgcol0:         .equ vic + $21
                        	    85: sp0col:         .equ vic + $27
                        	    86: 
                        	    87:         ;; CIA1 registers
                        	    88: cia1:           .equ $dc00
                        	    89: ci1pra:         .equ cia1
                        	    90: ci1icr:         .equ cia1 + $0d
                        	    91: 
                        	    92:         ;; CIA2 registers
                        	    93: cia2:           .equ $dd00
                        	    94: ci2pra:         .equ cia2
                        	    95: c2ddra:         .equ cia2 + $02
                        	    96: ti2a:           .equ cia2 + $04
                        	    97: ti2b:           .equ cia2 + $06
                        	    98: ci2icr:         .equ cia2 + $0d
                        	    99: ci2cra:         .equ cia2 + $0e
                        	   100: ci2crb:         .equ cia2 + $0f
                        	   101: 
                        	   102: 
                        	   103:         ;; Operating system memory locations
                        	   104:         ;; ------------------------------------------------------------
                        	   105:         
                        	   106:         ;; Interrupt vectors
                        	   107: cinv:           .equ $0314       ;IRQ vector
                        	   108: nminv:          .equ $0318       ;NMI vector
                        	   109: 
                        	   110:         ;; Interrupt routines
                        	   111: sysirq:         .equ $ea7e       ;kernal IRQ handler
                        	   112: sysnmi:         .equ $fe56       ;kernal NMI handler
                        	   113: 
                        	   114: 
                        	   115:         ;; Program memory locations
                        	   116:         ;; ------------------------------------------------------------
                        	   117:         
                        	   118: charset:        .equ $4000       ;character set definition
                        	   119: coltab:         .equ $4800       ;colour table
                        	   120: mazegfx:        .equ $4bf0       ;Pac-Man maze
                        	   121: scnmem:         .equ $4c00       ;screen memory
                        	   122: colmem:         .equ $d800       ;colour memory
                        	   123: sp0mem:         .equ $5000       ;sprite 0 address
                        	   124: sp0ptr:         .equ $4ff8       ;sprite 0 pointer
                        	   125: sp0loc:         .equ $1000/$40   ;sp0mem
                        	   126: 
                        	   127: 
                        	   128:         ;; Constants
                        	   129:         ;; ------------------------------------------------------------
                        	   130: 
                        	   131:         ;; Misc.
                        	   132: raslin:         .equ 250         ;line for raster interrupt
                        	   133: spxscog:        .equ 24          ;sprite x screen origin
                        	   134: spyscog:        .equ 50          ;sprite y screen origin
                        	   135: maxpell:        .equ 182         ;maximum number of pellets (incl. energizers)
                        	   136: maxmen:         .equ 3           ;maximum number of "men"
                        	   137: 
                        	   138:         ;; Fruit
                        	   139: frxpos:         .equ $67          ;fruit x loc
                        	   140: frypos:         .equ $a2          ;fruit y loc
                        	   141: frttim:         .equ 38           ;fruit timer: 39 x 240ms = 9.1s
                        	   142: maxftx:         .equ $48          ;maximum fruit table index
                        	   143: 
                        	   144:         ;; Screen memory indexes
                        	   145: scrmsdi:        .equ $185        ;most significant digit of score
                        	   146:         
                        	   147:         ;; Node indexes
                        	   148: wrpnixw:        .equ $1b         ;western warp tunnel node index
                        	   149: wrpnixe:        .equ $21         ;eastern warp tunnel node index
                        	   150: pacstnd:        .equ $31         ;Pac-Man's starting node index        
                        	   151: gsthmnd:        .equ $1e         ;ghost home node        
                        	   152: 
                        	   153:         ;; Character constants
                        	   154: spcechr:        .equ $20         ;space char
                        	   155: pellchr:        .equ $53         ;pellet char
                        	   156: enzrchr:        .equ $54         ;energizer char
                        	   157: 
                        	   158:         ;; Colour constants
                        	   159: dkgrey:         .equ $0b         ;dark grey
                        	   160: ltgrey:         .equ $0f         ;light grey
                        	   161:         
                        	   162:         ;; Compass directions
                        	   163: n:              .equ 2
                        	   164: s:              .equ 3
                        	   165: w:              .equ 4
                        	   166: e:              .equ 5
                        	   167: 
                        	   168:         ;; Scores, expressed as BCD pairs
                        	   169: pellpts:        .equ $10        ;10 pts for pellets
                        	   170: enzrpts:        .equ $50        ;50 pts for energizers
                        	   171: 
                        	   172:         ;; Index into buf to access memory block
                        	   173:         ;; reservedf for gameloop
                        	   174: blki:           .equ $00
                        	   175:         
                        	   176:         ;; Index into buf to access memory block
                        	   177:         ;; reserved for IRQ handler
                        	   178: irqblki:        .equ $05
                        	   179: 
                        	   180:         ;; Index into buf to access memory block
                        	   181:         ;; reserved for NMI handler
                        	   182: nmiblki:        .equ $0a
                        	   183: 
                        	   184:         ;; The number of pellets that need to be eaten for bonus items
                        	   185:         ;; to appear the 1st and 2nd time
                        	   186: nbonpel1:       .equ 52
                        	   187: nbonpel2:       .equ 127
                        	   188: 

Source: "src/startup.asm"
                        	    23:         include maths.asm

Source: "maths.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Maths sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Multiply by 5
                        	     6:         ;; Reads:
                        	     7:         ;;  - .A (multiplicand)
                        	     8:         ;;  - .X (offset to memory block in buf)
                        	     9:         ;; Writes:
                        	    10:         ;;  - Result is stored in 1st word of memory block
                        	    11:         ;;  - 2nd word of memory block is used as a work area
00:081C E8              	    12: mula5:  inx
00:081D E8              	    13:         inx
00:081E 9516            	    14:         sta buf,x               ;stash original .A in wrd2 (lo)
00:0820 18              	    15:         clc
00:0821 0A              	    16:         asl                     ;multiply by 2
00:0822 A8              	    17:         tay                     ;stash product in .Y
00:0823 A900            	    18:         lda #0
00:0825 2A              	    19:         rol
00:0826 E8              	    20:         inx
00:0827 9516            	    21:         sta buf,x               ;stash .C in wrd2 (hi)
00:0829 98              	    22:         tya                     ;restore product from .Y
00:082A 0A              	    23:         asl                     ;multiply by 2
00:082B A8              	    24:         tay                     ;stash product in .Y
00:082C B516            	    25:         lda buf,x               
00:082E 2A              	    26:         rol                     ;restore .C from wrd2 (hi)
00:082F CA              	    27:         dex
00:0830 CA              	    28:         dex
00:0831 9516            	    29:         sta buf,x               ;write hi byte to wrd1 (hi)
00:0833 98              	    30:         tya                     ;restore product from .Y
00:0834 E8              	    31:         inx
00:0835 7516            	    32:         adc buf,x               ;add original .A value
00:0837 CA              	    33:         dex
00:0838 CA              	    34:         dex
00:0839 9516            	    35:         sta buf,x               ;write lo byte to wrd1 (lo)
00:083B A900            	    36:         lda #0
00:083D 2A              	    37:         rol
00:083E E8              	    38:         inx
00:083F 7516            	    39:         adc buf,x               ;add .C to hi byte
00:0841 9516            	    40:         sta buf,x               ;and write to wrd1 (hi)
00:0843 CA              	    41:         dex
00:0844 60              	    42:         rts
                        	    43:         
                        	    44:         ;; Multiply by 6
                        	    45:         ;; Reads:
                        	    46:         ;;  - .A (multiplicand)
                        	    47:         ;;  - .X (offset to memory block in buf)
                        	    48:         ;; Writes:
                        	    49:         ;;  - Result is stored in 1st word of memory block
                        	    50:         ;;  - 2nd word of memory block is used as a work area        
00:0845 E8              	    51: mula6:  inx
00:0846 E8              	    52:         inx
00:0847 9516            	    53:         sta buf,x
00:0849 18              	    54:         clc
00:084A 0A              	    55:         asl
00:084B A8              	    56:         tay
00:084C A900            	    57:         lda #0
00:084E 2A              	    58:         rol
00:084F E8              	    59:         inx
00:0850 9516            	    60:         sta buf,x
00:0852 98              	    61:         tya
00:0853 0A              	    62:         asl
00:0854 A8              	    63:         tay
00:0855 B516            	    64:         lda buf,x
00:0857 2A              	    65:         rol
00:0858 CA              	    66:         dex
00:0859 CA              	    67:         dex
00:085A 9516            	    68:         sta buf,x
00:085C 98              	    69:         tya
00:085D E8              	    70:         inx
00:085E 7516            	    71:         adc buf,x
00:0860 A8              	    72:         tay
00:0861 A900            	    73:         lda #0
00:0863 2A              	    74:         rol
00:0864 CA              	    75:         dex
00:0865 7516            	    76:         adc buf,x
00:0867 9516            	    77:         sta buf,x
00:0869 98              	    78:         tya
00:086A E8              	    79:         inx
00:086B 7516            	    80:         adc buf,x
00:086D CA              	    81:         dex
00:086E CA              	    82:         dex
00:086F 9516            	    83:         sta buf,x
00:0871 A900            	    84:         lda #0
00:0873 2A              	    85:         rol
00:0874 E8              	    86:         inx
00:0875 7516            	    87:         adc buf,x
00:0877 9516            	    88:         sta buf,x
00:0879 CA              	    89:         dex
00:087A 60              	    90:         rts
                        	    91: 

Source: "src/startup.asm"
                        	    24:         include io.asm

Source: "io.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; I/O related sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Write the player's score to screen memory
                        	     6:         ;; May only be called from IRQ handler!
                        	     7:         ;; Clobbers .A, .X, and .Y
                        	     8:         ;; Reads:
                        	     9:         ;;  - score
                        	    10:         ;;  - irqwrd1
                        	    11:         ;; Writes:
                        	    12:         ;;  - irqwrd1
                        	    13:         ;;  - irqwrd2
                        	    14:         ;;  - irqtmp
                        	    15: printscr:
                        	    16:         ;; Each of the 4 bytes comprising score contains 2 BCD digits.
                        	    17:         ;; Each digit needs to be extracted and turned into a
                        	    18:         ;; printable character. Then, each digit can be written to
                        	    19:         ;; screen memory using printchr. We skip leading zeroes.
                        	    20:         ldwimm scrmsdi, irqwrd1
00:087B A985            	     1M         lda #<scrmsdi
00:087D 851B            	     2M         sta irqwrd1
00:087F A901            	     3M         lda #>scrmsdi
00:0881 851C            	     4M         sta irqwrd1+1
                        	    21:         cpwrd irqwrd1, irqwrd2
00:0883 A51B            	     1M         lda irqwrd1
00:0885 851D            	     2M         sta irqwrd2
00:0887 A51C            	     3M         lda irqwrd1+1
00:0889 851E            	     4M         sta irqwrd2+1
                        	    22:         ldbimm 0, irqtmp
00:088B A900            	     1M         lda #0
00:088D 851F            	     2M         sta irqtmp
00:088F A203            	    23:         ldx #3
00:0891 3070            	    24: lpprsc: bmi fiprsc
                        	    25:         ;; print hi-nybble BCD char
00:0893 B5FC            	    26:         lda score,x
00:0895 4A              	    27:         lsr
00:0896 4A              	    28:         lsr
00:0897 4A              	    29:         lsr
00:0898 4A              	    30:         lsr                     ;shift BCD digit into lo-nybble
00:0899 F007            	    31:         beq :+
00:089B A001            	    32:         ldy #1
00:089D 841F            	    33:         sty irqtmp
00:089F 4CA908          	    34:         jmp :++
00:08A2 A41F            	    35: :       ldy irqtmp
00:08A4 D003            	    36:         bne :+
00:08A6 4CB508          	    37:         jmp :++
00:08A9 0930            	    38: :       ora #%00110000          ;convert to printable char
00:08AB A8              	    39:         tay                     ;place char in .Y
                        	    40:         phx                     ;save .X onto stack
00:08AC 8A              	     1M         txa
00:08AD 48              	     2M         pha
00:08AE A205            	    41:         ldx #irqblki            ;load block index into .X
00:08B0 201709          	    42:         jsr printchr            ;print char
                        	    43:         plx                     ;restore .X from stack
00:08B3 68              	     1M         pla
00:08B4 AA              	     2M         tax
                        	    44: :       incwrd irqwrd2
00:08B5 18              	     1M         clc
00:08B6 A51D            	     2M         lda irqwrd2
00:08B8 6901            	     3M         adc #1
00:08BA 851D            	     4M         sta irqwrd2
00:08BC A51E            	     5M         lda irqwrd2+1
00:08BE 6900            	     6M         adc #0
00:08C0 851E            	     7M         sta irqwrd2+1
                        	    45:         cpwrd irqwrd2, irqwrd1  ;increment screen memory offset
00:08C2 A51D            	     1M         lda irqwrd2
00:08C4 851B            	     2M         sta irqwrd1  
00:08C6 A51E            	     3M         lda irqwrd2+1
00:08C8 851C            	     4M         sta irqwrd1  +1
                        	    46:         
                        	    47:         ;; print lo-nybble BCD char
00:08CA B5FC            	    48: :       lda score,x
00:08CC 290F            	    49:         and #%00001111          ;mask out hi-nybble
00:08CE F007            	    50:         beq :+
00:08D0 A001            	    51:         ldy #1        
00:08D2 841F            	    52:         sty irqtmp
00:08D4 4CDE08          	    53:         jmp :++
00:08D7 A41F            	    54: :       ldy irqtmp
00:08D9 D003            	    55:         bne :+
00:08DB 4CEA08          	    56:         jmp :++
00:08DE 0930            	    57: :       ora #%00110000          ;convert to printable char
00:08E0 A8              	    58:         tay                     ;place char in .Y
                        	    59:         phx                     ;save .X onto stack
00:08E1 8A              	     1M         txa
00:08E2 48              	     2M         pha
00:08E3 A205            	    60:         ldx #irqblki            ;load block index into .X
00:08E5 201709          	    61:         jsr printchr            ;print char
                        	    62:         plx                     ;restore .X from stack
00:08E8 68              	     1M         pla
00:08E9 AA              	     2M         tax
                        	    63: :       incwrd irqwrd2
00:08EA 18              	     1M         clc
00:08EB A51D            	     2M         lda irqwrd2
00:08ED 6901            	     3M         adc #1
00:08EF 851D            	     4M         sta irqwrd2
00:08F1 A51E            	     5M         lda irqwrd2+1
00:08F3 6900            	     6M         adc #0
00:08F5 851E            	     7M         sta irqwrd2+1
                        	    64:         cpwrd irqwrd2, irqwrd1  ;increment screen memory offset
00:08F7 A51D            	     1M         lda irqwrd2
00:08F9 851B            	     2M         sta irqwrd1  
00:08FB A51E            	     3M         lda irqwrd2+1
00:08FD 851C            	     4M         sta irqwrd1  +1
00:08FF CA              	    65:         dex                     ;decrement .X
00:0900 4C9108          	    66:         jmp lpprsc
00:0903 60              	    67: fiprsc: rts
                        	    68:         
                        	    69:         ;; Write value in .Y to colour memory at 16-bit offset
                        	    70:         ;; in memory block.
                        	    71:         ;; Reads:
                        	    72:         ;;  - .Y (value to write to colour memory)
                        	    73:         ;;  - .X (buf offset to access memory block )
                        	    74:         ;;  - 1st word in memory block at offset
                        	    75:         ;; Writes:
                        	    76:         ;;  - 1st word in memory block at offset
                        	    77: printcol:       
00:0904 18              	    78:         clc
00:0905 A900            	    79:         lda #<colmem
00:0907 7516            	    80:         adc buf,x
00:0909 9516            	    81:         sta buf,x
00:090B E8              	    82:         inx                     ;hi-byte
00:090C A9D8            	    83:         lda #>colmem
00:090E 7516            	    84:         adc buf,x
00:0910 9516            	    85:         sta buf,x
00:0912 CA              	    86:         dex                     ;lo-byte
00:0913 98              	    87:         tya
00:0914 8116            	    88:         sta (buf,x)             ;write to colour memory
00:0916 60              	    89:         rts
                        	    90: 
                        	    91:         ;; Write char in .Y to screen memory at 16-bit offset
                        	    92:         ;; in memory block.
                        	    93:         ;; Reads:
                        	    94:         ;;  - .Y (char to write to screen memory)
                        	    95:         ;;  - .X (buf offset to access memory block )
                        	    96:         ;;  - 1st word in memory block at offset
                        	    97:         ;; Writes:
                        	    98:         ;;  - 1st word in memory block at offset
                        	    99: printchr:
                        	   100:         ;; Write char to screen memory
00:0917 18              	   101:         clc        
00:0918 A900            	   102:         lda #<scnmem
00:091A 7516            	   103:         adc buf,x
00:091C 9516            	   104:         sta buf,x
00:091E E8              	   105:         inx                     ;hi-byte
00:091F A94C            	   106:         lda #>scnmem
00:0921 7516            	   107:         adc buf,x
00:0923 9516            	   108:         sta buf,x
00:0925 CA              	   109:         dex                     ;lo-byte
00:0926 98              	   110:         tya
00:0927 8116            	   111:         sta (buf,x)             ;write to screen memory
00:0929 60              	   112:         rts
                        	   113: 
                        	   114:         ;; Initialize VIC-II
                        	   115:         ;;  - Select 16K video bank
                        	   116:         ;;  - Select screen memory location
                        	   117:         ;;  - Select character memory location
                        	   118:         ;;  - Set border & background colours
                        	   119: initvic:
                        	   120:         ;; select vic bank
00:092A AD02DD          	   121:         lda c2ddra
00:092D 0903            	   122:         ora #%00000011
00:092F 8D02DD          	   123:         sta c2ddra              ;set bits 0+1 of ci2pra as output bits
00:0932 AD00DD          	   124:         lda ci2pra
00:0935 29FC            	   125:         and #%11111100
00:0937 0902            	   126:         ora #%00000010
00:0939 8D00DD          	   127:         sta ci2pra              ;select vic bank 1: $4000-$7fff
                        	   128: 
                        	   129:         ;; select screen memory loc
00:093C A90F            	   130:         lda #$0f
00:093E 2D18D0          	   131:         and vmcsb
00:0941 0930            	   132:         ora #$30
00:0943 8D18D0          	   133:         sta vmcsb
                        	   134: 
                        	   135:         ;; select char memory loc
00:0946 A9F1            	   136:         lda #$f1
00:0948 2D18D0          	   137:         and vmcsb
00:094B 8D18D0          	   138:         sta vmcsb
                        	   139: 
                        	   140:         ;; set border & background colours
00:094E A900            	   141:         lda #0
00:0950 8D20D0          	   142:         sta extcol
00:0953 8D21D0          	   143:         sta bgcol0
00:0956 60              	   144:         rts
                        	   145: 
                        	   146:         ;; Fill colour memory from colour table
                        	   147: fillcolmem:
                        	   148:         ;; populate colour memory
00:0957 A200            	   149:         ldx #0
                        	   150: setcol1:
00:0959 BD004C          	   151:         lda scnmem,x
00:095C A8              	   152:         tay
00:095D B90048          	   153:         lda coltab,y
00:0960 9D00D8          	   154:         sta colmem,x
00:0963 E8              	   155:         inx
00:0964 E0FA            	   156:         cpx #250
00:0966 D0F1            	   157:         bne setcol1
00:0968 A200            	   158:         ldx #0
                        	   159: setcol2:
00:096A BDFA4C          	   160:         lda scnmem+250,x
00:096D A8              	   161:         tay
00:096E B90048          	   162:         lda coltab,y
00:0971 9DFAD8          	   163:         sta colmem+250,x
00:0974 E8              	   164:         inx
00:0975 E0FA            	   165:         cpx #250
00:0977 D0F1            	   166:         bne setcol2
00:0979 A200            	   167:         ldx #0
                        	   168: setcol3:
00:097B BDF44D          	   169:         lda scnmem+500,x
00:097E A8              	   170:         tay
00:097F B90048          	   171:         lda coltab,y
00:0982 9DF4D9          	   172:         sta colmem+500,x
00:0985 E8              	   173:         inx
00:0986 E0FA            	   174:         cpx #250
00:0988 D0F1            	   175:         bne setcol3
00:098A A200            	   176:         ldx #0
                        	   177: setcol4:
00:098C BDEE4E          	   178:         lda scnmem+750,x
00:098F A8              	   179:         tay
00:0990 B90048          	   180:         lda coltab,y
00:0993 9DEEDA          	   181:         sta colmem+750,x
00:0996 E8              	   182:         inx
00:0997 E0FA            	   183:         cpx #250
00:0999 D0F1            	   184:         bne setcol4
00:099B 60              	   185:         rts
                        	   186:         
                        	   187:         ;; Read joystick in port 2
                        	   188:         ;; Writes:
                        	   189:         ;;  - joyx = $01: stick moved right
                        	   190:         ;;  - joyx = $ff: stick moved left
                        	   191:         ;;  - joyy = $01: stick moved down
                        	   192:         ;;  - joyy = $ff: stick moved up
                        	   193:         ;;  - joybtn = $01: button pressed
                        	   194: readjoy2:
00:099C AD00DC          	   195:         lda ci1pra
00:099F A000            	   196:         ldy #0
00:09A1 A200            	   197:         ldx #0
00:09A3 4A              	   198:         lsr
00:09A4 B001            	   199:         bcs djr0
00:09A6 88              	   200:         dey
00:09A7 4A              	   201: djr0:   lsr
00:09A8 B001            	   202:         bcs djr1
00:09AA C8              	   203:         iny
00:09AB 4A              	   204: djr1:   lsr
00:09AC B001            	   205:         bcs djr2
00:09AE CA              	   206:         dex
00:09AF 4A              	   207: djr2:   lsr
00:09B0 B001            	   208:         bcs djr3
00:09B2 E8              	   209:         inx
00:09B3 4A              	   210: djr3:   lsr
00:09B4 8696            	   211:         stx joyx
00:09B6 8497            	   212:         sty joyy
00:09B8 A900            	   213:         lda #0
00:09BA 2A              	   214:         rol
00:09BB 8592            	   215:         sta joybtn
00:09BD 60              	   216:         rts
                        	   217: 

Source: "src/startup.asm"
                        	    25:         include maze.asm

Source: "maze.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Maze related sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Convert pellet table index to pellet memory address.
                        	     6:         ;; Reads:
                        	     7:         ;;  - .A (pellet table index)
                        	     8:         ;;  - .X (offset to memory block in buf)
                        	     9:         ;; Writes:
                        	    10:         ;;  - Result is stored in 1st word of buf at offset .X
                        	    11:         ;;  - 2nd word of buf at offset .X is used as a work area
                        	    12: pelladr:
00:09BE 201C08          	    13:         jsr mula5               ;multiply pellet index by 5
00:09C1 18              	    14:         clc
00:09C2 B516            	    15:         lda buf,x               ;load product (lo)
00:09C4 69FE            	    16:         adc #<pelltbl           ;add pellet table address (lo)
00:09C6 9516            	    17:         sta buf,x               ;write sum (lo)
00:09C8 E8              	    18:         inx
00:09C9 B516            	    19:         lda buf,x               ;load product (hi)
00:09CB 6912            	    20:         adc #>pelltbl           ;add pellet table address (hi)
00:09CD 9516            	    21:         sta buf,x               ;write sum (hi)
00:09CF CA              	    22:         dex
00:09D0 60              	    23:         rts
                        	    24: 
                        	    25:         ;; Fill maze with pellets
                        	    26:         ;; May only be called from gameloop!
                        	    27: fillmaze:
                        	    28:         ldbimm 0, tmp           ;store pellet index in tmp
00:09D1 A900            	     1M         lda #0
00:09D3 851A            	     2M         sta tmp           
                        	    29: filloop:
00:09D5 A51A            	    30:         lda tmp
00:09D7 A200            	    31:         ldx #blki
00:09D9 20BE09          	    32:         jsr pelladr             ;get pellet address
00:09DC A001            	    33:         ldy #1
00:09DE B116            	    34:         lda (wrd1),y
00:09E0 C9FF            	    35:         cmp #$ff                ;end marker?
00:09E2 F029            	    36:         beq finfil              ;yep, we're done
00:09E4 A901            	    37:         lda #1
00:09E6 A002            	    38:         ldy #2
00:09E8 9116            	    39:         sta (wrd1),y            ;set pellet status        
                        	    40:         ldwptr wrd1, 0, wrd2
00:09EA A000            	     1M         ldy #0
00:09EC B116            	     2M         lda (wrd1),y
00:09EE 8518            	     3M         sta wrd2
00:09F0 C8              	     4M         iny
00:09F1 B116            	     5M         lda (wrd1),y
00:09F3 8519            	     6M         sta wrd2+1
00:09F5 A204            	    41:         ldx #blki+4
00:09F7 202C0B          	    42:         jsr isenzr              ;is pellet an energizer?
00:09FA F005            	    43:         beq :+
00:09FC A053            	    44:         ldy #pellchr            ;no, it's a regular pellet
00:09FE 4C030A          	    45:         jmp :++
00:0A01 A054            	    46: :       ldy #enzrchr            ;yes, it's an energizer        
00:0A03 A202            	    47: :       ldx #blki+2
00:0A05 201709          	    48:         jsr printchr            ;print pellet char
00:0A08 E61A            	    49:         inc tmp
00:0A0A 4CD509          	    50:         jmp filloop
00:0A0D 60              	    51: finfil: rts
                        	    52: 
                        	    53:         ;; Find pellet collided with by searching in the opposite direction
                        	    54:         ;; to which Pac-Man is facing.
                        	    55:         ;; May only be called from IRQ handler!
                        	    56:         ;; Reads:
                        	    57:         ;;  - sp0x, sp0y
                        	    58:         ;;  - pacdir (direction Pac-Man is facing)
                        	    59:         ;; Writes:
                        	    60:         ;;  - irqwrd1: pellet address
                        	    61:         ;;  - irqtmp: pellet index
                        	    62: findpel:
                        	    63:         ;; if pacdir=#w then find 1st pellet in row with x>=sp0x
                        	    64:         ;; if pacdir=#e then find last pellet in row with x<=sp0x
                        	    65:         ;; if pacdir=#n then find pellet in row-1 with x=sp0x
                        	    66:         ;; if pacdir=#s then find pellet in row+1 with x=sp0x
00:0A0E A5A3            	    67:         lda pacdir
00:0A10 C904            	    68:         cmp #w
00:0A12 D033            	    69:         bne fpckde
                        	    70:         cpbyt sp0y, irqtmp
00:0A14 AD01D0          	     1M         lda sp0y
00:0A17 851F            	     2M         sta irqtmp
00:0A19 20100B          	    71:         jsr fpinrow             ;get indexes of west-most & east-most pellets
                        	    72:         cpbyt irqwrd2, irqtmp   ;store index of west-most pellet
00:0A1C A51D            	     1M         lda irqwrd2
00:0A1E 851F            	     2M         sta irqtmp   
00:0A20 A205            	    73:         ldx #irqblki
00:0A22 A51F            	    74: :       lda irqtmp              ;load index of west-most pellet in row
00:0A24 20BE09          	    75:         jsr pelladr             ;load pellet address into irqwrd1
00:0A27 A003            	    76:         ldy #3
                        	    77:         cpbyt sp0x, irqwrd2     ;copy sp0x to irqwrd2 (lo)
00:0A29 AD00D0          	     1M         lda sp0x
00:0A2C 851D            	     2M         sta irqwrd2     
00:0A2E C61D            	    78:         dec irqwrd2             ;decrement irqwrd2 (lo) to give some leeway
00:0A30 B11B            	    79:         lda (irqwrd1),y         ;load pellet x loc
00:0A32 C51D            	    80:         cmp irqwrd2
00:0A34 B005            	    81:         bcs :+                  ;pellet x loc >= sp0x?
00:0A36 E61F            	    82:         inc irqtmp              ;no, try next pellet to the east
00:0A38 4C220A          	    83:         jmp :-
00:0A3B A002            	    84: :       ldy #2
00:0A3D B11B            	    85:         lda (irqwrd1),y         ;yes, load pellet state
                        	    86:         jeq pelnotfd            ;has pellet already been eaten?
00:0A3F D003            	     1M         bne :+
00:0A41 4CE30A          	     2M         jmp pelnotfd            
                        	     3M :
00:0A44 4CDC0A          	    87:         jmp pelfound
00:0A47 C905            	    88: fpckde: cmp #e
00:0A49 D036            	    89:         bne fpckdn
                        	    90:         cpbyt sp0y, irqtmp
00:0A4B AD01D0          	     1M         lda sp0y
00:0A4E 851F            	     2M         sta irqtmp
00:0A50 20100B          	    91:         jsr fpinrow             ;get indexes of west-most & east-most pellets
00:0A53 A001            	    92:         ldy #1
00:0A55 B91D00          	    93:         lda irqwrd2,y
00:0A58 851F            	    94:         sta irqtmp              ;store index of west-most pellet
00:0A5A A205            	    95:         ldx #irqblki
00:0A5C A51F            	    96: :       lda irqtmp
00:0A5E 20BE09          	    97:         jsr pelladr
                        	    98:         cpbyt sp0x, irqwrd2     ;copy sp0x to irqwrd2 (lo)
00:0A61 AD00D0          	     1M         lda sp0x
00:0A64 851D            	     2M         sta irqwrd2     
00:0A66 E61D            	    99:         inc irqwrd2             ;increment irqwrd2 (lo) to give some leeway
00:0A68 A51D            	   100:         lda irqwrd2
00:0A6A A003            	   101:         ldy #3
00:0A6C D11B            	   102:         cmp (irqwrd1),y
00:0A6E B005            	   103:         bcs :+                  ;sp0x >= pellet x loc
00:0A70 C61F            	   104:         dec irqtmp              ;no, try next pellet to the west
00:0A72 4C5C0A          	   105:         jmp :-
00:0A75 A002            	   106: :       ldy #2
00:0A77 B11B            	   107:         lda (irqwrd1),y         ;yes, load pellet state
                        	   108:         jeq pelnotfd            ;has pellet already been eaten?
00:0A79 D003            	     1M         bne :+
00:0A7B 4CE30A          	     2M         jmp pelnotfd            
                        	     3M :
00:0A7E 4CDC0A          	   109:         jmp pelfound
00:0A81 C902            	   110: fpckdn: cmp #n
00:0A83 D02D            	   111:         bne fpds
                        	   112:         cpbyt sp0y, irqtmp      ;store sp0y in irqtmp
00:0A85 AD01D0          	     1M         lda sp0y
00:0A88 851F            	     2M         sta irqtmp      
00:0A8A 20EC0A          	   113:         jsr fprixs
00:0A8D 20100B          	   114:         jsr fpinrow             ;get indexes of west-most & east-most pellets
                        	   115:         cpbyt irqwrd2, irqtmp   ;store index of west-most pellet
00:0A90 A51D            	     1M         lda irqwrd2
00:0A92 851F            	     2M         sta irqtmp   
00:0A94 A205            	   116:         ldx #irqblki
00:0A96 A51F            	   117: :       lda irqtmp
00:0A98 20BE09          	   118:         jsr pelladr
00:0A9B AD00D0          	   119:         lda sp0x
00:0A9E A003            	   120:         ldy #3
00:0AA0 D11B            	   121:         cmp (irqwrd1),y
00:0AA2 F005            	   122:         beq :+                  ;sp0x = pellet x loc?
00:0AA4 E61F            	   123:         inc irqtmp              ;no, try next pellet to the east
00:0AA6 4C960A          	   124:         jmp :-
00:0AA9 A002            	   125: :       ldy #2
00:0AAB B11B            	   126:         lda (irqwrd1),y         ;yes, load pellet state
00:0AAD F034            	   127:         beq pelnotfd            ;has pellet already been eaten?
00:0AAF 4CDC0A          	   128:         jmp pelfound
                        	   129: fpds:   cpbyt sp0y, irqtmp
00:0AB2 AD01D0          	     1M         lda sp0y
00:0AB5 851F            	     2M         sta irqtmp
00:0AB7 20FE0A          	   130:         jsr fprixn
00:0ABA 20100B          	   131:         jsr fpinrow             ;get indexes of west-most & east-most pellets
                        	   132:         cpbyt irqwrd2, irqtmp   ;store index of west-most pellet
00:0ABD A51D            	     1M         lda irqwrd2
00:0ABF 851F            	     2M         sta irqtmp   
00:0AC1 A205            	   133:         ldx #irqblki
00:0AC3 A51F            	   134: :       lda irqtmp
00:0AC5 20BE09          	   135:         jsr pelladr
00:0AC8 AD00D0          	   136:         lda sp0x
00:0ACB A003            	   137:         ldy #3
00:0ACD D11B            	   138:         cmp (irqwrd1),y
00:0ACF F005            	   139:         beq :+                  ;sp0x = pellet x loc?
00:0AD1 E61F            	   140:         inc irqtmp              ;no, try next pellet to the east
00:0AD3 4CC30A          	   141:         jmp :-
00:0AD6 A002            	   142: :       ldy #2
00:0AD8 B11B            	   143:         lda (irqwrd1),y         ;yes, load pellet state
00:0ADA F007            	   144:         beq pelnotfd            ;has pellet already been eaten?
                        	   145: pelfound:
00:0ADC A900            	   146:         lda #0
00:0ADE A002            	   147:         ldy #2
00:0AE0 911B            	   148:         sta (irqwrd1),y         ;pellet not yet eaten, mark as eaten
00:0AE2 60              	   149:         rts        
                        	   150: pelnotfd:
                        	   151:         ldwimm $ffff, irqwrd1   ;pellet already eaten
00:0AE3 A9FF            	     1M         lda #<$ffff
00:0AE5 851B            	     2M         sta irqwrd1   
00:0AE7 A9FF            	     3M         lda #>$ffff
00:0AE9 851C            	     4M         sta irqwrd1   +1
00:0AEB 60              	   152:         rts
                        	   153: 
                        	   154:         ;; Get y loc of next row to the south of the y loc in irqtmp
                        	   155:         ;; Reads:
                        	   156:         ;;  - irqtmp: y loc to find row south of
                        	   157:         ;; Writes:
                        	   158:         ;;  - irqtmp: y loc of next row to the south
00:0AEC A000            	   159: fprixs: ldy #0
00:0AEE B9AD16          	   160: :       lda plrowix,y
00:0AF1 C51F            	   161:         cmp irqtmp
00:0AF3 B006            	   162:         bcs :+
00:0AF5 C8              	   163:         iny
00:0AF6 C8              	   164:         iny
00:0AF7 C8              	   165:         iny
00:0AF8 4CEE0A          	   166:         jmp :-
00:0AFB 851F            	   167: :       sta irqtmp
00:0AFD 60              	   168:         rts
                        	   169:         
                        	   170:         ;; Get y loc of next row to the north of the y loc in irqtmp
                        	   171:         ;; Reads:
                        	   172:         ;;  - irqtmp: y loc to find row north of
                        	   173:         ;; Writes:
                        	   174:         ;;  - irqtmp: y loc of next row to the north
00:0AFE A042            	   175: fprixn: ldy #66
00:0B00 B9AD16          	   176: :       lda plrowix,y
00:0B03 C51F            	   177:         cmp irqtmp
00:0B05 9006            	   178:         bcc :+
00:0B07 88              	   179:         dey
00:0B08 88              	   180:         dey
00:0B09 88              	   181:         dey
00:0B0A 4C000B          	   182:         jmp :-
00:0B0D 851F            	   183: :       sta irqtmp
00:0B0F 60              	   184:         rts
                        	   185:         
                        	   186:         
                        	   187:         ;; Get pellet table indexes of west-most & east-most pellets 
                        	   188:         ;; in row whose sprite y loc is in irqtmp
                        	   189:         ;; May only be called from IRQ handler!
                        	   190:         ;; Reads:
                        	   191:         ;;  - irqtmp: pellet row y loc
                        	   192:         ;; Writes:
                        	   193:         ;;  - irqwrd2: indexes of west-most & east-most pellets in row
                        	   194: fpinrow:
00:0B10 A000            	   195:         ldy #0
00:0B12 B9AD16          	   196: :       lda plrowix,y
00:0B15 C51F            	   197:         cmp irqtmp
00:0B17 F006            	   198:         beq :+
00:0B19 C8              	   199:         iny
00:0B1A C8              	   200:         iny
00:0B1B C8              	   201:         iny
00:0B1C 4C120B          	   202:         jmp :-
00:0B1F C8              	   203: :       iny
00:0B20 B9AD16          	   204:         lda plrowix,y
00:0B23 851D            	   205:         sta irqwrd2
00:0B25 C8              	   206:         iny
00:0B26 B9AD16          	   207:         lda plrowix,y
00:0B29 851E            	   208:         sta irqwrd2+1
00:0B2B 60              	   209:         rts
                        	   210: 
                        	   211:         ;; Check whether or not pellet at index is an energizer
                        	   212:         ;; Reads:
                        	   213:         ;;  - .X: index into buffer to access memory block
                        	   214:         ;;  - 1st byte of memory block: pellet index
                        	   215:         ;; Writes:
                        	   216:         ;;  - .Z is set if pellet is an energizer
00:0B2C A003            	   217: isenzr: ldy #3
00:0B2E 300B            	   218: :       bmi :+
00:0B30 B516            	   219:         lda buf,x
00:0B32 D99116          	   220:         cmp enzrlst,y
00:0B35 F004            	   221:         beq :+
00:0B37 88              	   222:         dey
00:0B38 4C2E0B          	   223:         jmp :-
00:0B3B 60              	   224: :       rts
                        	   225: 
                        	   226:         ;; Convert node index to node address
                        	   227:         ;; Reads:
                        	   228:         ;;  - .A (node index)
                        	   229:         ;;  - .X (offset into buf to access memory block)
                        	   230:         ;; Writes:
                        	   231:         ;;  - Result is stored in 1st word of memory block
                        	   232:         ;;  - 2nd word of memory block is used as a work area
                        	   233: nodeadr:
00:0B3C 204508          	   234:         jsr mula6
00:0B3F 18              	   235:         clc
00:0B40 B516            	   236:         lda buf,x
00:0B42 6960            	   237:         adc #<nodetbl
00:0B44 9516            	   238:         sta buf,x
00:0B46 E8              	   239:         inx
00:0B47 B516            	   240:         lda buf,x
00:0B49 6911            	   241:         adc #>nodetbl
00:0B4B 9516            	   242:         sta buf,x
00:0B4D CA              	   243:         dex
00:0B4E 60              	   244:         rts
                        	   245: 
                        	   246:         ;; Calculate distance from Pac-Man's source node to target node
                        	   247:         ;; Reads:
                        	   248:         ;;  - pacsrc (source node)
                        	   249:         ;;  - pactar (target node)
                        	   250:         ;;  - pacdir (compass direction)
                        	   251:         ;;  - .X (offset into buf to access memory block)
                        	   252:         ;; Writes:
                        	   253:         ;;  - pacdis (total distance)
                        	   254:         ;;  - pacrem (distance remaining)
                        	   255:         ;;  - 1st & 2nd word of memory block are used for calculations
                        	   256: setnodis:
00:0B4F A5A3            	   257:         lda pacdir
00:0B51 C904            	   258:         cmp #w
00:0B53 D01A            	   259:         bne chkne
00:0B55 A59F            	   260:         lda pactar
00:0B57 C921            	   261:         cmp #wrpnixe            ;eastern warp tunnel node
                        	   262:         jeq warp
00:0B59 D003            	     1M         bne :+
00:0B5B 4CF40B          	     2M         jmp warp
                        	     3M :
00:0B5E A59E            	   263:         lda pacsrc
00:0B60 203C0B          	   264:         jsr nodeadr             
00:0B63 A116            	   265:         lda (buf,x)             ;get source x coord...
00:0B65 48              	   266:         pha                     ;... and stash it on the stack
00:0B66 A59F            	   267:         lda pactar
00:0B68 203C0B          	   268:         jsr nodeadr             ;get target node address
00:0B6B 68              	   269:         pla                     ;restore source x coord
00:0B6C 4CEC0B          	   270:         jmp calcnd
00:0B6F C905            	   271: chkne:  cmp #e
00:0B71 D01A            	   272:         bne chknn
00:0B73 A59F            	   273:         lda pactar
00:0B75 C91B            	   274:         cmp #wrpnixw             ;western warp tunnel node
                        	   275:         jeq warp
00:0B77 D003            	     1M         bne :+
00:0B79 4CF40B          	     2M         jmp warp
                        	     3M :
00:0B7C A59F            	   276:         lda pactar
00:0B7E 203C0B          	   277:         jsr nodeadr             
00:0B81 A116            	   278:         lda (buf,x)             ;get target x coord...
00:0B83 48              	   279:         pha                     ;... and stash it on the stack
00:0B84 A59E            	   280:         lda pacsrc
00:0B86 203C0B          	   281:         jsr nodeadr             ;get source node address
00:0B89 68              	   282:         pla                     ;restore target x coord
00:0B8A 4CEC0B          	   283:         jmp calcnd
00:0B8D C902            	   284: chknn:  cmp #n
00:0B8F D02F            	   285:         bne setnds
00:0B91 A59E            	   286:         lda pacsrc
00:0B93 203C0B          	   287:         jsr nodeadr
                        	   288:         incptrx buf             ;advance pointer; we need y coord
00:0B96 18              	     1M         clc
00:0B97 B516            	     2M         lda buf             ,x
00:0B99 6901            	     3M         adc #1
00:0B9B 9516            	     4M         sta buf             ,x
00:0B9D E8              	     5M         inx
00:0B9E B516            	     6M         lda buf             ,x
00:0BA0 6900            	     7M         adc #0
00:0BA2 9516            	     8M         sta buf             ,x
00:0BA4 CA              	     9M         dex
00:0BA5 A116            	   289:         lda (buf,x)             ;get source y coord...
00:0BA7 48              	   290:         pha                     ;... and stash it on the stack
00:0BA8 A59F            	   291:         lda pactar
00:0BAA 203C0B          	   292:         jsr nodeadr             ;get target node address
                        	   293:         incptrx buf             ;advance pointer; we need y coord
00:0BAD 18              	     1M         clc
00:0BAE B516            	     2M         lda buf             ,x
00:0BB0 6901            	     3M         adc #1
00:0BB2 9516            	     4M         sta buf             ,x
00:0BB4 E8              	     5M         inx
00:0BB5 B516            	     6M         lda buf             ,x
00:0BB7 6900            	     7M         adc #0
00:0BB9 9516            	     8M         sta buf             ,x
00:0BBB CA              	     9M         dex
00:0BBC 68              	   294:         pla                     ;restore source y coord
00:0BBD 4CEC0B          	   295:         jmp calcnd
00:0BC0 A59F            	   296: setnds: lda pactar
00:0BC2 203C0B          	   297:         jsr nodeadr
                        	   298:         incptrx buf             ;advance pointer; we need y coord
00:0BC5 18              	     1M         clc
00:0BC6 B516            	     2M         lda buf             ,x
00:0BC8 6901            	     3M         adc #1
00:0BCA 9516            	     4M         sta buf             ,x
00:0BCC E8              	     5M         inx
00:0BCD B516            	     6M         lda buf             ,x
00:0BCF 6900            	     7M         adc #0
00:0BD1 9516            	     8M         sta buf             ,x
00:0BD3 CA              	     9M         dex
00:0BD4 A116            	   299:         lda (buf,x)             ;get target y coord...
00:0BD6 48              	   300:         pha                     ;... and stash it on the stack
00:0BD7 A59E            	   301:         lda pacsrc
00:0BD9 203C0B          	   302:         jsr nodeadr
                        	   303:         incptrx buf             ;advance pointer; we need y coord
00:0BDC 18              	     1M         clc
00:0BDD B516            	     2M         lda buf             ,x
00:0BDF 6901            	     3M         adc #1
00:0BE1 9516            	     4M         sta buf             ,x
00:0BE3 E8              	     5M         inx
00:0BE4 B516            	     6M         lda buf             ,x
00:0BE6 6900            	     7M         adc #0
00:0BE8 9516            	     8M         sta buf             ,x
00:0BEA CA              	     9M         dex
00:0BEB 68              	   304:         pla                     ;restore target y coord
00:0BEC 38              	   305: calcnd: sec
00:0BED E116            	   306:         sbc (buf,x)
00:0BEF 85A4            	   307:         sta pacdis
00:0BF1 85A5            	   308:         sta pacrem
00:0BF3 60              	   309:         rts
00:0BF4 A900            	   310: warp:   lda #0
00:0BF6 85A4            	   311:         sta pacdis
00:0BF8 85A5            	   312:         sta pacrem
00:0BFA 60              	   313:         rts
                        	   314: 

Source: "src/startup.asm"
                        	    26:         include irq.asm

Source: "irq.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; IRQ handler sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Setup handler for raster IRQ.
                        	     6: setupirq:
00:0BFB 78              	     7:         sei
                        	     8:         ldbimm $7f, ci1icr
00:0BFC A97F            	     1M         lda #$7f
00:0BFE 8D0DDC          	     2M         sta ci1icr
                        	     9:         ldbimm $03, irqmsk ;enable raster IRQ & mob-data collision
00:0C01 A903            	     1M         lda #$03
00:0C03 8D1AD0          	     2M         sta irqmsk 
                        	    10:         ldbimm $1b, scroly
00:0C06 A91B            	     1M         lda #$1b
00:0C08 8D11D0          	     2M         sta scroly
                        	    11:         ldbimm raslin, raster
00:0C0B A9FA            	     1M         lda #raslin
00:0C0D 8D12D0          	     2M         sta raster
                        	    12:         ldwimm procirq, cinv
00:0C10 A91C            	     1M         lda #<procirq
00:0C12 8D1403          	     2M         sta cinv
00:0C15 A90C            	     3M         lda #>procirq
00:0C17 8D1503          	     4M         sta cinv+1
00:0C1A 58              	    13:         cli
00:0C1B 60              	    14:         rts
                        	    15: 
                        	    16:         ;; IRQ handler. Here we handle:
                        	    17:         ;;  - Collisions
                        	    18:         ;;    * between Pac-Man and pellets
                        	    19:         ;;    * between Pac-Man and fruit
                        	    20:         ;;    * between Pac-Man and ghosts
                        	    21:         ;;  - Movement
                        	    22:         ;;    * Updating Pac-Man and ghost sprite coordinates
                        	    23: procirq:
                        	    24:         ;; Read sprite collision registers & save to irqwrd1
                        	    25:         cpbyt spbgcl, irqwrd1
00:0C1C AD1FD0          	     1M         lda spbgcl
00:0C1F 851B            	     2M         sta irqwrd1
                        	    26:         cpbyt spspcl, irqwrd1+1
00:0C21 AD1ED0          	     1M         lda spspcl
00:0C24 851C            	     2M         sta irqwrd1+1
00:0C26 A5A6            	    27:         lda npelrem
00:0C28 D006            	    28:         bne chkirq              ;don't handle IRQ when no pellets left
00:0C2A 0E19D0          	    29:         asl vicirq              ;acknowledge IRQ
00:0C2D 4C7EEA          	    30:         jmp sysirq              ;return from interrupt
                        	    31:         
00:0C30 AD19D0          	    32: chkirq: lda vicirq
00:0C33 2902            	    33:         and #%00000010          ;check for sprite-background collision
                        	    34:         jne bgcol
00:0C35 F003            	     1M         beq :+
00:0C37 4C590C          	     2M         jmp bgcol
                        	     3M :
00:0C3A AD19D0          	    35:         lda vicirq
00:0C3D 2904            	    36:         and #%00000100          ;check for sprite-sprite collision
                        	    37:         jeq fincol
00:0C3F D003            	     1M         bne :+
00:0C41 4CA40C          	     2M         jmp fincol
                        	     3M :
                        	    38: 
                        	    39:         ;; Handle sprite-sprite collision
                        	    40:         ;; HACK: Assume Pac-Man collision with fruit
00:0C44 A51C            	    41: spcol:  lda irqwrd1+1           ;read saved sprite-sprite collision register
00:0C46 2901            	    42:         and #%00000001          ;only interested if Pac-Man sprite was involved
                        	    43:         jeq fincol
00:0C48 D003            	     1M         bne :+
00:0C4A 4CA40C          	     2M         jmp fincol
                        	     3M :
00:0C4D 205311          	    44:         jsr hidefrt             ;hide the fruit
00:0C50 204410          	    45:         jsr scrfrt              ;score the fruit
00:0C53 207B08          	    46:         jsr printscr            ;print the score
                        	    47:         ;; TODO: Show points earned sprite
                        	    48:         ;; (NMI timer to hide after ~1.5s)
00:0C56 4CA40C          	    49:         jmp fincol
                        	    50: 
                        	    51:         ;; Handle sprite-background collision:
                        	    52:         ;; Assume Pac-Man collision with pellet
00:0C59 200E0A          	    53: bgcol:  jsr findpel             ;find pellet collided with & mark as eaten
00:0C5C A51C            	    54:         lda irqwrd1+1           ;load pellet address hi-byte
00:0C5E C9FF            	    55:         cmp #$ff                ;pellet found?
                        	    56:         jeq fincol              ;no, do nothing
00:0C60 D003            	     1M         bne :+
00:0C62 4CA40C          	     2M         jmp fincol              
                        	     3M :
00:0C65 A209            	    57:         ldx #irqblki+4
00:0C67 202C0B          	    58:         jsr isenzr              ;yes, is it an energizer?
00:0C6A D008            	    59:         bne :+
00:0C6C A207            	    60:         ldx #irqblki+2
00:0C6E 205D10          	    61:         jsr screnzr             ;yes, score it
00:0C71 4C790C          	    62:         jmp rmpel
00:0C74 A207            	    63: :       ldx #irqblki+2
00:0C76 205010          	    64:         jsr scrpel              ;no, score as regular pellet
                        	    65: rmpel:  ldwptr irqwrd1, 0, irqwrd2
00:0C79 A000            	     1M         ldy #0
00:0C7B B11B            	     2M         lda (irqwrd1),y
00:0C7D 851D            	     3M         sta irqwrd2
00:0C7F C8              	     4M         iny
00:0C80 B11B            	     5M         lda (irqwrd1),y
00:0C82 851E            	     6M         sta irqwrd2+1
00:0C84 A020            	    66:         ldy #spcechr
00:0C86 201709          	    67:         jsr printchr            ;erase pellet
00:0C89 207B08          	    68:         jsr printscr            ;print score
                        	    69:         ldbimm 6, lvlend        ;set number of level end flashes
00:0C8C A906            	     1M         lda #6
00:0C8E 859B            	     2M         sta lvlend        
00:0C90 C6A6            	    70:         dec npelrem             ;decrement pellets remaining
00:0C92 20E710          	    71:         jsr showfrt             ;conditionally enable bonus fruit
00:0C95 A5A6            	    72:         lda npelrem
                        	    73:         jne fincol
00:0C97 F003            	     1M         beq :+
00:0C99 4CA40C          	     2M         jmp fincol
                        	     3M :
00:0C9C AD15D0          	    74:         lda spena
00:0C9F 2901            	    75:         and #%00000001
00:0CA1 8D15D0          	    76:         sta spena               ;disable all but Pac-Man's sprite
00:0CA4 AD19D0          	    77: fincol: lda vicirq
00:0CA7 2901            	    78:         and #%00000001
00:0CA9 D006            	    79:         bne rasirq              ;check for raster IRQ
00:0CAB 0E19D0          	    80:         asl vicirq              ;acknowledge IRQ
00:0CAE 4C7EEA          	    81:         jmp sysirq              ;return from interrupt
                        	    82: 
                        	    83:         ;; Handle raster IRQ
                        	    84:         ;; Update sprite 0 (Pac-Man) x & y coordinates
00:0CB1 A5A5            	    85: rasirq: lda pacrem
00:0CB3 F025            	    86:         beq finras
00:0CB5 A5A3            	    87:         lda pacdir
00:0CB7 C904            	    88:         cmp #w
00:0CB9 D006            	    89:         bne chkpde
00:0CBB CE00D0          	    90:         dec sp0x
00:0CBE 4CD80C          	    91:         jmp decrem
00:0CC1 C905            	    92: chkpde: cmp #e
00:0CC3 D006            	    93:         bne chkpdn
00:0CC5 EE00D0          	    94:         inc sp0x
00:0CC8 4CD80C          	    95:         jmp decrem
00:0CCB C902            	    96: chkpdn: cmp #n
00:0CCD D006            	    97:         bne pds
00:0CCF CE01D0          	    98:         dec sp0y
00:0CD2 4CD80C          	    99:         jmp decrem
00:0CD5 EE01D0          	   100: pds:    inc sp0y
00:0CD8 C6A5            	   101: decrem: dec pacrem
00:0CDA 0E19D0          	   102: finras: asl vicirq              ;acknowledge IRQ
00:0CDD 4C7EEA          	   103:         jmp sysirq              ;return from interrupt
                        	   104: 

Source: "src/startup.asm"
                        	    27:         include nmi.asm

Source: "nmi.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; NMI handler sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Setup handler for CIA2 timer NMI.
                        	     6: setupnmi:
00:0CE0 78              	     7:         sei
                        	     8:         ldwimm $740d, ti2a              ;timer A fires every ~30ms (PAL)
00:0CE1 A90D            	     1M         lda #<$740d
00:0CE3 8D04DD          	     2M         sta ti2a              
00:0CE6 A974            	     3M         lda #>$740d
00:0CE8 8D05DD          	     4M         sta ti2a              +1
                        	     9:         ldwimm 8, ti2b                  ;timer B fires every ~240ms (PAL)
00:0CEB A908            	     1M         lda #<8
00:0CED 8D06DD          	     2M         sta ti2b                  
00:0CF0 A900            	     3M         lda #>8
00:0CF2 8D07DD          	     4M         sta ti2b                  +1
                        	    10:         ldbimm %00010001, ci2cra
00:0CF5 A911            	     1M         lda #%00010001
00:0CF7 8D0EDD          	     2M         sta ci2cra
                        	    11:         ldbimm %01010001, ci2crb
00:0CFA A951            	     1M         lda #%01010001
00:0CFC 8D0FDD          	     2M         sta ci2crb
00:0CFF AD0DDD          	    12:         lda ci2icr
                        	    13:         ldbimm %10000011, ci2icr        ;allow interrupts from both timers
00:0D02 A983            	     1M         lda #%10000011
00:0D04 8D0DDD          	     2M         sta ci2icr        
                        	    14:         ldbimm 0, pacaix                ;init Pac-Man's animation index
00:0D07 A900            	     1M         lda #0
00:0D09 85AA            	     2M         sta pacaix                
                        	    15:         ldbimm 0, enzraix               ;init energizer animation index
00:0D0B A900            	     1M         lda #0
00:0D0D 85AB            	     2M         sta enzraix               
                        	    16:         ldwimm procnmi, nminv
00:0D0F A91B            	     1M         lda #<procnmi
00:0D11 8D1803          	     2M         sta nminv
00:0D14 A90D            	     3M         lda #>procnmi
00:0D16 8D1903          	     4M         sta nminv+1
00:0D19 58              	    17:         cli
00:0D1A 60              	    18:         rts
                        	    19: 
                        	    20:         ;; NMI handler. Here we animate the various in-game objects such as:
                        	    21:         ;;  - Pac-Man (in-game and death animations)
                        	    22:         ;;  - Energizers (phase)
                        	    23:         ;;  - The ghosts (regular, fright, and death animations)
                        	    24:         ;; We also handle timer events such as:
                        	    25:         ;;  - Fruit (appearance and disappearance)
                        	    26:         ;;  - Ghosts switching between scatter & chase mode
                        	    27: procnmi:
00:0D1B 48              	    28:         pha
                        	    29:         phx
00:0D1C 8A              	     1M         txa
00:0D1D 48              	     2M         pha
                        	    30:         phy                             ;push .A, .X, and .Y onto the stack
00:0D1E 98              	     1M         tya
00:0D1F 48              	     2M         pha
00:0D20 AD0DDD          	    31:         lda ci2icr
00:0D23 A8              	    32:         tay
00:0D24 2902            	    33:         and #%00000010
                        	    34:         jne timbev
00:0D26 F003            	     1M         beq :+
00:0D28 4C900D          	     2M         jmp timbev
                        	     3M :
00:0D2B 98              	    35:         tya
00:0D2C 2901            	    36:         and #%00000001
                        	    37:         jeq sysnmi
00:0D2E D003            	     1M         bne :+
00:0D30 4C56FE          	     2M         jmp sysnmi
                        	     3M :
                        	    38:         
                        	    39:         ;; Timer A fired: animate Pac-Man
00:0D33 A5A6            	    40: timaev: lda npelrem
                        	    41:         jeq finnmi                      ;don't animate PM if all pellets eaten
00:0D35 D003            	     1M         bne :+
00:0D37 4CC70E          	     2M         jmp finnmi                      
                        	     3M :
00:0D3A A5A5            	    42:         lda pacrem
                        	    43:         jeq finnmi                      ;don't animate PM if he's not moving
00:0D3C D003            	     1M         bne :+
00:0D3E 4CC70E          	     2M         jmp finnmi                      
                        	     3M :
00:0D41 E6AA            	    44:         inc pacaix
00:0D43 A4AA            	    45:         ldy pacaix
00:0D45 C006            	    46:         cpy #6                          ;past final animation?
00:0D47 9005            	    47:         bcc :+
                        	    48:         ldbimm 0, pacaix                ;yes, reset animation index
00:0D49 A900            	     1M         lda #0
00:0D4B 85AA            	     2M         sta pacaix                
00:0D4D A8              	    49:         tay
00:0D4E A5A3            	    50: :       lda pacdir                      ;no, check Pac-Man's direction
00:0D50 C902            	    51:         cmp #n
00:0D52 F013            	    52:         beq :+
00:0D54 C903            	    53:         cmp #s
00:0D56 F01A            	    54:         beq :++
00:0D58 C904            	    55:         cmp #w
00:0D5A F021            	    56:         beq :+++
                        	    57:         ldwimm pacalste, nmiwrd1        ;east
00:0D5C A9A7            	     1M         lda #<pacalste
00:0D5E 8520            	     2M         sta nmiwrd1        
00:0D60 A916            	     3M         lda #>pacalste
00:0D62 8521            	     4M         sta nmiwrd1        +1
00:0D64 4C850D          	    58:         jmp ldanim
                        	    59: :       ldwimm pacalstn, nmiwrd1        ;north
00:0D67 A995            	     1M         lda #<pacalstn
00:0D69 8520            	     2M         sta nmiwrd1        
00:0D6B A916            	     3M         lda #>pacalstn
00:0D6D 8521            	     4M         sta nmiwrd1        +1
00:0D6F 4C850D          	    60:         jmp ldanim
                        	    61: :       ldwimm pacalsts, nmiwrd1        ;south
00:0D72 A99B            	     1M         lda #<pacalsts
00:0D74 8520            	     2M         sta nmiwrd1        
00:0D76 A916            	     3M         lda #>pacalsts
00:0D78 8521            	     4M         sta nmiwrd1        +1
00:0D7A 4C850D          	    62:         jmp ldanim
                        	    63: :       ldwimm pacalstw, nmiwrd1        ;west
00:0D7D A9A1            	     1M         lda #<pacalstw
00:0D7F 8520            	     2M         sta nmiwrd1        
00:0D81 A916            	     3M         lda #>pacalstw
00:0D83 8521            	     4M         sta nmiwrd1        +1
00:0D85 18              	    64: ldanim: clc
00:0D86 B120            	    65:         lda (nmiwrd1),y
00:0D88 6940            	    66:         adc #sp0loc
00:0D8A 8DF84F          	    67:         sta sp0ptr
00:0D8D 4CC70E          	    68:         jmp finnmi
                        	    69:         
                        	    70:         ;; Timer B fired:
                        	    71:         ;;  - animate energizers
                        	    72:         ;;  - flash maze on level end
                        	    73:         ;;  - hide fruit
00:0D90 A5A9            	    74: timbev: lda frtena
00:0D92 F00C            	    75:         beq :++                         ;fruit enabled?
00:0D94 C926            	    76:         cmp #frttim
00:0D96 D006            	    77:         bne :+                          ;yes, fruit timer expired?
00:0D98 205311          	    78:         jsr hidefrt                     ;yes, hide fruit
00:0D9B 4CA00D          	    79:         jmp :++
00:0D9E E6A9            	    80: :       inc frtena                      ;no, increment timer
00:0DA0 A5A6            	    81: :       lda npelrem
                        	    82:         jeq flshmaz                     ;all pellets eaten, flash maze
00:0DA2 D003            	     1M         bne :+
00:0DA4 4C0D0E          	     2M         jmp flshmaz                     
                        	     3M :
00:0DA7 A5AB            	    83:         lda enzraix
00:0DA9 F037            	    84:         beq tic
00:0DAB C6AB            	    85:         dec enzraix
00:0DAD A003            	    86:         ldy #3
                        	    87: tocloop:
                        	    88:         jmi finnmi
00:0DAF 1003            	     1M         bpl :+
00:0DB1 4CC70E          	     2M         jmp finnmi
                        	     3M :
                        	    89:         phy                             ;save loop counter onto stack        
00:0DB4 98              	     1M         tya
00:0DB5 48              	     2M         pha
00:0DB6 B99116          	    90:         lda enzrlst,y                   ;load energizer pelltbl index into .A
00:0DB9 A20A            	    91:         ldx #nmiblki
00:0DBB 20BE09          	    92:         jsr pelladr                     ;load pellet address into nmiwrd1
00:0DBE A002            	    93:         ldy #2
00:0DC0 B120            	    94:         lda (nmiwrd1),y                 ;load pellet state
00:0DC2 D006            	    95:         bne :+                          ;has the pellet been eaten?
                        	    96:         ply                             ;yes, next energizer
00:0DC4 68              	     1M         pla
00:0DC5 A8              	     2M         tay
00:0DC6 88              	    97:         dey
00:0DC7 4CAF0D          	    98:         jmp tocloop
                        	    99: :       ldwptr nmiwrd1, 0, nmiwrd2      ;energizer not eaten
00:0DCA A000            	     1M         ldy #0
00:0DCC B120            	     2M         lda (nmiwrd1),y
00:0DCE 8522            	     3M         sta nmiwrd2      
00:0DD0 C8              	     4M         iny
00:0DD1 B120            	     5M         lda (nmiwrd1),y
00:0DD3 8523            	     6M         sta nmiwrd2      +1
00:0DD5 A00F            	   100:         ldy #ltgrey
00:0DD7 A20C            	   101:         ldx #nmiblki+2
00:0DD9 200409          	   102:         jsr printcol                    ;colour energizer light grey
                        	   103:         ply                             ;pop loop counter off the stack
00:0DDC 68              	     1M         pla
00:0DDD A8              	     2M         tay
00:0DDE 88              	   104:         dey
00:0DDF 4CAF0D          	   105:         jmp tocloop
00:0DE2 E6AB            	   106: tic:    inc enzraix
00:0DE4 A003            	   107:         ldy #3
                        	   108: ticloop:
                        	   109:         jmi finnmi
00:0DE6 1003            	     1M         bpl :+
00:0DE8 4CC70E          	     2M         jmp finnmi
                        	     3M :
                        	   110:         phy                             ;push loop counter onto stack
00:0DEB 98              	     1M         tya
00:0DEC 48              	     2M         pha
00:0DED B99116          	   111:         lda enzrlst,y                   ;load energizer pelltbl index into .A
00:0DF0 A20A            	   112:         ldx #nmiblki
00:0DF2 20BE09          	   113:         jsr pelladr                     ;load pellet address into nmiwrd1
                        	   114:         ldwptr nmiwrd1, 0, nmiwrd2
00:0DF5 A000            	     1M         ldy #0
00:0DF7 B120            	     2M         lda (nmiwrd1),y
00:0DF9 8522            	     3M         sta nmiwrd2
00:0DFB C8              	     4M         iny
00:0DFC B120            	     5M         lda (nmiwrd1),y
00:0DFE 8523            	     6M         sta nmiwrd2+1
00:0E00 A00B            	   115:         ldy #dkgrey
00:0E02 A20C            	   116:         ldx #nmiblki+2
00:0E04 200409          	   117:         jsr printcol                    ;colour energizer dark grey
                        	   118:         ply                             ;pop loop counter off the stack
00:0E07 68              	     1M         pla
00:0E08 A8              	     2M         tay
00:0E09 88              	   119:         dey
00:0E0A 4CE60D          	   120:         jmp ticloop
                        	   121: flshmaz:
00:0E0D A59B            	   122:         lda lvlend                      ;read number of flashes remaining
                        	   123:         jeq finnmi
00:0E0F D003            	     1M         bne :+
00:0E11 4CC70E          	     2M         jmp finnmi
                        	     3M :
00:0E14 6A              	   124:         ror
                        	   125:         jcc flshwht                     ;flash white on even, blue on odd
00:0E15 B003            	     1M         bcs :+
00:0E17 4C710E          	     2M         jmp flshwht                     
                        	     3M :
00:0E1A A200            	   126:         ldx #0
                        	   127: setblu1:
00:0E1C BD00D8          	   128:         lda colmem,x                    ;load value in colmem at pos
00:0E1F 290F            	   129:         and #%00001111                  ;mask out high nybble
00:0E21 C901            	   130:         cmp #$01
00:0E23 D005            	   131:         bne :+                          ;is colour = white?
00:0E25 A906            	   132:         lda #$06
00:0E27 9D00D8          	   133:         sta colmem,x                    ;yes, make it blue
00:0E2A E8              	   134: :       inx                     
00:0E2B E0FA            	   135:         cpx #250
00:0E2D D0ED            	   136:         bne setblu1
00:0E2F A200            	   137:         ldx #0
                        	   138: setblu2:
00:0E31 BDFAD8          	   139:         lda colmem+250,x                ;load value in colmem at pos
00:0E34 290F            	   140:         and #%00001111                  ;mask out high nybble
00:0E36 C901            	   141:         cmp #$01
00:0E38 D005            	   142:         bne :+                          ;is colour = white?
00:0E3A A906            	   143:         lda #$06
00:0E3C 9DFAD8          	   144:         sta colmem+250,x                ;yes, make it blue
00:0E3F E8              	   145: :       inx                     
00:0E40 E0FA            	   146:         cpx #250
00:0E42 D0ED            	   147:         bne setblu2
00:0E44 A200            	   148:         ldx #0
                        	   149: setblu3:
00:0E46 BDF4D9          	   150:         lda colmem+500,x                ;load value in colmem at pos
00:0E49 290F            	   151:         and #%00001111                  ;mask out high nybble
00:0E4B C901            	   152:         cmp #$01
00:0E4D D005            	   153:         bne :+                          ;is colour = white?
00:0E4F A906            	   154:         lda #$06
00:0E51 9DF4D9          	   155:         sta colmem+500,x                ;yes, make it blue
00:0E54 E8              	   156: :       inx                     
00:0E55 E0FA            	   157:         cpx #250
00:0E57 D0ED            	   158:         bne setblu3
00:0E59 A200            	   159:         ldx #0
                        	   160: setblu4:
00:0E5B BDEEDA          	   161:         lda colmem+750,x                ;load value in colmem at pos
00:0E5E 290F            	   162:         and #%00001111                  ;mask out high nybble
00:0E60 C901            	   163:         cmp #$01
00:0E62 D005            	   164:         bne :+                          ;is colour = white?
00:0E64 A906            	   165:         lda #$06
00:0E66 9DEEDA          	   166:         sta colmem+750,x                ;yes, make it blue
00:0E69 E8              	   167: :       inx
00:0E6A E0FA            	   168:         cpx #250
00:0E6C D0ED            	   169:         bne setblu4
00:0E6E 4CC50E          	   170:         jmp flshfin
                        	   171: flshwht:
00:0E71 A200            	   172:         ldx #0
                        	   173: setwht1:
00:0E73 BD00D8          	   174:         lda colmem,x                    ;load value in colmem at pos
00:0E76 290F            	   175:         and #%00001111                  ;mask out high nybble
00:0E78 C906            	   176:         cmp #$06
00:0E7A D005            	   177:         bne :+                          ;is colour = blue?
00:0E7C A901            	   178:         lda #$01
00:0E7E 9D00D8          	   179:         sta colmem,x                    ;yes, make it white
00:0E81 E8              	   180: :       inx                     
00:0E82 E0FA            	   181:         cpx #250
00:0E84 D0ED            	   182:         bne setwht1
00:0E86 A200            	   183:         ldx #0
                        	   184: setwht2:
00:0E88 BDFAD8          	   185:         lda colmem+250,x                ;load value in colmem at pos
00:0E8B 290F            	   186:         and #%00001111                  ;mask out high nybble
00:0E8D C906            	   187:         cmp #$06
00:0E8F D005            	   188:         bne :+                          ;is colour = blue?
00:0E91 A901            	   189:         lda #$01
00:0E93 9DFAD8          	   190:         sta colmem+250,x                ;yes, make it white
00:0E96 E8              	   191: :       inx                     
00:0E97 E0FA            	   192:         cpx #250
00:0E99 D0ED            	   193:         bne setwht2
00:0E9B A200            	   194:         ldx #0
                        	   195: setwht3:
00:0E9D BDF4D9          	   196:         lda colmem+500,x                ;load value in colmem at pos
00:0EA0 290F            	   197:         and #%00001111                  ;mask out high nybble
00:0EA2 C906            	   198:         cmp #$06
00:0EA4 D005            	   199:         bne :+                          ;is colour = blue?
00:0EA6 A901            	   200:         lda #$01
00:0EA8 9DF4D9          	   201:         sta colmem+500,x                ;yes, make it white
00:0EAB E8              	   202: :       inx                     
00:0EAC E0FA            	   203:         cpx #250
00:0EAE D0ED            	   204:         bne setwht3
00:0EB0 A200            	   205:         ldx #0
                        	   206: setwht4:
00:0EB2 BDEEDA          	   207:         lda colmem+750,x                ;load value in colmem at pos
00:0EB5 290F            	   208:         and #%00001111                  ;mask out high nybble
00:0EB7 C906            	   209:         cmp #$06
00:0EB9 D005            	   210:         bne :+                          ;is colour = blue?
00:0EBB A901            	   211:         lda #$01
00:0EBD 9DEEDA          	   212:         sta colmem+750,x                ;yes, make it white
00:0EC0 E8              	   213: :       inx                     
00:0EC1 E0FA            	   214:         cpx #250
00:0EC3 D0ED            	   215:         bne setwht4
                        	   216: flshfin:
00:0EC5 C69B            	   217:         dec lvlend                      ;decrement flashes remaining
                        	   218:         
                        	   219:         ;; Restore machine state & return from NMI
                        	   220: finnmi: ply
00:0EC7 68              	     1M         pla
00:0EC8 A8              	     2M         tay
                        	   221:         plx
00:0EC9 68              	     1M         pla
00:0ECA AA              	     2M         tax
00:0ECB 68              	   222:         pla                             ;restore .Y, .X, and .A from stack
00:0ECC 40              	   223:         rti
                        	   224: 

Source: "src/startup.asm"
                        	    28:         include game.asm

Source: "game.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Game-logic related routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Start a new game
                        	     6: newgame:
00:0ECD 20D109          	     7:         jsr fillmaze            ;fill maze with pellets
00:0ED0 20F80E          	     8:         jsr clrzp
                        	     9:         ldbimm maxpell, npelrem
00:0ED3 A9B6            	     1M         lda #maxpell
00:0ED5 85A6            	     2M         sta npelrem
                        	    10:         ldbimm maxmen, nmenrem        
00:0ED7 A903            	     1M         lda #maxmen
00:0ED9 85A7            	     2M         sta nmenrem        
00:0EDB 20230F          	    11:         jsr initpac
00:0EDE 4C5C0F          	    12:         jmp gameloop
                        	    13: 
                        	    14:         ;; Setup next game level
                        	    15: nextlvl:
00:0EE1 E6A8            	    16:         inc lvlnum
00:0EE3 20D109          	    17:         jsr fillmaze
00:0EE6 205709          	    18:         jsr fillcolmem
00:0EE9 20140F          	    19:         jsr clrbuf
                        	    20:         ldbimm maxpell, npelrem
00:0EEC A9B6            	     1M         lda #maxpell
00:0EEE 85A6            	     2M         sta npelrem
                        	    21:         ldbimm 0, frtena
00:0EF0 A900            	     1M         lda #0
00:0EF2 85A9            	     2M         sta frtena
00:0EF4 20230F          	    22:         jsr initpac
00:0EF7 60              	    23:         rts
                        	    24: 
                        	    25:         ;; Clear out ZP memory used to avoid garbage data
                        	    26: clrzp:  filmem $a3, 9, 0        ;$a3 - $ab
00:0EF8 A900            	     1M         lda #0        
00:0EFA A209            	     2M         ldx #9        
00:0EFC F006            	     3M :       beq :+
00:0EFE 95A3            	     4M         sta $a3,x
00:0F00 CA              	     5M         dex
00:0F01 4CFC0E          	     6M         jmp :-
00:0F04 95A3            	     7M :       sta $a3,x
                        	    27:         filmem $f7, 9, 0        ;$f7 - $ff
00:0F06 A900            	     1M         lda #0        
00:0F08 A209            	     2M         ldx #9        
00:0F0A F006            	     3M :       beq :+
00:0F0C 95F7            	     4M         sta $f7,x
00:0F0E CA              	     5M         dex
00:0F0F 4C0A0F          	     6M         jmp :-
00:0F12 95F7            	     7M :       sta $f7,x
                        	    28:         
                        	    29:         ;; Clear out temporary buffer to avoid garbage data
                        	    30: clrbuf: filmem buf, 15, 0       ;$16 - $24
00:0F14 A900            	     1M         lda #0       
00:0F16 A20F            	     2M         ldx #15        
00:0F18 F006            	     3M :       beq :+
00:0F1A 9516            	     4M         sta buf,x
00:0F1C CA              	     5M         dex
00:0F1D 4C180F          	     6M         jmp :-
00:0F20 9516            	     7M :       sta buf,x
00:0F22 60              	    31:         rts
                        	    32: 
                        	    33:         ;; Initialize Pac-Man
                        	    34: initpac:
                        	    35:         ;; Sprite 0: Pac-Man
                        	    36:         ldbimm sp0loc, sp0ptr   ;set sprite 0 pointer
00:0F23 A940            	     1M         lda #sp0loc
00:0F25 8DF84F          	     2M         sta sp0ptr   
00:0F28 AD3F50          	    37:         lda sp0mem+$3f          ;read byte 63
00:0F2B 290F            	    38:         and #%00001111          ;mask out hi nybble
00:0F2D 8D27D0          	    39:         sta sp0col              ;set sprite 0 (Pac-Man) colour        
00:0F30 A931            	    40:         lda #pacstnd
00:0F32 A200            	    41:         ldx #0
00:0F34 203C0B          	    42:         jsr nodeadr             ;get address of Pac's starting node
                        	    43:         ldbptr wrd1, 0, sp0x    ;set Pac's x loc
00:0F37 A000            	     1M         ldy #0
00:0F39 B116            	     2M         lda (wrd1),y
00:0F3B 8D00D0          	     3M         sta sp0x    
                        	    44:         ldbptr wrd1, 1, sp0y    ;set Pac's y loc
00:0F3E A001            	     1M         ldy #1
00:0F40 B116            	     2M         lda (wrd1),y
00:0F42 8D01D0          	     3M         sta sp0y    
00:0F45 A901            	    45:         lda #%00000001
00:0F47 8D15D0          	    46:         sta spena               ;enable sprite 0 (Pac-Man)
                        	    47:         ;; Init Pac's direction & calc distance between source & target nodes
                        	    48:         ldbimm w, pacdir        ;set Pac's initial direction to west
00:0F4A A904            	     1M         lda #w
00:0F4C 85A3            	     2M         sta pacdir        
                        	    49:         ldbimm pacstnd, pacsrc  ;set Pac's starting node as source node
00:0F4E A931            	     1M         lda #pacstnd
00:0F50 859E            	     2M         sta pacsrc  
                        	    50:         ldbptr wrd1, w, pactar  ;set western neighbour as target node
00:0F52 A004            	     1M         ldy #w
00:0F54 B116            	     2M         lda (wrd1),y
00:0F56 859F            	     3M         sta pactar  
00:0F58 204F0B          	    51:         jsr setnodis            ;calculate distance between source & target
00:0F5B 60              	    52:         rts
                        	    53:         
                        	    54:         ;; Main game loop
                        	    55: gameloop:
00:0F5C A5A6            	    56:         lda npelrem             ;check remaining pellets
00:0F5E D00C            	    57:         bne rdinpt              ;if != 0 read joystick input
00:0F60 A2FF            	    58: :       ldx #$ff
00:0F62 CA              	    59: :       dex
00:0F63 D0FD            	    60:         bne :-                  ;delay
00:0F65 A59B            	    61:         lda lvlend              ;check if end level animation finished
00:0F67 D0F7            	    62:         bne :--                 ;no? wait a bit longer
00:0F69 20E10E          	    63:         jsr nextlvl 
00:0F6C 209C09          	    64: rdinpt: jsr readjoy2
00:0F6F A901            	    65:         lda #1
00:0F71 C596            	    66:         cmp joyx
00:0F73 F009            	    67:         beq move
00:0F75 B00E            	    68:         bcs chky
                        	    69:         ldbimm w, tmp
00:0F77 A904            	     1M         lda #w
00:0F79 851A            	     2M         sta tmp
00:0F7B 4C9B0F          	    70:         jmp chkmov
                        	    71: move:   ldbimm e, tmp
00:0F7E A905            	     1M         lda #e
00:0F80 851A            	     2M         sta tmp
00:0F82 4C9B0F          	    72:         jmp chkmov
00:0F85 A901            	    73: chky:   lda #1
00:0F87 C597            	    74:         cmp joyy
00:0F89 F00C            	    75:         beq movs
                        	    76:         jcs setnsrc
00:0F8B 9003            	     1M         bcc :+
00:0F8D 4CFB0F          	     2M         jmp setnsrc
                        	     3M :
                        	    77:         ldbimm n, tmp
00:0F90 A902            	     1M         lda #n
00:0F92 851A            	     2M         sta tmp
00:0F94 4C9B0F          	    78:         jmp chkmov
                        	    79: movs:   ldbimm s, tmp
00:0F97 A903            	     1M         lda #s
00:0F99 851A            	     2M         sta tmp
00:0F9B A5A5            	    80: chkmov: lda pacrem
00:0F9D 38              	    81:         sec
00:0F9E E903            	    82:         sbc #3
                        	    83:         jcs chkrvw
00:0FA0 9003            	     1M         bcc :+
00:0FA2 4CA80F          	     2M         jmp chkrvw
                        	     3M :
00:0FA5 4CFB0F          	    84:         jmp setnsrc
00:0FA8 A5A3            	    85: chkrvw: lda pacdir
00:0FAA C904            	    86:         cmp #w
00:0FAC D00C            	    87:         bne chkrve
00:0FAE A51A            	    88:         lda tmp
00:0FB0 C905            	    89:         cmp #e
                        	    90:         jne setnsrc
00:0FB2 F003            	     1M         beq :+
00:0FB4 4CFB0F          	     2M         jmp setnsrc
                        	     3M :
00:0FB7 4CE30F          	    91:         jmp reverse
00:0FBA C905            	    92: chkrve: cmp #e
00:0FBC D00C            	    93:         bne chkrvn
00:0FBE A51A            	    94:         lda tmp
00:0FC0 C904            	    95:         cmp #w
                        	    96:         jne setnsrc
00:0FC2 F003            	     1M         beq :+
00:0FC4 4CFB0F          	     2M         jmp setnsrc
                        	     3M :
00:0FC7 4CE30F          	    97:         jmp reverse
00:0FCA C902            	    98: chkrvn: cmp #n
00:0FCC D00C            	    99:         bne revs
00:0FCE A51A            	   100:         lda tmp
00:0FD0 C903            	   101:         cmp #s
                        	   102:         jne setnsrc
00:0FD2 F003            	     1M         beq :+
00:0FD4 4CFB0F          	     2M         jmp setnsrc
                        	     3M :
00:0FD7 4CE30F          	   103:         jmp reverse
                        	   104: revs:
00:0FDA A51A            	   105:         lda tmp
00:0FDC C902            	   106:         cmp #n
                        	   107:         jne setnsrc
00:0FDE F003            	     1M         beq :+
00:0FE0 4CFB0F          	     2M         jmp setnsrc
                        	     3M :
                        	   108: reverse:
                        	   109:         cpbyt tmp, pacdir
00:0FE3 A51A            	     1M         lda tmp
00:0FE5 85A3            	     2M         sta pacdir
                        	   110:         swpbyt pacsrc, pactar
00:0FE7 A59E            	     1M         lda pacsrc
00:0FE9 48              	     2M         pha                     ;load byt1 & push onto the stack
00:0FEA A59F            	     3M         lda pactar
00:0FEC 859E            	     4M         sta pacsrc               ;load byt2 & save to byt1
00:0FEE 68              	     5M         pla
00:0FEF 859F            	     6M         sta pactar               ;pop byt1 off the stack & save to byt2
00:0FF1 A5A4            	   111:         lda pacdis
00:0FF3 38              	   112:         sec
00:0FF4 E5A5            	   113:         sbc pacrem
00:0FF6 85A5            	   114:         sta pacrem
00:0FF8 4C5C0F          	   115:         jmp gameloop
                        	   116: 
                        	   117:         ;; Check if Pac-Man arrived at target & set new target
                        	   118: setnsrc:
00:0FFB A5A5            	   119:         lda pacrem
                        	   120:         jne gameloop            ;return to gameloop if pellets remaining
00:0FFD F003            	     1M         beq :+
00:0FFF 4C5C0F          	     2M         jmp gameloop            
                        	     3M :
                        	   121:         cpbyt pactar, pacsrc    ;set target node as new source node
00:1002 A59F            	     1M         lda pactar
00:1004 859E            	     2M         sta pacsrc    
00:1006 A200            	   122:         ldx #blki
00:1008 203C0B          	   123:         jsr nodeadr             ;load node address into wrd1
                        	   124:         ldbptr wrd1, 0, sp0x    ;store node x loc into sp0x
00:100B A000            	     1M         ldy #0
00:100D B116            	     2M         lda (wrd1),y
00:100F 8D00D0          	     3M         sta sp0x    
                        	   125:         ldbptr wrd1, 1, sp0y    ;store node y loc into sp0y
00:1012 A001            	     1M         ldy #1
00:1014 B116            	     2M         lda (wrd1),y
00:1016 8D01D0          	     3M         sta sp0y    
00:1019 A41A            	   126:         ldy tmp                 ;new direction?
00:101B F014            	   127:         beq chkcon              ;no, check for node in current direction
00:101D B116            	   128:         lda (wrd1),y            ;yes, load node in new dir
00:101F C9FF            	   129:         cmp #$ff
00:1021 F00E            	   130:         beq chkcon
00:1023 C91E            	   131:         cmp #gsthmnd
00:1025 F00A            	   132:         beq chkcon
00:1027 859F            	   133:         sta pactar
00:1029 84A3            	   134:         sty pacdir
00:102B 204F0B          	   135:         jsr setnodis
00:102E 4C5C0F          	   136:         jmp gameloop
00:1031 A4A3            	   137: chkcon: ldy pacdir
00:1033 B116            	   138:         lda (wrd1),y
00:1035 C9FF            	   139:         cmp #$ff
                        	   140:         jeq gameloop            ;if nowhere to go, return to gameloop
00:1037 D003            	     1M         bne :+
00:1039 4C5C0F          	     2M         jmp gameloop            
                        	     3M :
00:103C 859F            	   141:         sta pactar              ;set new target...
00:103E 204F0B          	   142:         jsr setnodis            ;... and calculate distance
00:1041 4C5C0F          	   143:         jmp gameloop
                        	   144: 

Source: "src/startup.asm"
                        	    29:         include score.asm

Source: "score.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Score related routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Score fruit (pts vary by level)
                        	     6:         ;; May only be called from IRQ handler!
                        	     7:         ;; Reads:
                        	     8:         ;;  - lvlnum
                        	     9:         ;; Writes:
                        	    10:         ;;  - irqwrd2
                        	    11:         ;;  - score
00:1044 208810          	    12: scrfrt: jsr lvlfrtpts           ;read fruit points
00:1047 841B            	    13:         sty irqwrd1
00:1049 851C            	    14:         sta irqwrd1+1
00:104B A205            	    15:         ldx #irqblki
00:104D 4C6A10          	    16:         jmp addscr
                        	    17:         
                        	    18:         ;; Score pellet (10 pts)
                        	    19:         ;; Reads:
                        	    20:         ;;  - .X (offset to memory block)
                        	    21:         ;; Writes:
                        	    22:         ;;  - score
00:1050 A910            	    23: scrpel: lda #pellpts
00:1052 9516            	    24:         sta buf,x
00:1054 E8              	    25:         inx
00:1055 A900            	    26:         lda #0
00:1057 9516            	    27:         sta buf,x
00:1059 CA              	    28:         dex
00:105A 4C6A10          	    29:         jmp addscr
                        	    30: 
                        	    31:         ;; Score energizer (50 pts)
                        	    32:         ;; Reads:
                        	    33:         ;;  - .X (offset to memory block)
                        	    34:         ;; Writes:
                        	    35:         ;;  - 1st word in memory block
                        	    36:         ;;  - score
                        	    37: screnzr:
00:105D A950            	    38:         lda #enzrpts
00:105F 9516            	    39:         sta buf,x
00:1061 E8              	    40:         inx
00:1062 A900            	    41:         lda #0
00:1064 9516            	    42:         sta buf,x
00:1066 CA              	    43:         dex
00:1067 4C6A10          	    44:         jmp addscr
                        	    45:       
                        	    46:         ;; Add 16-bit BCD value to score
                        	    47:         ;; Reads:
                        	    48:         ;;  - .X: index into buffer to access memory block
                        	    49:         ;;  - 1st word in memory block containing 4 BCD digits
                        	    50:         ;; Writes:
                        	    51:         ;;  - score
00:106A F8              	    52: addscr: sed
00:106B 18              	    53:         clc
00:106C A5FC            	    54:         lda score
00:106E 7516            	    55:         adc buf,x
00:1070 85FC            	    56:         sta score
00:1072 A5FD            	    57:         lda score+1
00:1074 E8              	    58:         inx
00:1075 7516            	    59:         adc buf,x 
00:1077 85FD            	    60:         sta score+1
00:1079 A5FE            	    61:         lda score+2
00:107B 6900            	    62:         adc #0
00:107D 85FE            	    63:         sta score+2
00:107F A5FF            	    64:         lda score+3
00:1081 6900            	    65:         adc #0
00:1083 85FF            	    66:         sta score+3
00:1085 D8              	    67:         cld
00:1086 CA              	    68:         dex
00:1087 60              	    69:         rts
                        	    70: 

Source: "src/startup.asm"
                        	    30:         include fruit.asm

Source: "fruit.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Fruit related sub-routines
                        	     3:         ;; ============================================================
                        	     4: 
                        	     5:         ;; Get fruit bonus points by level number
                        	     6:         ;; Reads:
                        	     7:         ;;  - lvlnum
                        	     8:         ;;  - frtsptbl
                        	     9:         ;; Write:
                        	    10:         ;;  - .Y (points lo-byte)
                        	    11:         ;;  - .A (points hi-byte)
                        	    12:         ;; Clobbers:
                        	    13:         ;;  - .X
                        	    14: lvlfrtpts:
00:1088 A200            	    15:         ldx #0
00:108A BDF216          	    16: :       lda frtsptbl,x
00:108D C5A8            	    17:         cmp lvlnum
00:108F F00D            	    18:         beq :++
00:1091 B009            	    19:         bcs :+
00:1093 E8              	    20:         inx
00:1094 E8              	    21:         inx
00:1095 E8              	    22:         inx
00:1096 E8              	    23:         inx
00:1097 E8              	    24:         inx
00:1098 E8              	    25:         inx
00:1099 4C8A10          	    26:         jmp :-
00:109C A248            	    27: :       ldx #maxftx
00:109E E8              	    28: :       inx
00:109F E8              	    29:         inx
00:10A0 E8              	    30:         inx
00:10A1 E8              	    31:         inx
00:10A2 BDF216          	    32:         lda frtsptbl,x          ;load points (lo)
00:10A5 A8              	    33:         tay
00:10A6 E8              	    34:         inx
00:10A7 BDF216          	    35:         lda frtsptbl,x          ;load points (hi)
00:10AA 60              	    36:         rts
                        	    37: 
                        	    38:         ;; Get fruit sprite index by level number
                        	    39:         ;; Reads:
                        	    40:         ;;  - lvlnum
                        	    41:         ;;  - frtsptbl
                        	    42:         ;; Writes:
                        	    43:         ;;  - .A (fruit sprite index)
                        	    44:         ;; Clobbers:
                        	    45:         ;;  - .X
                        	    46: lvlfrtspix:
00:10AB A200            	    47:         ldx #0
00:10AD BDF216          	    48: :       lda frtsptbl,x
00:10B0 C5A8            	    49:         cmp lvlnum
00:10B2 F00D            	    50:         beq :++
00:10B4 B009            	    51:         bcs :+                  ;found row for level?
00:10B6 E8              	    52:         inx
00:10B7 E8              	    53:         inx
00:10B8 E8              	    54:         inx
00:10B9 E8              	    55:         inx
00:10BA E8              	    56:         inx
00:10BB E8              	    57:         inx
00:10BC 4CAD10          	    58:         jmp :-                  ;no, keep looking
00:10BF A248            	    59: :       ldx #maxftx
00:10C1 E8              	    60: :       inx                     ;yes...
00:10C2 BDF216          	    61:         lda frtsptbl,x          ;...load sprite index
00:10C5 60              	    62:         rts
                        	    63: 
                        	    64:         ;; Get fruit sprite shape memory offset
                        	    65:         ;; Reads:
                        	    66:         ;;  - lvlnum
                        	    67:         ;;  - frtsptbl
                        	    68:         ;; Writes:
                        	    69:         ;;  - .Y (offset lo byte)
                        	    70:         ;;  - .A (offset hi byte)
                        	    71:         ;; Clobbers:
                        	    72:         ;;  - .X
                        	    73: lvlfrtspof:
00:10C6 A200            	    74:         ldx #0
00:10C8 BDF216          	    75: :       lda frtsptbl,x
00:10CB C5A8            	    76:         cmp lvlnum
00:10CD F00D            	    77:         beq :++
00:10CF B009            	    78:         bcs :+                  ;found row for level?
00:10D1 E8              	    79:         inx
00:10D2 E8              	    80:         inx
00:10D3 E8              	    81:         inx
00:10D4 E8              	    82:         inx
00:10D5 E8              	    83:         inx
00:10D6 E8              	    84:         inx
00:10D7 4CC810          	    85:         jmp :-                  ;no, keep looking
00:10DA A248            	    86: :       ldx #maxftx
00:10DC E8              	    87: :       inx                     ;yes...
00:10DD E8              	    88:         inx
00:10DE BDF216          	    89:         lda frtsptbl,x          ;load offset (lo)
00:10E1 A8              	    90:         tay
00:10E2 E8              	    91:         inx
00:10E3 BDF216          	    92:         lda frtsptbl,x          ;load offset (hi)
00:10E6 60              	    93:         rts
                        	    94:         
                        	    95:         ;; Check number of pellets remaining and enable fruit if
                        	    96:         ;; - 130 pellets remaining OR
                        	    97:         ;; - 55 pellets remaining
                        	    98:         ;; May only be called from IRQ handler!
                        	    99:         ;; Clobbers:
                        	   100:         ;;  - irqwrd1
                        	   101: showfrt:
00:10E7 A5A6            	   102:         lda npelrem
00:10E9 C982            	   103:         cmp #130
00:10EB F005            	   104:         beq :+
00:10ED C937            	   105:         cmp #55
00:10EF F001            	   106:         beq :+
00:10F1 60              	   107:         rts
                        	   108:         ;; Set sprite pointers
00:10F2 20AB10          	   109: :       jsr lvlfrtspix          ;find fruit sprite index for level, store in .A
00:10F5 18              	   110:         clc
00:10F6 6940            	   111:         adc #sp0loc
00:10F8 8DF94F          	   112:         sta sp0ptr+1            ;write to sprite 1 pointer
                        	   113:         ina                     ;increment .A
00:10FB A8              	     1M         tay
00:10FC C8              	     2M         iny
00:10FD 98              	     3M         tya
00:10FE 8DFA4F          	   114:         sta sp0ptr+2            ;write to sprite 2 pointer
                        	   115:         ;; Set sprite colours
00:1101 20C610          	   116:         jsr lvlfrtspof          ;find fruit sprite memory offset
00:1104 841B            	   117:         sty irqwrd1             ;save offset (lo) onto irqwrd (lo)
00:1106 851C            	   118:         sta irqwrd1+1           ;save offset (hi) onto irqwrd (hi)
                        	   119:         adcwimm sp0mem, irqwrd1
00:1108 18              	     1M         clc
00:1109 A51B            	     2M         lda irqwrd1
00:110B 6900            	     3M         adc #<sp0mem
00:110D 851B            	     4M         sta irqwrd1
00:110F A51C            	     5M         lda irqwrd1+1
00:1111 6950            	     6M         adc #>sp0mem
00:1113 851C            	     7M         sta irqwrd1+1
00:1115 A03F            	   120:         ldy #$3f                ;index to sprite colour value
00:1117 B11B            	   121:         lda (irqwrd1),y         ;load sprite colour value
00:1119 290F            	   122:         and #%00001111          ;mask out hi nybble
00:111B 8D28D0          	   123:         sta sp0col+1            ;write to sprite 1 colour register
                        	   124:         adcwimm $0040, irqwrd1  ;Add $40 to offset to advance to next sprite
00:111E 18              	     1M         clc
00:111F A51B            	     2M         lda irqwrd1  
00:1121 6940            	     3M         adc #<$0040
00:1123 851B            	     4M         sta irqwrd1  
00:1125 A51C            	     5M         lda irqwrd1  +1
00:1127 6900            	     6M         adc #>$0040
00:1129 851C            	     7M         sta irqwrd1  +1
00:112B B11B            	   125:         lda (irqwrd1),y         ;load sprite colour value
00:112D 290F            	   126:         and #%00001111          ;mask out hi nybble
00:112F 8D29D0          	   127:         sta sp0col+2            ;write to sprite 2 colour register
                        	   128:         ;; Set sprite x,y locations
                        	   129:         ldbimm frxpos, sp1x
00:1132 A967            	     1M         lda #frxpos
00:1134 8D02D0          	     2M         sta sp1x
                        	   130:         ldbimm frxpos, sp2x
00:1137 A967            	     1M         lda #frxpos
00:1139 8D04D0          	     2M         sta sp2x
                        	   131:         ldbimm frypos, sp1y
00:113C A9A2            	     1M         lda #frypos
00:113E 8D03D0          	     2M         sta sp1y
                        	   132:         ldbimm frypos, sp2y
00:1141 A9A2            	     1M         lda #frypos
00:1143 8D05D0          	     2M         sta sp2y
                        	   133:         ;; Enable sprites 1+2
00:1146 AD15D0          	   134:         lda spena
00:1149 0906            	   135:         ora #%00000110
00:114B 8D15D0          	   136:         sta spena
                        	   137:         ;; Start fruit timer countdown
                        	   138:         ldbimm 1, frtena
00:114E A901            	     1M         lda #1
00:1150 85A9            	     2M         sta frtena
00:1152 60              	   139:         rts
                        	   140: 
                        	   141:         ;; Hide fruit
                        	   142: hidefrt:
00:1153 AD15D0          	   143:         lda spena
00:1156 29F9            	   144:         and #%11111001
00:1158 8D15D0          	   145:         sta spena               ;disable sprites 1+2
                        	   146:         ldbimm 0, frtena        ;disable fruit timer
00:115B A900            	     1M         lda #0
00:115D 85A9            	     2M         sta frtena        
00:115F 60              	   147:         rts
                        	   148: 

Source: "src/startup.asm"
                        	    31: 
                        	    32:         ;; Include tables
                        	    33:         .include tables.asm

Source: "tables.asm"
                        	     1:         ;; ============================================================
                        	     2:         ;; Data table definitions
                        	     3:         ;; ============================================================
                        	     4:         
                        	     5:         ;; Node table
                        	     6:         ;; Format:        
                        	     7:         ;;  .byte x,y (node loc in sprite coords)
                        	     8:         ;;  .byte n,s,w,e (indices of neighboring nodes)
                        	     9: nodetbl:
                        	    10:         ;; Row 1
00:1160 20              	    11:         .byte $20,$3a,$ff,$06,$ff,$01
00:1161 3A
00:1162 FF
00:1163 06
00:1164 FF
00:1165 01
00:1166 40              	    12:         .byte $40,$3a,$ff,$07,$00,$02
00:1167 3A
00:1168 FF
00:1169 07
00:116A 00
00:116B 02
00:116C 60              	    13:         .byte $60,$3a,$ff,$09,$01,$ff
00:116D 3A
00:116E FF
00:116F 09
00:1170 01
00:1171 FF
00:1172 70              	    14:         .byte $70,$3a,$ff,$0a,$ff,$04
00:1173 3A
00:1174 FF
00:1175 0A
00:1176 FF
00:1177 04
00:1178 90              	    15:         .byte $90,$3a,$ff,$0c,$03,$05
00:1179 3A
00:117A FF
00:117B 0C
00:117C 03
00:117D 05
00:117E B0              	    16:         .byte $b0,$3a,$ff,$0d,$04,$ff
00:117F 3A
00:1180 FF
00:1181 0D
00:1182 04
00:1183 FF
                        	    17:         ;; Row 2
00:1184 20              	    18:         .byte $20,$52,$00,$0e,$ff,$07
00:1185 52
00:1186 00
00:1187 0E
00:1188 FF
00:1189 07
00:118A 40              	    19:         .byte $40,$52,$01,$0f,$06,$08
00:118B 52
00:118C 01
00:118D 0F
00:118E 06
00:118F 08
00:1190 50              	    20:         .byte $50,$52,$ff,$10,$07,$09
00:1191 52
00:1192 FF
00:1193 10
00:1194 07
00:1195 09
00:1196 60              	    21:         .byte $60,$52,$02,$ff,$08,$0a
00:1197 52
00:1198 02
00:1199 FF
00:119A 08
00:119B 0A
00:119C 70              	    22:         .byte $70,$52,$03,$ff,$09,$0b
00:119D 52
00:119E 03
00:119F FF
00:11A0 09
00:11A1 0B
00:11A2 80              	    23:         .byte $80,$52,$ff,$13,$0a,$0c
00:11A3 52
00:11A4 FF
00:11A5 13
00:11A6 0A
00:11A7 0C
00:11A8 90              	    24:         .byte $90,$52,$04,$14,$0b,$0d
00:11A9 52
00:11AA 04
00:11AB 14
00:11AC 0B
00:11AD 0D
00:11AE B0              	    25:         .byte $b0,$52,$05,$15,$0c,$ff
00:11AF 52
00:11B0 05
00:11B1 15
00:11B2 0C
00:11B3 FF
                        	    26:         ;; Row 3
00:11B4 20              	    27:         .byte $20,$6a,$06,$ff,$ff,$0f
00:11B5 6A
00:11B6 06
00:11B7 FF
00:11B8 FF
00:11B9 0F
00:11BA 40              	    28:         .byte $40,$6a,$07,$1c,$0e,$ff
00:11BB 6A
00:11BC 07
00:11BD 1C
00:11BE 0E
00:11BF FF
00:11C0 50              	    29:         .byte $50,$6a,$08,$ff,$ff,$11
00:11C1 6A
00:11C2 08
00:11C3 FF
00:11C4 FF
00:11C5 11
00:11C6 60              	    30:         .byte $60,$6a,$ff,$17,$10,$ff
00:11C7 6A
00:11C8 FF
00:11C9 17
00:11CA 10
00:11CB FF
00:11CC 70              	    31:         .byte $70,$6a,$ff,$19,$ff,$13
00:11CD 6A
00:11CE FF
00:11CF 19
00:11D0 FF
00:11D1 13
00:11D2 80              	    32:         .byte $80,$6a,$0b,$ff,$12,$ff
00:11D3 6A
00:11D4 0B
00:11D5 FF
00:11D6 12
00:11D7 FF
00:11D8 90              	    33:         .byte $90,$6a,$0c,$20,$ff,$15
00:11D9 6A
00:11DA 0C
00:11DB 20
00:11DC FF
00:11DD 15
00:11DE B0              	    34:         .byte $b0,$6a,$0d,$ff,$14,$ff
00:11DF 6A
00:11E0 0D
00:11E1 FF
00:11E2 14
00:11E3 FF
                        	    35:         ;; Row 4
00:11E4 50              	    36:         .byte $50,$7a,$ff,$1d,$ff,$17
00:11E5 7A
00:11E6 FF
00:11E7 1D
00:11E8 FF
00:11E9 17
00:11EA 60              	    37:         .byte $60,$7a,$11,$ff,$16,$18
00:11EB 7A
00:11EC 11
00:11ED FF
00:11EE 16
00:11EF 18
00:11F0 68              	    38:         .byte $68,$7a,$ff,$1e,$17,$19
00:11F1 7A
00:11F2 FF
00:11F3 1E
00:11F4 17
00:11F5 19
00:11F6 70              	    39:         .byte $70,$7a,$12,$ff,$18,$1a
00:11F7 7A
00:11F8 12
00:11F9 FF
00:11FA 18
00:11FB 1A
00:11FC 80              	    40:         .byte $80,$7a,$ff,$1f,$19,$ff
00:11FD 7A
00:11FE FF
00:11FF 1F
00:1200 19
00:1201 FF
                        	    41:         ;; Row 5
00:1202 18              	    42:         .byte $18,$92,$ff,$ff,$21,$1c
00:1203 92
00:1204 FF
00:1205 FF
00:1206 21
00:1207 1C
00:1208 40              	    43:         .byte $40,$92,$0f,$25,$1b,$1d
00:1209 92
00:120A 0F
00:120B 25
00:120C 1B
00:120D 1D
00:120E 50              	    44:         .byte $50,$92,$16,$22,$1c,$ff
00:120F 92
00:1210 16
00:1211 22
00:1212 1C
00:1213 FF
00:1214 68              	    45:         .byte $68,$92,$18,$ff,$ff,$ff
00:1215 92
00:1216 18
00:1217 FF
00:1218 FF
00:1219 FF
00:121A 80              	    46:         .byte $80,$92,$1a,$23,$ff,$20
00:121B 92
00:121C 1A
00:121D 23
00:121E FF
00:121F 20
00:1220 90              	    47:         .byte $90,$92,$14,$2a,$1f,$21
00:1221 92
00:1222 14
00:1223 2A
00:1224 1F
00:1225 21
00:1226 B8              	    48:         .byte $b8,$92,$ff,$ff,$20,$1b
00:1227 92
00:1228 FF
00:1229 FF
00:122A 20
00:122B 1B
                        	    49:         ;; Row 6
00:122C 50              	    50:         .byte $50,$a2,$1d,$26,$ff,$23
00:122D A2
00:122E 1D
00:122F 26
00:1230 FF
00:1231 23
00:1232 80              	    51:         .byte $80,$a2,$1f,$29,$22,$ff
00:1233 A2
00:1234 1F
00:1235 29
00:1236 22
00:1237 FF
                        	    52:         ;; Row 7
00:1238 20              	    53:         .byte $20,$ba,$ff,$2c,$ff,$25
00:1239 BA
00:123A FF
00:123B 2C
00:123C FF
00:123D 25
00:123E 40              	    54:         .byte $40,$ba,$1c,$2e,$24,$26
00:123F BA
00:1240 1C
00:1241 2E
00:1242 24
00:1243 26
00:1244 50              	    55:         .byte $50,$ba,$22,$ff,$25,$27
00:1245 BA
00:1246 22
00:1247 FF
00:1248 25
00:1249 27
00:124A 60              	    56:         .byte $60,$ba,$ff,$30,$26,$ff
00:124B BA
00:124C FF
00:124D 30
00:124E 26
00:124F FF
00:1250 70              	    57:         .byte $70,$ba,$ff,$32,$ff,$29
00:1251 BA
00:1252 FF
00:1253 32
00:1254 FF
00:1255 29
00:1256 80              	    58:         .byte $80,$ba,$23,$ff,$28,$2a
00:1257 BA
00:1258 23
00:1259 FF
00:125A 28
00:125B 2A
00:125C 90              	    59:         .byte $90,$ba,$20,$34,$29,$2b
00:125D BA
00:125E 20
00:125F 34
00:1260 29
00:1261 2B
00:1262 B0              	    60:         .byte $b0,$ba,$ff,$36,$2a,$ff
00:1263 BA
00:1264 FF
00:1265 36
00:1266 2A
00:1267 FF
                        	    61:         ;; Row 8
00:1268 20              	    62:         .byte $20,$ca,$24,$ff,$ff,$2d
00:1269 CA
00:126A 24
00:126B FF
00:126C FF
00:126D 2D
00:126E 30              	    63:         .byte $30,$ca,$ff,$38,$2c,$ff
00:126F CA
00:1270 FF
00:1271 38
00:1272 2C
00:1273 FF
00:1274 40              	    64:         .byte $40,$ca,$25,$39,$ff,$2f
00:1275 CA
00:1276 25
00:1277 39
00:1278 FF
00:1279 2F
00:127A 50              	    65:         .byte $50,$ca,$ff,$3a,$2e,$30
00:127B CA
00:127C FF
00:127D 3A
00:127E 2E
00:127F 30
00:1280 60              	    66:         .byte $60,$ca,$27,$ff,$2f,$31
00:1281 CA
00:1282 27
00:1283 FF
00:1284 2F
00:1285 31
00:1286 68              	    67:         .byte $68,$ca,$ff,$ff,$30,$32
00:1287 CA
00:1288 FF
00:1289 FF
00:128A 30
00:128B 32
00:128C 70              	    68:         .byte $70,$ca,$28,$ff,$31,$33
00:128D CA
00:128E 28
00:128F FF
00:1290 31
00:1291 33
00:1292 80              	    69:         .byte $80,$ca,$ff,$3d,$32,$34
00:1293 CA
00:1294 FF
00:1295 3D
00:1296 32
00:1297 34
00:1298 90              	    70:         .byte $90,$ca,$2a,$3e,$33,$ff
00:1299 CA
00:129A 2A
00:129B 3E
00:129C 33
00:129D FF
00:129E A0              	    71:         .byte $a0,$ca,$ff,$3f,$ff,$36
00:129F CA
00:12A0 FF
00:12A1 3F
00:12A2 FF
00:12A3 36
00:12A4 B0              	    72:         .byte $b0,$ca,$2b,$ff,$35,$ff
00:12A5 CA
00:12A6 2B
00:12A7 FF
00:12A8 35
00:12A9 FF
                        	    73:         ;; Row 9
00:12AA 20              	    74:         .byte $20,$da,$ff,$41,$ff,$38
00:12AB DA
00:12AC FF
00:12AD 41
00:12AE FF
00:12AF 38
00:12B0 30              	    75:         .byte $30,$da,$2d,$ff,$37,$39
00:12B1 DA
00:12B2 2D
00:12B3 FF
00:12B4 37
00:12B5 39
00:12B6 40              	    76:         .byte $40,$da,$2e,$ff,$38,$ff
00:12B7 DA
00:12B8 2E
00:12B9 FF
00:12BA 38
00:12BB FF
00:12BC 50              	    77:         .byte $50,$da,$2f,$ff,$ff,$3b
00:12BD DA
00:12BE 2F
00:12BF FF
00:12C0 FF
00:12C1 3B
00:12C2 60              	    78:         .byte $60,$da,$ff,$42,$3a,$ff
00:12C3 DA
00:12C4 FF
00:12C5 42
00:12C6 3A
00:12C7 FF
00:12C8 70              	    79:         .byte $70,$da,$ff,$43,$ff,$3d
00:12C9 DA
00:12CA FF
00:12CB 43
00:12CC FF
00:12CD 3D
00:12CE 80              	    80:         .byte $80,$da,$33,$ff,$3c,$ff
00:12CF DA
00:12D0 33
00:12D1 FF
00:12D2 3C
00:12D3 FF
00:12D4 90              	    81:         .byte $90,$da,$34,$ff,$ff,$3f
00:12D5 DA
00:12D6 34
00:12D7 FF
00:12D8 FF
00:12D9 3F
00:12DA A0              	    82:         .byte $a0,$da,$35,$ff,$3e,$40
00:12DB DA
00:12DC 35
00:12DD FF
00:12DE 3E
00:12DF 40
00:12E0 B0              	    83:         .byte $b0,$da,$ff,$44,$3f,$ff
00:12E1 DA
00:12E2 FF
00:12E3 44
00:12E4 3F
00:12E5 FF
                        	    84:         ;; Row 10
00:12E6 20              	    85:         .byte $20,$ea,$37,$ff,$ff,$42
00:12E7 EA
00:12E8 37
00:12E9 FF
00:12EA FF
00:12EB 42
00:12EC 60              	    86:         .byte $60,$ea,$3b,$ff,$41,$43
00:12ED EA
00:12EE 3B
00:12EF FF
00:12F0 41
00:12F1 43
00:12F2 70              	    87:         .byte $70,$ea,$3c,$ff,$42,$44
00:12F3 EA
00:12F4 3C
00:12F5 FF
00:12F6 42
00:12F7 44
00:12F8 B0              	    88:         .byte $b0,$ea,$40,$ff,$43,$ff
00:12F9 EA
00:12FA 40
00:12FB FF
00:12FC 43
00:12FD FF
                        	    89: 
                        	    90: 
                        	    91:         ;; Pellet table
                        	    92:         ;; Format:        
                        	    93:         ;;  .word address (screen memory address)
                        	    94:         ;;  .byte status (0=eaten, 1=not eaten)
                        	    95:         ;;  .byte x,y (sprite coordinates of char)
                        	    96: pelltbl:
                        	    97:         ;; Row 1
00:12FE 2900            	    98:         .word $0029
00:1300 01              	    99:         .byte 1,$20,$3a
00:1301 20
00:1302 3A
00:1303 2A00            	   100:         .word $002a
00:1305 01              	   101:         .byte 1,$28,$3a
00:1306 28
00:1307 3A
00:1308 2B00            	   102:         .word $002b
00:130A 01              	   103:         .byte 1,$30,$3a
00:130B 30
00:130C 3A
00:130D 2C00            	   104:         .word $002c
00:130F 01              	   105:         .byte 1,$38,$3a
00:1310 38
00:1311 3A
00:1312 2D00            	   106:         .word $002d
00:1314 01              	   107:         .byte 1,$40,$3a
00:1315 40
00:1316 3A
00:1317 2E00            	   108:         .word $002e
00:1319 01              	   109:         .byte 1,$48,$3a
00:131A 48
00:131B 3A
00:131C 2F00            	   110:         .word $002f
00:131E 01              	   111:         .byte 1,$50,$3a
00:131F 50
00:1320 3A
00:1321 3000            	   112:         .word $0030
00:1323 01              	   113:         .byte 1,$58,$3a
00:1324 58
00:1325 3A
00:1326 3100            	   114:         .word $0031
00:1328 01              	   115:         .byte 1,$60,$3a
00:1329 60
00:132A 3A
00:132B 3300            	   116:         .word $0033
00:132D 01              	   117:         .byte 1,$70,$3a
00:132E 70
00:132F 3A
00:1330 3400            	   118:         .word $0034
00:1332 01              	   119:         .byte 1,$78,$3a
00:1333 78
00:1334 3A
00:1335 3500            	   120:         .word $0035
00:1337 01              	   121:         .byte 1,$80,$3a
00:1338 80
00:1339 3A
00:133A 3600            	   122:         .word $0036
00:133C 01              	   123:         .byte 1,$88,$3a
00:133D 88
00:133E 3A
00:133F 3700            	   124:         .word $0037
00:1341 01              	   125:         .byte 1,$90,$3a
00:1342 90
00:1343 3A
00:1344 3800            	   126:         .word $0038
00:1346 01              	   127:         .byte 1,$98,$3a
00:1347 98
00:1348 3A
00:1349 3900            	   128:         .word $0039
00:134B 01              	   129:         .byte 1,$a0,$3a
00:134C A0
00:134D 3A
00:134E 3A00            	   130:         .word $003a
00:1350 01              	   131:         .byte 1,$a8,$3a
00:1351 A8
00:1352 3A
00:1353 3B00            	   132:         .word $003b
00:1355 01              	   133:         .byte 1,$b0,$3a
00:1356 B0
00:1357 3A
                        	   134:         ;; Row 2
00:1358 5100            	   135:         .word $0051
00:135A 01              	   136:         .byte 1,$20,$42          ;energizer
00:135B 20
00:135C 42
00:135D 5500            	   137:         .word $0055
00:135F 01              	   138:         .byte 1,$40,$42
00:1360 40
00:1361 42
00:1362 5900            	   139:         .word $0059
00:1364 01              	   140:         .byte 1,$60,$42
00:1365 60
00:1366 42
00:1367 5B00            	   141:         .word $005b
00:1369 01              	   142:         .byte 1,$70,$42
00:136A 70
00:136B 42
00:136C 5F00            	   143:         .word $005f
00:136E 01              	   144:         .byte 1,$90,$42
00:136F 90
00:1370 42
00:1371 6300            	   145:         .word $0063
00:1373 01              	   146:         .byte 1,$b0,$42          ;energizer
00:1374 B0
00:1375 42
                        	   147:         ;; Row 3
00:1376 7900            	   148:         .word $0079
00:1378 01              	   149:         .byte 1,$20,$4a
00:1379 20
00:137A 4A
00:137B 7D00            	   150:         .word $007d
00:137D 01              	   151:         .byte 1,$40,$4a
00:137E 40
00:137F 4A
00:1380 8100            	   152:         .word $0081
00:1382 01              	   153:         .byte 1,$60,$4a
00:1383 60
00:1384 4A
00:1385 8300            	   154:         .word $0083
00:1387 01              	   155:         .byte 1,$70,$4a
00:1388 70
00:1389 4A
00:138A 8700            	   156:         .word $0087
00:138C 01              	   157:         .byte 1,$90,$4a
00:138D 90
00:138E 4A
00:138F 8B00            	   158:         .word $008b
00:1391 01              	   159:         .byte 1,$b0,$4a
00:1392 B0
00:1393 4A
                        	   160:         ;; Row 4
00:1394 A100            	   161:         .word $00a1
00:1396 01              	   162:         .byte 1,$20,$52
00:1397 20
00:1398 52
00:1399 A200            	   163:         .word $00a2
00:139B 01              	   164:         .byte 1,$28,$52
00:139C 28
00:139D 52
00:139E A300            	   165:         .word $00a3
00:13A0 01              	   166:         .byte 1,$30,$52
00:13A1 30
00:13A2 52
00:13A3 A400            	   167:         .word $00a4
00:13A5 01              	   168:         .byte 1,$38,$52
00:13A6 38
00:13A7 52
00:13A8 A500            	   169:         .word $00a5
00:13AA 01              	   170:         .byte 1,$40,$52
00:13AB 40
00:13AC 52
00:13AD A600            	   171:         .word $00a6
00:13AF 01              	   172:         .byte 1,$48,$52
00:13B0 48
00:13B1 52
00:13B2 A700            	   173:         .word $00a7
00:13B4 01              	   174:         .byte 1,$50,$52
00:13B5 50
00:13B6 52
00:13B7 A800            	   175:         .word $00a8
00:13B9 01              	   176:         .byte 1,$58,$52
00:13BA 58
00:13BB 52
00:13BC A900            	   177:         .word $00a9
00:13BE 01              	   178:         .byte 1,$60,$52
00:13BF 60
00:13C0 52
00:13C1 AA00            	   179:         .word $00aa
00:13C3 01              	   180:         .byte 1,$68,$52
00:13C4 68
00:13C5 52
00:13C6 AB00            	   181:         .word $00ab
00:13C8 01              	   182:         .byte 1,$70,$52
00:13C9 70
00:13CA 52
00:13CB AC00            	   183:         .word $00ac
00:13CD 01              	   184:         .byte 1,$78,$52
00:13CE 78
00:13CF 52
00:13D0 AD00            	   185:         .word $00ad
00:13D2 01              	   186:         .byte 1,$80,$52
00:13D3 80
00:13D4 52
00:13D5 AE00            	   187:         .word $00ae
00:13D7 01              	   188:         .byte 1,$88,$52
00:13D8 88
00:13D9 52
00:13DA AF00            	   189:         .word $00af
00:13DC 01              	   190:         .byte 1,$90,$52
00:13DD 90
00:13DE 52
00:13DF B000            	   191:         .word $00b0
00:13E1 01              	   192:         .byte 1,$98,$52
00:13E2 98
00:13E3 52
00:13E4 B100            	   193:         .word $00b1
00:13E6 01              	   194:         .byte 1,$a0,$52
00:13E7 A0
00:13E8 52
00:13E9 B200            	   195:         .word $00b2
00:13EB 01              	   196:         .byte 1,$a8,$52
00:13EC A8
00:13ED 52
00:13EE B300            	   197:         .word $00b3
00:13F0 01              	   198:         .byte 1,$b0,$52
00:13F1 B0
00:13F2 52
                        	   199:         ;; Row 5
00:13F3 C900            	   200:         .word $00c9
00:13F5 01              	   201:         .byte 1,$20,$5a
00:13F6 20
00:13F7 5A
00:13F8 CD00            	   202:         .word $00cd
00:13FA 01              	   203:         .byte 1,$40,$5a
00:13FB 40
00:13FC 5A
00:13FD CF00            	   204:         .word $00cf
00:13FF 01              	   205:         .byte 1,$50,$5a
00:1400 50
00:1401 5A
00:1402 D500            	   206:         .word $00d5
00:1404 01              	   207:         .byte 1,$80,$5a
00:1405 80
00:1406 5A
00:1407 D700            	   208:         .word $00d7
00:1409 01              	   209:         .byte 1,$90,$5a
00:140A 90
00:140B 5A
00:140C DB00            	   210:         .word $00db
00:140E 01              	   211:         .byte 1,$b0,$5a
00:140F B0
00:1410 5A
                        	   212:         ;; Row 6
00:1411 F100            	   213:         .word $00f1
00:1413 01              	   214:         .byte 1,$20,$62
00:1414 20
00:1415 62
00:1416 F500            	   215:         .word $00f5
00:1418 01              	   216:         .byte 1,$40,$62
00:1419 40
00:141A 62
00:141B F700            	   217:         .word $00f7
00:141D 01              	   218:         .byte 1,$50,$62
00:141E 50
00:141F 62
00:1420 FD00            	   219:         .word $00fd
00:1422 01              	   220:         .byte 1,$80,$62
00:1423 80
00:1424 62
00:1425 FF00            	   221:         .word $00ff
00:1427 01              	   222:         .byte 1,$90,$62
00:1428 90
00:1429 62
00:142A 0301            	   223:         .word $0103
00:142C 01              	   224:         .byte 1,$b0,$62
00:142D B0
00:142E 62
                        	   225:         ;; Row 7
00:142F 1901            	   226:         .word $0119
00:1431 01              	   227:         .byte 1,$20,$6a
00:1432 20
00:1433 6A
00:1434 1A01            	   228:         .word $011a
00:1436 01              	   229:         .byte 1,$28,$6a
00:1437 28
00:1438 6A
00:1439 1B01            	   230:         .word $011b
00:143B 01              	   231:         .byte 1,$30,$6a
00:143C 30
00:143D 6A
00:143E 1C01            	   232:         .word $011c
00:1440 01              	   233:         .byte 1,$38,$6a
00:1441 38
00:1442 6A
00:1443 1D01            	   234:         .word $011d
00:1445 01              	   235:         .byte 1,$40,$6a
00:1446 40
00:1447 6A
00:1448 1F01            	   236:         .word $011f
00:144A 01              	   237:         .byte 1,$50,$6a
00:144B 50
00:144C 6A
00:144D 2001            	   238:         .word $0120
00:144F 01              	   239:         .byte 1,$58,$6a
00:1450 58
00:1451 6A
00:1452 2101            	   240:         .word $0121
00:1454 01              	   241:         .byte 1,$60,$6a
00:1455 60
00:1456 6A
00:1457 2301            	   242:         .word $0123
00:1459 01              	   243:         .byte 1,$70,$6a
00:145A 70
00:145B 6A
00:145C 2401            	   244:         .word $0124
00:145E 01              	   245:         .byte 1,$78,$6a
00:145F 78
00:1460 6A
00:1461 2501            	   246:         .word $0125
00:1463 01              	   247:         .byte 1,$80,$6a
00:1464 80
00:1465 6A
00:1466 2701            	   248:         .word $0127
00:1468 01              	   249:         .byte 1,$90,$6a
00:1469 90
00:146A 6A
00:146B 2801            	   250:         .word $0128
00:146D 01              	   251:         .byte 1,$98,$6a
00:146E 98
00:146F 6A
00:1470 2901            	   252:         .word $0129
00:1472 01              	   253:         .byte 1,$a0,$6a
00:1473 A0
00:1474 6A
00:1475 2A01            	   254:         .word $012a
00:1477 01              	   255:         .byte 1,$a8,$6a
00:1478 A8
00:1479 6A
00:147A 2B01            	   256:         .word $012b
00:147C 01              	   257:         .byte 1,$b0,$6a
00:147D B0
00:147E 6A
                        	   258:         ;; Row 8
00:147F 4501            	   259:         .word $0145
00:1481 01              	   260:         .byte 1,$40,$72
00:1482 40
00:1483 72
00:1484 4901            	   261:         .word $0149
00:1486 01              	   262:         .byte 1,$60,$72
00:1487 60
00:1488 72
00:1489 4B01            	   263:         .word $014b
00:148B 01              	   264:         .byte 1,$70,$72
00:148C 70
00:148D 72
00:148E 4F01            	   265:         .word $014f
00:1490 01              	   266:         .byte 1,$90,$72
00:1491 90
00:1492 72
                        	   267:         ;; Row 9
00:1493 6D01            	   268:         .word $016d
00:1495 01              	   269:         .byte 1,$40,$7a
00:1496 40
00:1497 7A
00:1498 7701            	   270:         .word $0177
00:149A 01              	   271:         .byte 1,$90,$7a
00:149B 90
00:149C 7A
                        	   272:         ;; Row 10
00:149D 9501            	   273:         .word $0195
00:149F 01              	   274:         .byte 1,$40,$82
00:14A0 40
00:14A1 82
00:14A2 9F01            	   275:         .word $019f
00:14A4 01              	   276:         .byte 1,$90,$82
00:14A5 90
00:14A6 82
                        	   277:         ;; Row 11
00:14A7 BD01            	   278:         .word $01bd
00:14A9 01              	   279:         .byte 1,$40,$8a
00:14AA 40
00:14AB 8A
00:14AC C701            	   280:         .word $01c7
00:14AE 01              	   281:         .byte 1,$90,$8a
00:14AF 90
00:14B0 8A
                        	   282:         ;; Row 12
00:14B1 E501            	   283:         .word $01e5
00:14B3 01              	   284:         .byte 1,$40,$92
00:14B4 40
00:14B5 92
00:14B6 EF01            	   285:         .word $01ef
00:14B8 01              	   286:         .byte 1,$90,$92
00:14B9 90
00:14BA 92
                        	   287:         ;; Row 13
00:14BB 0D02            	   288:         .word $020d
00:14BD 01              	   289:         .byte 1,$40,$9a
00:14BE 40
00:14BF 9A
00:14C0 1702            	   290:         .word $0217
00:14C2 01              	   291:         .byte 1,$90,$9a
00:14C3 90
00:14C4 9A
                        	   292:         ;; Row 14
00:14C5 3502            	   293:         .word $0235
00:14C7 01              	   294:         .byte 1,$40,$a2
00:14C8 40
00:14C9 A2
00:14CA 3F02            	   295:         .word $023f
00:14CC 01              	   296:         .byte 1,$90,$a2
00:14CD 90
00:14CE A2
                        	   297:         ;; Row 15
00:14CF 5D02            	   298:         .word $025d
00:14D1 01              	   299:         .byte 1,$40,$aa
00:14D2 40
00:14D3 AA
00:14D4 6702            	   300:         .word $0267
00:14D6 01              	   301:         .byte 1,$90,$aa
00:14D7 90
00:14D8 AA
                        	   302:         ;; Row 16
00:14D9 8502            	   303:         .word $0285
00:14DB 01              	   304:         .byte 1,$40,$b2
00:14DC 40
00:14DD B2
00:14DE 8F02            	   305:         .word $028f
00:14E0 01              	   306:         .byte 1,$90,$b2
00:14E1 90
00:14E2 B2
                        	   307:         ;; Row 17
00:14E3 A902            	   308:         .word $02a9
00:14E5 01              	   309:         .byte 1,$20,$ba
00:14E6 20
00:14E7 BA
00:14E8 AA02            	   310:         .word $02aa
00:14EA 01              	   311:         .byte 1,$28,$ba
00:14EB 28
00:14EC BA
00:14ED AB02            	   312:         .word $02ab
00:14EF 01              	   313:         .byte 1,$30,$ba
00:14F0 30
00:14F1 BA
00:14F2 AC02            	   314:         .word $02ac
00:14F4 01              	   315:         .byte 1,$38,$ba
00:14F5 38
00:14F6 BA
00:14F7 AD02            	   316:         .word $02ad
00:14F9 01              	   317:         .byte 1,$40,$ba
00:14FA 40
00:14FB BA
00:14FC AE02            	   318:         .word $02ae
00:14FE 01              	   319:         .byte 1,$48,$ba
00:14FF 48
00:1500 BA
00:1501 AF02            	   320:         .word $02af
00:1503 01              	   321:         .byte 1,$50,$ba
00:1504 50
00:1505 BA
00:1506 B002            	   322:         .word $02b0
00:1508 01              	   323:         .byte 1,$58,$ba
00:1509 58
00:150A BA
00:150B B102            	   324:         .word $02b1
00:150D 01              	   325:         .byte 1,$60,$ba
00:150E 60
00:150F BA
00:1510 B302            	   326:         .word $02b3
00:1512 01              	   327:         .byte 1,$70,$ba
00:1513 70
00:1514 BA
00:1515 B402            	   328:         .word $02b4
00:1517 01              	   329:         .byte 1,$78,$ba
00:1518 78
00:1519 BA
00:151A B502            	   330:         .word $02b5
00:151C 01              	   331:         .byte 1,$80,$ba
00:151D 80
00:151E BA
00:151F B602            	   332:         .word $02b6
00:1521 01              	   333:         .byte 1,$88,$ba
00:1522 88
00:1523 BA
00:1524 B702            	   334:         .word $02b7
00:1526 01              	   335:         .byte 1,$90,$ba
00:1527 90
00:1528 BA
00:1529 B802            	   336:         .word $02b8
00:152B 01              	   337:         .byte 1,$98,$ba
00:152C 98
00:152D BA
00:152E B902            	   338:         .word $02b9
00:1530 01              	   339:         .byte 1,$a0,$ba
00:1531 A0
00:1532 BA
00:1533 BA02            	   340:         .word $02ba
00:1535 01              	   341:         .byte 1,$a8,$ba
00:1536 A8
00:1537 BA
00:1538 BB02            	   342:         .word $02bb
00:153A 01              	   343:         .byte 1,$b0,$ba
00:153B B0
00:153C BA
                        	   344:         ;; Row 18
00:153D D102            	   345:         .word $02d1
00:153F 01              	   346:         .byte 1,$20,$c2
00:1540 20
00:1541 C2
00:1542 D502            	   347:         .word $02d5
00:1544 01              	   348:         .byte 1,$40,$c2
00:1545 40
00:1546 C2
00:1547 D902            	   349:         .word $02d9
00:1549 01              	   350:         .byte 1,$60,$c2
00:154A 60
00:154B C2
00:154C DB02            	   351:         .word $02db
00:154E 01              	   352:         .byte 1,$70,$c2
00:154F 70
00:1550 C2
00:1551 DF02            	   353:         .word $02df
00:1553 01              	   354:         .byte 1,$90,$c2
00:1554 90
00:1555 C2
00:1556 E302            	   355:         .word $02e3
00:1558 01              	   356:         .byte 1,$b0,$c2
00:1559 B0
00:155A C2
                        	   357:         ;; Row 19
00:155B F902            	   358:         .word $02f9
00:155D 01              	   359:         .byte 1,$20,$ca          ;energizer
00:155E 20
00:155F CA
00:1560 FA02            	   360:         .word $02fa
00:1562 01              	   361:         .byte 1,$28,$ca
00:1563 28
00:1564 CA
00:1565 FB02            	   362:         .word $02fb
00:1567 01              	   363:         .byte 1,$30,$ca
00:1568 30
00:1569 CA
00:156A FD02            	   364:         .word $02fd
00:156C 01              	   365:         .byte 1,$40,$ca
00:156D 40
00:156E CA
00:156F FE02            	   366:         .word $02fe
00:1571 01              	   367:         .byte 1,$48,$ca
00:1572 48
00:1573 CA
00:1574 FF02            	   368:         .word $02ff
00:1576 01              	   369:         .byte 1,$50,$ca
00:1577 50
00:1578 CA
00:1579 0003            	   370:         .word $0300
00:157B 01              	   371:         .byte 1,$58,$ca
00:157C 58
00:157D CA
00:157E 0103            	   372:         .word $0301
00:1580 01              	   373:         .byte 1,$60,$ca
00:1581 60
00:1582 CA
00:1583 0303            	   374:         .word $0303
00:1585 01              	   375:         .byte 1,$70,$ca
00:1586 70
00:1587 CA
00:1588 0403            	   376:         .word $0304
00:158A 01              	   377:         .byte 1,$78,$ca
00:158B 78
00:158C CA
00:158D 0503            	   378:         .word $0305
00:158F 01              	   379:         .byte 1,$80,$ca
00:1590 80
00:1591 CA
00:1592 0603            	   380:         .word $0306
00:1594 01              	   381:         .byte 1,$88,$ca
00:1595 88
00:1596 CA
00:1597 0703            	   382:         .word $0307
00:1599 01              	   383:         .byte 1,$90,$ca
00:159A 90
00:159B CA
00:159C 0903            	   384:         .word $0309
00:159E 01              	   385:         .byte 1,$a0,$ca
00:159F A0
00:15A0 CA
00:15A1 0A03            	   386:         .word $030a
00:15A3 01              	   387:         .byte 1,$a8,$ca
00:15A4 A8
00:15A5 CA
00:15A6 0B03            	   388:         .word $030b
00:15A8 01              	   389:         .byte 1,$b0,$ca          ;energizer
00:15A9 B0
00:15AA CA
                        	   390:         ;; Row 20
00:15AB 2303            	   391:         .word $0323
00:15AD 01              	   392:         .byte 1,$30,$d2
00:15AE 30
00:15AF D2
00:15B0 2503            	   393:         .word $0325
00:15B2 01              	   394:         .byte 1,$40,$d2
00:15B3 40
00:15B4 D2
00:15B5 2703            	   395:         .word $0327
00:15B7 01              	   396:         .byte 1,$50,$d2
00:15B8 50
00:15B9 D2
00:15BA 2D03            	   397:         .word $032d
00:15BC 01              	   398:         .byte 1,$80,$d2
00:15BD 80
00:15BE D2
00:15BF 2F03            	   399:         .word $032f
00:15C1 01              	   400:         .byte 1,$90,$d2
00:15C2 90
00:15C3 D2
00:15C4 3103            	   401:         .word $0331
00:15C6 01              	   402:         .byte 1,$a0,$d2
00:15C7 A0
00:15C8 D2
                        	   403:         ;; Row 21
00:15C9 4903            	   404:         .word $0349
00:15CB 01              	   405:         .byte 1,$20,$da
00:15CC 20
00:15CD DA
00:15CE 4A03            	   406:         .word $034a
00:15D0 01              	   407:         .byte 1,$28,$da
00:15D1 28
00:15D2 DA
00:15D3 4B03            	   408:         .word $034b
00:15D5 01              	   409:         .byte 1,$30,$da
00:15D6 30
00:15D7 DA
00:15D8 4C03            	   410:         .word $034c
00:15DA 01              	   411:         .byte 1,$38,$da
00:15DB 38
00:15DC DA
00:15DD 4D03            	   412:         .word $034d
00:15DF 01              	   413:         .byte 1,$40,$da
00:15E0 40
00:15E1 DA
00:15E2 4F03            	   414:         .word $034f
00:15E4 01              	   415:         .byte 1,$50,$da
00:15E5 50
00:15E6 DA
00:15E7 5003            	   416:         .word $0350
00:15E9 01              	   417:         .byte 1,$58,$da
00:15EA 58
00:15EB DA
00:15EC 5103            	   418:         .word $0351
00:15EE 01              	   419:         .byte 1,$60,$da
00:15EF 60
00:15F0 DA
00:15F1 5303            	   420:         .word $0353
00:15F3 01              	   421:         .byte 1,$70,$da
00:15F4 70
00:15F5 DA
00:15F6 5403            	   422:         .word $0354
00:15F8 01              	   423:         .byte 1,$78,$da
00:15F9 78
00:15FA DA
00:15FB 5503            	   424:         .word $0355
00:15FD 01              	   425:         .byte 1,$80,$da
00:15FE 80
00:15FF DA
00:1600 5703            	   426:         .word $0357
00:1602 01              	   427:         .byte 1,$90,$da
00:1603 90
00:1604 DA
00:1605 5803            	   428:         .word $0358
00:1607 01              	   429:         .byte 1,$98,$da
00:1608 98
00:1609 DA
00:160A 5903            	   430:         .word $0359
00:160C 01              	   431:         .byte 1,$a0,$da
00:160D A0
00:160E DA
00:160F 5A03            	   432:         .word $035a
00:1611 01              	   433:         .byte 1,$a8,$da
00:1612 A8
00:1613 DA
00:1614 5B03            	   434:         .word $035b
00:1616 01              	   435:         .byte 1,$b0,$da
00:1617 B0
00:1618 DA
                        	   436:         ;; Row 22
00:1619 7103            	   437:         .word $0371
00:161B 01              	   438:         .byte 1,$20,$e2
00:161C 20
00:161D E2
00:161E 7903            	   439:         .word $0379
00:1620 01              	   440:         .byte 1,$60,$e2
00:1621 60
00:1622 E2
00:1623 7B03            	   441:         .word $037b
00:1625 01              	   442:         .byte 1,$70,$e2
00:1626 70
00:1627 E2
00:1628 8303            	   443:         .word $0383
00:162A 01              	   444:         .byte 1,$b0,$e2
00:162B B0
00:162C E2
                        	   445:         ;; Row 23
00:162D 9903            	   446:         .word $0399
00:162F 01              	   447:         .byte 1,$20,$ea
00:1630 20
00:1631 EA
00:1632 9A03            	   448:         .word $039a
00:1634 01              	   449:         .byte 1,$28,$ea
00:1635 28
00:1636 EA
00:1637 9B03            	   450:         .word $039b
00:1639 01              	   451:         .byte 1,$30,$ea
00:163A 30
00:163B EA
00:163C 9C03            	   452:         .word $039c
00:163E 01              	   453:         .byte 1,$38,$ea
00:163F 38
00:1640 EA
00:1641 9D03            	   454:         .word $039d
00:1643 01              	   455:         .byte 1,$40,$ea
00:1644 40
00:1645 EA
00:1646 9E03            	   456:         .word $039e
00:1648 01              	   457:         .byte 1,$48,$ea
00:1649 48
00:164A EA
00:164B 9F03            	   458:         .word $039f
00:164D 01              	   459:         .byte 1,$50,$ea
00:164E 50
00:164F EA
00:1650 A003            	   460:         .word $03a0
00:1652 01              	   461:         .byte 1,$58,$ea
00:1653 58
00:1654 EA
00:1655 A103            	   462:         .word $03a1
00:1657 01              	   463:         .byte 1,$60,$ea
00:1658 60
00:1659 EA
00:165A A203            	   464:         .word $03a2
00:165C 01              	   465:         .byte 1,$68,$ea
00:165D 68
00:165E EA
00:165F A303            	   466:         .word $03a3
00:1661 01              	   467:         .byte 1,$70,$ea
00:1662 70
00:1663 EA
00:1664 A403            	   468:         .word $03a4
00:1666 01              	   469:         .byte 1,$78,$ea
00:1667 78
00:1668 EA
00:1669 A503            	   470:         .word $03a5
00:166B 01              	   471:         .byte 1,$80,$ea
00:166C 80
00:166D EA
00:166E A603            	   472:         .word $03a6
00:1670 01              	   473:         .byte 1,$88,$ea
00:1671 88
00:1672 EA
00:1673 A703            	   474:         .word $03a7
00:1675 01              	   475:         .byte 1,$90,$ea
00:1676 90
00:1677 EA
00:1678 A803            	   476:         .word $03a8
00:167A 01              	   477:         .byte 1,$98,$ea
00:167B 98
00:167C EA
00:167D A903            	   478:         .word $03a9
00:167F 01              	   479:         .byte 1,$a0,$ea
00:1680 A0
00:1681 EA
00:1682 AA03            	   480:         .word $03aa
00:1684 01              	   481:         .byte 1,$a8,$ea
00:1685 A8
00:1686 EA
00:1687 AB03            	   482:         .word $03ab
00:1689 01              	   483:         .byte 1,$b0,$ea
00:168A B0
00:168B EA
                        	   484:         ;; End marker
00:168C FFFF            	   485:         .word $ffff
00:168E FF              	   486:         .byte $ff,$ff,$ff
00:168F FF
00:1690 FF
                        	   487:         
                        	   488:         ;; Energizer list
                        	   489:         ;; Index into pelltbl
                        	   490: enzrlst:
00:1691 12              	   491:         .byte $12
00:1692 17              	   492:         .byte $17
00:1693 79              	   493:         .byte $79
00:1694 88              	   494:         .byte $88
                        	   495: 
                        	   496:         ;; Pac-Man animation frames
                        	   497:         ;; Format:
                        	   498:         ;;  .byte sprite offset values
                        	   499: pacalstn:                       ;north-facing animation frames
00:1695 00              	   500:         .byte $00,$07,$08,$09,$08,$07
00:1696 07
00:1697 08
00:1698 09
00:1699 08
00:169A 07
                        	   501: pacalsts:                       ;south-facing animation frames
00:169B 00              	   502:         .byte $00,$0a,$0b,$0c,$0b,$0a
00:169C 0A
00:169D 0B
00:169E 0C
00:169F 0B
00:16A0 0A
                        	   503: pacalstw:                       ;west-facing animation frames
00:16A1 00              	   504:         .byte $00,$01,$02,$03,$02,$01
00:16A2 01
00:16A3 02
00:16A4 03
00:16A5 02
00:16A6 01
                        	   505: pacalste:                       ;east-facing animation frames
00:16A7 00              	   506:         .byte $00,$04,$05,$06,$05,$04
00:16A8 04
00:16A9 05
00:16AA 06
00:16AB 05
00:16AC 04
                        	   507: 
                        	   508:         ;; Index in pelltbl of leftmost+rightmost pellet in row by sprite y loc
                        	   509:         ;; Format:
                        	   510:         ;;  .byte y (sprite y loc of row)
                        	   511:         ;;  .byte ixl (pelltbl index of leftmost pellet in row)
                        	   512:         ;;  .byte ixr (pelltbl index of rightmost pellet in row)
                        	   513: plrowix:
00:16AD 3A              	   514:         .byte $3a,$00,$11        ;row 1
00:16AE 00
00:16AF 11
00:16B0 42              	   515:         .byte $42,$12,$17        ;row 2
00:16B1 12
00:16B2 17
00:16B3 4A              	   516:         .byte $4a,$18,$1d        ;row 3
00:16B4 18
00:16B5 1D
00:16B6 52              	   517:         .byte $52,$1e,$30        ;row 4
00:16B7 1E
00:16B8 30
00:16B9 5A              	   518:         .byte $5a,$31,$36        ;row 5
00:16BA 31
00:16BB 36
00:16BC 62              	   519:         .byte $62,$37,$3c        ;row 6
00:16BD 37
00:16BE 3C
00:16BF 6A              	   520:         .byte $6a,$3d,$4c        ;row 7
00:16C0 3D
00:16C1 4C
00:16C2 72              	   521:         .byte $72,$4d,$50        ;row 8
00:16C3 4D
00:16C4 50
00:16C5 7A              	   522:         .byte $7a,$51,$52        ;row 9
00:16C6 51
00:16C7 52
00:16C8 82              	   523:         .byte $82,$53,$54        ;row 10
00:16C9 53
00:16CA 54
00:16CB 8A              	   524:         .byte $8a,$55,$56        ;row 11
00:16CC 55
00:16CD 56
00:16CE 92              	   525:         .byte $92,$57,$58        ;row 12
00:16CF 57
00:16D0 58
00:16D1 9A              	   526:         .byte $9a,$59,$5a        ;row 13
00:16D2 59
00:16D3 5A
00:16D4 A2              	   527:         .byte $a2,$5b,$5c        ;row 14
00:16D5 5B
00:16D6 5C
00:16D7 AA              	   528:         .byte $aa,$5d,$5e        ;row 15
00:16D8 5D
00:16D9 5E
00:16DA B2              	   529:         .byte $b2,$5f,$60        ;row 16
00:16DB 5F
00:16DC 60
00:16DD BA              	   530:         .byte $ba,$61,$72        ;row 17
00:16DE 61
00:16DF 72
00:16E0 C2              	   531:         .byte $c2,$73,$78        ;row 18
00:16E1 73
00:16E2 78
00:16E3 CA              	   532:         .byte $ca,$79,$88        ;row 19
00:16E4 79
00:16E5 88
00:16E6 D2              	   533:         .byte $d2,$89,$8e        ;row 20
00:16E7 89
00:16E8 8E
00:16E9 DA              	   534:         .byte $da,$8f,$9e        ;row 21
00:16EA 8F
00:16EB 9E
00:16EC E2              	   535:         .byte $e2,$9f,$a2        ;row 22
00:16ED 9F
00:16EE A2
00:16EF EA              	   536:         .byte $ea,$a3,$b5        ;row 23
00:16F0 A3
00:16F1 B5
                        	   537: 
                        	   538:         ;; Fruit sprite table
                        	   539:         ;; Format:
                        	   540:         ;;  .byte lvl (level number)
                        	   541:         ;;  .byte spi (sprite index)
                        	   542:         ;;  .word ofs (sp0mem offset)
                        	   543:         ;;  .word pts (bonus points: 4 BCD digits)
                        	   544: frtsptbl:
                        	   545:         ;; 1st level: Cherries
00:16F2 00              	   546:         .byte $00,$0d
00:16F3 0D
00:16F4 4003            	   547:         .word $0d*$40,$0100
00:16F6 0001
                        	   548:         ;; 2nd level: Strawberry
00:16F8 01              	   549:         .byte $01,$0f
00:16F9 0F
00:16FA C003            	   550:         .word $0f*$40,$0300
00:16FC 0003
                        	   551:         ;; 3rd & 4th level: Peach
00:16FE 02              	   552:         .byte $02,$11
00:16FF 11
00:1700 4004            	   553:         .word $11*$40,$0500
00:1702 0005
00:1704 03              	   554:         .byte $03,$11
00:1705 11
00:1706 4004            	   555:         .word $11*$40,$0500
00:1708 0005
                        	   556:         ;; 5th & 6th level: Apple
00:170A 04              	   557:         .byte $04,$13
00:170B 13
00:170C C004            	   558:         .word $13*$40,$0700
00:170E 0007
00:1710 05              	   559:         .byte $05,$13
00:1711 13
00:1712 C004            	   560:         .word $13*$40,$0700
00:1714 0007
                        	   561:         ;; 7th & 8th level: Grapes
00:1716 06              	   562:         .byte $06,$15
00:1717 15
00:1718 4005            	   563:         .word $15*$40,$1000
00:171A 0010
00:171C 07              	   564:         .byte $07,$15
00:171D 15
00:171E 4005            	   565:         .word $15*$40,$1000
00:1720 0010
                        	   566:         ;; 9th & 10th levels: Galaxian
00:1722 08              	   567:         .byte $08,$17
00:1723 17
00:1724 C005            	   568:         .word $17*$40,$2000
00:1726 0020
00:1728 09              	   569:         .byte $09,$17
00:1729 17
00:172A C005            	   570:         .word $17*$40,$2000
00:172C 0020
                        	   571:         ;; 11th & 12th level: Bell
00:172E 0A              	   572:         .byte $0a,$19
00:172F 19
00:1730 4006            	   573:         .word $19*$40,$3000
00:1732 0030
00:1734 0B              	   574:         .byte $0b,$19
00:1735 19
00:1736 4006            	   575:         .word $19*$40,$3000
00:1738 0030
                        	   576:         ;; level 13 onwards: Key
00:173A 0C              	   577:         .byte $0c,$1b
00:173B 1B
00:173C C006            	   578:         .word $1b*$40,$5000
00:173E 0050
                        	   579: 

Source: "src/startup.asm"
                        	    34:         
                        	    35:         ;; Include assets
                        	    36:         .org charset
01:4000 3C666E6E60623C00	    37:         .incbin assets/charset,2
01:4008 183C667E66666600
01:4010 7C66667C66667C00
01:4018 3C66606060663C00
01:4020 786C6666666C7800
01:4028 7E60607860607E00
01:4030 7E60607860606000
01:4038 3C66606E66663C00
01:4040 6666667E66666600
01:4048 3C18181818183C00
01:4050 1E0C0C0C0C6C3800
01:4058 666C7870786C6600
01:4060 6060606060607E00
01:4068 63777F6B63636300
01:4070 66767E7E6E666600
01:4078 3C66666666663C00
01:4080 7C66667C60606000
01:4088 3C666666663C0E00
01:4090 7C66667C786C6600
01:4098 3C66603C06663C00
01:40A0 7E18181818181800
01:40A8 6666666666663C00
01:40B0 66666666663C1800
01:40B8 6363636B7F776300
01:40C0 66663C183C666600
01:40C8 6666663C18181800
01:40D0 7E060C1830607E00
01:40D8 3C30303030303C00
01:40E0 0C12307C3062FC00
01:40E8 3C0C0C0C0C0C3C00
01:40F0 00183C7E18181818
01:40F8 0010307F7F301000
01:4100 0000000000000000
01:4108 1818181800001800
01:4110 6666660000000000
01:4118 6666FF66FF666600
01:4120 183E603C067C1800
01:4128 62660C1830664600
01:4130 3C663C3867663F00
01:4138 060C180000000000
01:4140 0C18303030180C00
01:4148 30180C0C0C183000
01:4150 00663CFF3C660000
01:4158 0018187E18180000
01:4160 0000000000181830
01:4168 0000007E00000000
01:4170 0000000000181800
01:4178 0003060C18306000
01:4180 3C666E7666663C00
01:4188 1818381818187E00
01:4190 3C66060C30607E00
01:4198 3C66061C06663C00
01:41A0 060E1E667F060600
01:41A8 7E607C0606663C00
01:41B0 3C66607C66663C00
01:41B8 7E660C1818181800
01:41C0 3C66663C66663C00
01:41C8 3C66663E06663C00
01:41D0 0000180000180000
01:41D8 0000180000181830
01:41E0 0E18306030180E00
01:41E8 00007E007E000000
01:41F0 70180C060C187000
01:41F8 3C66060C18001800
01:4200 00000F1020232424
01:4208 24242320100F0000
01:4210 0000F00804C42424
01:4218 2424C40408F00000
01:4220 0000FF0000FF0000
01:4228 2424242424242424
01:4230 2424242424180000
01:4238 0000182424242424
01:4240 0000F80404F80000
01:4248 00001F20201F0000
01:4250 0000FF0000C32424
01:4258 2424C30000FF0000
01:4260 2424232020232424
01:4268 2424C40404C42424
01:4270 00003F2020272424
01:4278 24242720203F0000
01:4280 0000FC0404E42424
01:4288 2424E40404FC0000
01:4290 000000FFFF000000
01:4298 0000001000000000
01:42A0 0000387C7C380000
01:42A8 0000000000000000
01:42B0 0000000000000000
01:42B8 0000000000000000
01:42C0 0000000000000000
01:42C8 0000000000000000
01:42D0 0000000000000000
01:42D8 0000000000000000
01:42E0 0000000000000000
01:42E8 0000000000000000
01:42F0 0000000000000000
01:42F8 0000000000000000
01:4300 0000000000000000
01:4308 0000000000000000
01:4310 0000000000000000
01:4318 0000000000000000
01:4320 0000000000000000
01:4328 0000000000000000
01:4330 0000000000000000
01:4338 0000000000000000
01:4340 0000000000000000
01:4348 0000000000000000
01:4350 0000000000000000
01:4358 0000000000000000
01:4360 0000000000000000
01:4368 0000000000000000
01:4370 0000000000000000
01:4378 0000000000000000
01:4380 0000000000000000
01:4388 0000000000000000
01:4390 0000000000000000
01:4398 0000000000000000
01:43A0 0000000000000000
01:43A8 0000000000000000
01:43B0 0000000000000000
01:43B8 0000000000000000
01:43C0 0000000000000000
01:43C8 0000000000000000
01:43D0 0000000000000000
01:43D8 0000000000000000
01:43E0 0000000000000000
01:43E8 0000000000000000
01:43F0 0000000000000000
01:43F8 0000000000000000
01:4400 0000000000000000
01:4408 0000000000000000
01:4410 0000000000000000
01:4418 0000000000000000
01:4420 0000000000000000
01:4428 0000000000000000
01:4430 0000000000000000
01:4438 0000000000000000
01:4440 0000000000000000
01:4448 0000000000000000
01:4450 0000000000000000
01:4458 0000000000000000
01:4460 0000000000000000
01:4468 0000000000000000
01:4470 0000000000000000
01:4478 0000000000000000
01:4480 0000000000000000
01:4488 0000000000000000
01:4490 0000000000000000
01:4498 0000000000000000
01:44A0 0000000000000000
01:44A8 0000000000000000
01:44B0 0000000000000000
01:44B8 0000000000000000
01:44C0 0000000000000000
01:44C8 0000000000000000
01:44D0 0000000000000000
01:44D8 0000000000000000
01:44E0 0000000000000000
01:44E8 0000000000000000
01:44F0 0000000000000000
01:44F8 0000000000000000
01:4500 0000000000000000
01:4508 0000000000000000
01:4510 0000000000000000
01:4518 0000000000000000
01:4520 0000000000000000
01:4528 0000000000000000
01:4530 0000000000000000
01:4538 0000000000000000
01:4540 0000000000000000
01:4548 0000000000000000
01:4550 0000000000000000
01:4558 0000000000000000
01:4560 0000000000000000
01:4568 0000000000000000
01:4570 0000000000000000
01:4578 0000000000000000
01:4580 0000000000000000
01:4588 0000000000000000
01:4590 0000000000000000
01:4598 0000000000000000
01:45A0 0000000000000000
01:45A8 0000000000000000
01:45B0 0000000000000000
01:45B8 0000000000000000
01:45C0 0000000000000000
01:45C8 0000000000000000
01:45D0 0000000000000000
01:45D8 0000000000000000
01:45E0 0000000000000000
01:45E8 0000000000000000
01:45F0 0000000000000000
01:45F8 0000000000000000
01:4600 0000000000000000
01:4608 0000000000000000
01:4610 0000000000000000
01:4618 0000000000000000
01:4620 0000000000000000
01:4628 0000000000000000
01:4630 0000000000000000
01:4638 0000000000000000
01:4640 0000000000000000
01:4648 0000000000000000
01:4650 0000000000000000
01:4658 0000000000000000
01:4660 0000000000000000
01:4668 0000000000000000
01:4670 0000000000000000
01:4678 0000000000000000
01:4680 0000000000000000
01:4688 0000000000000000
01:4690 0000000000000000
01:4698 0000000000000000
01:46A0 0000000000000000
01:46A8 0000000000000000
01:46B0 0000000000000000
01:46B8 0000000000000000
01:46C0 0000000000000000
01:46C8 0000000000000000
01:46D0 0000000000000000
01:46D8 0000000000000000
01:46E0 0000000000000000
01:46E8 0000000000000000
01:46F0 0000000000000000
01:46F8 0000000000000000
01:4700 0000000000000000
01:4708 0000000000000000
01:4710 0000000000000000
01:4718 0000000000000000
01:4720 0000000000000000
01:4728 0000000000000000
01:4730 0000000000000000
01:4738 0000000000000000
01:4740 0000000000000000
01:4748 0000000000000000
01:4750 0000000000000000
01:4758 0000000000000000
01:4760 0000000000000000
01:4768 0000000000000000
01:4770 0000000000000000
01:4778 0000000000000000
01:4780 0000000000000000
01:4788 0000000000000000
01:4790 0000000000000000
01:4798 0000000000000000
01:47A0 0000000000000000
01:47A8 0000000000000000
01:47B0 0000000000000000
01:47B8 0000000000000000
01:47C0 0000000000000000
01:47C8 0000000000000000
01:47D0 0000000000000000
01:47D8 0000000000000000
01:47E0 0000000000000000
01:47E8 5555555555555555
01:47F0 AAAAAAAAAAAAAAAA
01:47F8 FFFFFFFFFFFFFFFF
01:4800 0101010101010101
01:4808 0101010101010101
01:4810 0101010101010101
01:4818 0101010101010101
01:4820 0101010101010101
01:4828 0101010101010101
01:4830 0101010101010101
01:4838 0101010101010101
01:4840 0606060606060606
01:4848 0606060606060606
01:4850 06060F0F0F010101
01:4858 0101010101010101
01:4860 0101010101010101
01:4868 0101010101010101
01:4870 0101010101010101
01:4878 0101010101010101
01:4880 0101010101010101
01:4888 0101010101010101
01:4890 0101010101010101
01:4898 0101010101010101
01:48A0 0101010101010101
01:48A8 0101010101010101
01:48B0 0101010101010101
01:48B8 0101010101010101
01:48C0 0101010101010101
01:48C8 0101010101010101
01:48D0 0101010101010101
01:48D8 0101010101010101
01:48E0 0101010101010101
01:48E8 0101010101010101
01:48F0 0101010101010101
01:48F8 0101010101010101
                        	    38: 
                        	    39:         .org mazegfx
02:4BF0 E803E84327001800	    40:         .incbin assets/mazegfx,2
02:4BF8 000F0B0628001900
02:4C00 4044444444444444
02:4C08 44444A4444444444
02:4C10 4444444442202020
02:4C18 2020202020202020
02:4C20 2020202020202020
02:4C28 4553535353535353
02:4C30 5353455353535353
02:4C38 5353535345202020
02:4C40 2020200809070820
02:4C48 13030F1205202020
02:4C50 4554404442534044
02:4C58 4253455340444253
02:4C60 4044425445202020
02:4C68 2020202020202020
02:4C70 2020202020202020
02:4C78 4553414443534144
02:4C80 4353465341444353
02:4C88 4144435345202020
02:4C90 2020202020202020
02:4C98 2020202030202020
02:4CA0 4553535353535353
02:4CA8 5353535353535353
02:4CB0 5353535345202020
02:4CB8 2020202020202020
02:4CC0 2020202020202020
02:4CC8 4553404442534753
02:4CD0 4044444442534753
02:4CD8 4044425345202020
02:4CE0 2020202020202020
02:4CE8 2020202020202020
02:4CF0 4553414443534553
02:4CF8 41444A4443534553
02:4D00 4144435345202020
02:4D08 2020202020202020
02:4D10 2020202020202020
02:4D18 4553535353534553
02:4D20 5353455353534553
02:4D28 5353535345202020
02:4D30 2020202020202020
02:4D38 2020311510202020
02:4D40 4144444442534C44
02:4D48 4853465349444D53
02:4D50 4044444443202020
02:4D58 2020202020202020
02:4D60 2020202020202020
02:4D68 2020202045534520
02:4D70 2020202020204553
02:4D78 4520202020202020
02:4D80 2020202020202020
02:4D88 2020202030202020
02:4D90 2020202045534520
02:4D98 4E52525250204553
02:4DA0 4520202020202020
02:4DA8 2020202020202020
02:4DB0 2020202020202020
02:4DB8 4444444443534620
02:4DC0 4520202045204653
02:4DC8 4144444444202020
02:4DD0 2020202020202020
02:4DD8 2020202020202020
02:4DE0 2020202020532020
02:4DE8 4520202045202053
02:4DF0 2020202020202020
02:4DF8 2020202020202020
02:4E00 2020202020202020
02:4E08 4444444442534720
02:4E10 4F44444451204753
02:4E18 4044444444202020
02:4E20 2020202020202020
02:4E28 2020202020202020
02:4E30 2020202045534520
02:4E38 2020202020204553
02:4E40 4520202020202020
02:4E48 2020202020202020
02:4E50 2020202020202020
02:4E58 2020202045534520
02:4E60 4044444442204553
02:4E68 4520202020202020
02:4E70 2020202020202020
02:4E78 2020202020202020
02:4E80 4044444443534620
02:4E88 41444A4443204653
02:4E90 4144444442202020
02:4E98 2020202020202020
02:4EA0 2020202020202020
02:4EA8 4553535353535353
02:4EB0 5353455353535353
02:4EB8 5353535345202020
02:4EC0 2020202020202020
02:4EC8 2020202020202020
02:4ED0 4553494442534944
02:4ED8 4853465349444853
02:4EE0 4044485345202020
02:4EE8 2020202020202020
02:4EF0 2020202020202020
02:4EF8 4554535345535353
02:4F00 5353205353535353
02:4F08 4553535445202020
02:4F10 2020202020202020
02:4F18 2020202020202020
02:4F20 4C44485346534753
02:4F28 49444A4448534753
02:4F30 465349444D202020
02:4F38 2020202020202020
02:4F40 2020202020202020
02:4F48 4553535353534553
02:4F50 5353455353534553
02:4F58 5353535345202020
02:4F60 2020202020202020
02:4F68 2020202020202020
02:4F70 4553494444444B44
02:4F78 4853465349444B44
02:4F80 4444485345202020
02:4F88 2020202020202020
02:4F90 2020202020202020
02:4F98 4553535353535353
02:4FA0 5353535353535353
02:4FA8 5353535345202020
02:4FB0 2020202020202020
02:4FB8 2020202020202020
02:4FC0 4144444444444444
02:4FC8 4444444444444444
02:4FD0 4444444443202020
02:4FD8 2020202020202020
02:4FE0 2020202020202020
                        	    41: 
                        	    42:         .org sp0mem
03:5000 3E00007F0000FF80	    43:         .incbin assets/sprites,2
03:5008 00FF8000FF8000FF
03:5010 8000FF80007F0000
03:5018 3E00000000000000
03:5020 0000000000000000
03:5028 0000000000000000
03:5030 0000000000000000
03:5038 0000000000000087
03:5040 3E00007F0000FF80
03:5048 003F80000780003F
03:5050 8000FF80007F0000
03:5058 3E00000000000000
03:5060 0000000000000000
03:5068 0000000000000000
03:5070 0000000000000000
03:5078 0000000000000087
03:5080 7E0000FF00003F80
03:5088 000F80000780000F
03:5090 80003F8000FF0000
03:5098 7E00000000000000
03:50A0 0000000000000000
03:50A8 0000000000000000
03:50B0 0000000000000000
03:50B8 0000000000000087
03:50C0 FC00003F00000F80
03:50C8 0007800003800007
03:50D0 80000F80003F0000
03:50D8 FC00000000000000
03:50E0 0000000000000000
03:50E8 0000000000000000
03:50F0 0000000000000000
03:50F8 0000000000000087
03:5100 3E00007F0000FF80
03:5108 00FE0000F00000FE
03:5110 0000FF80007F0000
03:5118 3E00000000000000
03:5120 0000000000000000
03:5128 0000000000000000
03:5130 0000000000000000
03:5138 0000000000000087
03:5140 3F00007F8000FE00
03:5148 00F80000F00000F8
03:5150 0000FE00007F8000
03:5158 3F00000000000000
03:5160 0000000000000000
03:5168 0000000000000000
03:5170 0000000000000000
03:5178 0000000000000087
03:5180 1F80007E0000F800
03:5188 00F00000E00000F0
03:5190 0000F800007E0000
03:5198 1F80000000000000
03:51A0 0000000000000000
03:51A8 0000000000000000
03:51B0 0000000000000000
03:51B8 0000000000000087
03:51C0 220000630000F780
03:51C8 00F78000F78000FF
03:51D0 8000FF80007F0000
03:51D8 3E00000000000000
03:51E0 0000000000000000
03:51E8 0000000000000000
03:51F0 0000000000000000
03:51F8 0000000000000087
03:5200 410000C18000E380
03:5208 00E38000F78000FF
03:5210 8000FF80007F0000
03:5218 3E00000000000000
03:5220 0000000000000000
03:5228 0000000000000000
03:5230 0000000000000000
03:5238 0000000000000087
03:5240 808000808000C180
03:5248 00C18000E38000F7
03:5250 80007F00007F0000
03:5258 3E00000000000000
03:5260 0000000000000000
03:5268 0000000000000000
03:5270 0000000000000000
03:5278 0000000000000087
03:5280 3E00007F0000FF80
03:5288 00FF8000F78000F7
03:5290 8000F78000630000
03:5298 2200000000000000
03:52A0 0000000000000000
03:52A8 0000000000000000
03:52B0 0000000000000000
03:52B8 0000000000000087
03:52C0 3E00007F0000FF80
03:52C8 00FF8000F78000E3
03:52D0 8000E38000C18000
03:52D8 4100000000000000
03:52E0 0000000000000000
03:52E8 0000000000000000
03:52F0 0000000000000000
03:52F8 0000000000000087
03:5300 3E00007F00007F00
03:5308 00F78000E38000C1
03:5310 8000C18000808000
03:5318 8080000000000000
03:5320 0000000000000000
03:5328 0000000000000000
03:5330 0000000000000000
03:5338 0000000000000087
03:5340 0700001900002200
03:5348 0002000002000000
03:5350 0000000000000000
03:5358 0000000000000000
03:5360 0000000000000000
03:5368 0000000000000000
03:5370 0000000000000000
03:5378 0000000000000089
03:5380 0000000000006000
03:5388 00F00000F70000EF
03:5390 80006F80000F8000
03:5398 0700000000000000
03:53A0 0000000000000000
03:53A8 0000000000000000
03:53B0 0000000000000000
03:53B8 0000000000000082
03:53C0 1000003C00001800
03:53C8 0000000024000000
03:53D0 0000080000000000
03:53D8 0000000000000000
03:53E0 0000000000000000
03:53E8 0000000000000000
03:53F0 0000000000000000
03:53F8 0000000000000085
03:5400 0000000000006600
03:5408 00FF0000FF0000FF
03:5410 00007E00003C0000
03:5418 1800000000000000
03:5420 0000000000000000
03:5428 0000000000000000
03:5430 0000000000000000
03:5438 0000000000000082
03:5440 0B00000E00000800
03:5448 0008000000000000
03:5450 0000000000000000
03:5458 0000000000000000
03:5460 0000000000000000
03:5468 0000000000000000
03:5470 0000000000000000
03:5478 0000000000000085
03:5480 0000000000000000
03:5488 003E00007F00007F
03:5490 00007F00007F0000
03:5498 3E00000000000000
03:54A0 0000000000000000
03:54A8 0000000000000000
03:54B0 0000000000000000
03:54B8 0000000000000088
03:54C0 0000000A00000C00
03:54C8 0008000000000000
03:54D0 0000000000000000
03:54D8 0000000000000000
03:54E0 0000000000000000
03:54E8 0000000000000000
03:54F0 0000000000000000
03:54F8 0000000000000089
03:5500 0000000000000000
03:5508 007F0000FF8000FF
03:5510 8000FF80007F0000
03:5518 3600000000000000
03:5520 0000000000000000
03:5528 0000000000000000
03:5530 0000000000000000
03:5538 0000000000000082
03:5540 0000000000000000
03:5548 000800001400002A
03:5550 00005500002A0000
03:5558 1400000000000000
03:5560 0000000000000000
03:5568 0000000000000000
03:5570 0000000000000000
03:5578 000000000000008B
03:5580 2000001C00000800
03:5588 001C00003E00007F
03:5590 00007F00007F0000
03:5598 3E00000000000000
03:55A0 0000000000000000
03:55A8 0000000000000000
03:55B0 0000000000000000
03:55B8 0000000000000085
03:55C0 0800001C0000AA80
03:55C8 0088800080800041
03:55D0 0000220000000000
03:55D8 0000000000000000
03:55E0 0000000000000000
03:55E8 0000000000000000
03:55F0 0000000000000000
03:55F8 00000000000000E2
03:5600 0000000000003E00
03:5608 007F00007F00006B
03:5610 0000080000080000
03:5618 0800000000000000
03:5620 0000000000000000
03:5628 0000000000000000
03:5630 0000000000000000
03:5638 00000000000000E7
03:5640 0000000000000800
03:5648 0010000000000020
03:5650 0000200000000000
03:5658 7B00000000000000
03:5660 0000000000000000
03:5668 0000000000000000
03:5670 0000000000000000
03:5678 0000000000000086
03:5680 1C00003E00003E00
03:5688 007F00007F0000FF
03:5690 8000FF8000FF8000
03:5698 7F00000000000000
03:56A0 0000000000000000
03:56A8 0000000000000000
03:56B0 0000000000000000
03:56B8 0000000000000087
03:56C0 1C00002200003E00
03:56C8 003E000000000000
03:56D0 0000000000000000
03:56D8 0000000000000000
03:56E0 0000000000000000
03:56E8 0000000000000000
03:56F0 0000000000000000
03:56F8 000000000000008E
03:5700 0000000000000000
03:5708 0000000014000016
03:5710 00001400001A0000
03:5718 0C00000000000000
03:5720 0000000000000000
03:5728 0000000000000000
03:5730 0000000000000000
03:5738 000000000000008F
                        	    44: 


Symbols by name:
addscr                           A:106A
bgcol                            A:0C59
bgcol0                           E:D021
blki                             E:0000
buf                              E:0016
c2ddra                           E:DD02
calcnd                           A:0BEC
charset                          E:4000
chkcon                           A:1031
chkirq                           A:0C30
chkmov                           A:0F9B
chkne                            A:0B6F
chknn                            A:0B8D
chkpde                           A:0CC1
chkpdn                           A:0CCB
chkrve                           A:0FBA
chkrvn                           A:0FCA
chkrvw                           A:0FA8
chky                             A:0F85
ci1icr                           E:DC0D
ci1pra                           E:DC00
ci2cra                           E:DD0E
ci2crb                           E:DD0F
ci2icr                           E:DD0D
ci2pra                           E:DD00
cia1                             E:DC00
cia2                             E:DD00
cinv                             E:0314
clrbuf                           A:0F14
clrzp                            A:0EF8
colmem                           E:D800
coltab                           E:4800
decrem                           A:0CD8
djr0                             A:09A7
djr1                             A:09AB
djr2                             A:09AF
djr3                             A:09B3
dkgrey                           E:000B
e                                E:0005
enzraix                          E:00AB
enzrchr                          E:0054
enzrlst                          A:1691
enzrpts                          E:0050
extcol                           E:D020
fillcolmem                       A:0957
fillmaze                         A:09D1
filloop                          A:09D5
fincol                           A:0CA4
findpel                          A:0A0E
finfil                           A:0A0D
finnmi                           A:0EC7
finras                           A:0CDA
fiprsc                           A:0903
flshfin                          A:0EC5
flshmaz                          A:0E0D
flshwht                          A:0E71
fpckde                           A:0A47
fpckdn                           A:0A81
fpds                             A:0AB2
fpinrow                          A:0B10
fprixn                           A:0AFE
fprixs                           A:0AEC
frtena                           E:00A9
frtsptbl                         A:16F2
frttim                           E:0026
frxpos                           E:0067
frypos                           E:00A2
gameloop                         A:0F5C
gsthmnd                          E:001E
hidefrt                          A:1153
initpac                          A:0F23
initvic                          A:092A
irqblki                          E:0005
irqmsk                           E:D01A
irqtmp                           E:001F
irqwrd1                          E:001B
irqwrd2                          E:001D
isenzr                           A:0B2C
joybtn                           E:0092
joyx                             E:0096
joyy                             E:0097
ldanim                           A:0D85
lpprsc                           A:0891
ltgrey                           E:000F
lvlend                           E:009B
lvlfrtpts                        A:1088
lvlfrtspix                       A:10AB
lvlfrtspof                       A:10C6
lvlnum                           E:00A8
maxftx                           E:0048
maxmen                           E:0003
maxpell                          E:00B6
mazegfx                          E:4BF0
move                             A:0F7E
movs                             A:0F97
mula5                            A:081C
mula6                            A:0845
n                                E:0002
newgame                          A:0ECD
nextlvl                          A:0EE1
nmenrem                          E:00A7
nmiblki                          E:000A
nminv                            E:0318
nmiwrd1                          E:0020
nmiwrd2                          E:0022
nodeadr                          A:0B3C
nodetbl                          A:1160
npelrem                          E:00A6
nxl                              A:080B
pacaix                           E:00AA
pacalste                         A:16A7
pacalstn                         A:1695
pacalsts                         A:169B
pacalstw                         A:16A1
pacdir                           E:00A3
pacdis                           E:00A4
pacrem                           E:00A5
pacsrc                           E:009E
pacstnd                          E:0031
pactar                           E:009F
pds                              A:0CD5
pelfound                         A:0ADC
pelladr                          A:09BE
pellchr                          E:0053
pellpts                          E:0010
pelltbl                          A:12FE
pelnotfd                         A:0AE3
plrowix                          A:16AD
printchr                         A:0917
printcol                         A:0904
printscr                         A:087B
procirq                          A:0C1C
procnmi                          A:0D1B
rasirq                           A:0CB1
raslin                           E:00FA
raster                           E:D012
rdinpt                           A:0F6C
readjoy2                         A:099C
reverse                          A:0FE3
revs                             A:0FDA
rmpel                            A:0C79
s                                E:0003
scnmem                           E:4C00
score                            E:00FC
screnzr                          A:105D
scrfrt                           A:1044
scrmsdi                          E:0185
scroly                           E:D011
scrpel                           A:1050
setblu1                          A:0E1C
setblu2                          A:0E31
setblu3                          A:0E46
setblu4                          A:0E5B
setcol1                          A:0959
setcol2                          A:096A
setcol3                          A:097B
setcol4                          A:098C
setnds                           A:0BC0
setnodis                         A:0B4F
setnsrc                          A:0FFB
setupirq                         A:0BFB
setupnmi                         A:0CE0
setwht1                          A:0E73
setwht2                          A:0E88
setwht3                          A:0E9D
setwht4                          A:0EB2
showfrt                          A:10E7
sp0col                           E:D027
sp0loc                           E:0040
sp0mem                           E:5000
sp0ptr                           E:4FF8
sp0x                             E:D000
sp0y                             E:D001
sp1x                             E:D002
sp1y                             E:D003
sp2x                             E:D004
sp2y                             E:D005
spbgcl                           E:D01F
spcechr                          E:0020
spcol                            A:0C44
spena                            E:D015
spspcl                           E:D01E
sysirq                           E:EA7E
sysnmi                           E:FE56
ti2a                             E:DD04
ti2b                             E:DD06
tic                              A:0DE2
ticloop                          A:0DE6
timaev                           A:0D33
timbev                           A:0D90
tmp                              E:001A
tocloop                          A:0DAF
vic                              E:D000
vicirq                           E:D019
vmcsb                            E:D018
w                                E:0004
warp                             A:0BF4
wrd1                             E:0016
wrd2                             E:0018
wrpnixe                          E:0021
wrpnixw                          E:001B

Symbols by value:
0000 blki
0002 n
0003 maxmen
0003 s
0004 w
0005 e
0005 irqblki
000A nmiblki
000B dkgrey
000F ltgrey
0010 pellpts
0016 buf
0016 wrd1
0018 wrd2
001A tmp
001B irqwrd1
001B wrpnixw
001D irqwrd2
001E gsthmnd
001F irqtmp
0020 nmiwrd1
0020 spcechr
0021 wrpnixe
0022 nmiwrd2
0026 frttim
0031 pacstnd
0040 sp0loc
0048 maxftx
0050 enzrpts
0053 pellchr
0054 enzrchr
0067 frxpos
0092 joybtn
0096 joyx
0097 joyy
009B lvlend
009E pacsrc
009F pactar
00A2 frypos
00A3 pacdir
00A4 pacdis
00A5 pacrem
00A6 npelrem
00A7 nmenrem
00A8 lvlnum
00A9 frtena
00AA pacaix
00AB enzraix
00B6 maxpell
00FA raslin
00FC score
0185 scrmsdi
0314 cinv
0318 nminv
080B nxl
081C mula5
0845 mula6
087B printscr
0891 lpprsc
0903 fiprsc
0904 printcol
0917 printchr
092A initvic
0957 fillcolmem
0959 setcol1
096A setcol2
097B setcol3
098C setcol4
099C readjoy2
09A7 djr0
09AB djr1
09AF djr2
09B3 djr3
09BE pelladr
09D1 fillmaze
09D5 filloop
0A0D finfil
0A0E findpel
0A47 fpckde
0A81 fpckdn
0AB2 fpds
0ADC pelfound
0AE3 pelnotfd
0AEC fprixs
0AFE fprixn
0B10 fpinrow
0B2C isenzr
0B3C nodeadr
0B4F setnodis
0B6F chkne
0B8D chknn
0BC0 setnds
0BEC calcnd
0BF4 warp
0BFB setupirq
0C1C procirq
0C30 chkirq
0C44 spcol
0C59 bgcol
0C79 rmpel
0CA4 fincol
0CB1 rasirq
0CC1 chkpde
0CCB chkpdn
0CD5 pds
0CD8 decrem
0CDA finras
0CE0 setupnmi
0D1B procnmi
0D33 timaev
0D85 ldanim
0D90 timbev
0DAF tocloop
0DE2 tic
0DE6 ticloop
0E0D flshmaz
0E1C setblu1
0E31 setblu2
0E46 setblu3
0E5B setblu4
0E71 flshwht
0E73 setwht1
0E88 setwht2
0E9D setwht3
0EB2 setwht4
0EC5 flshfin
0EC7 finnmi
0ECD newgame
0EE1 nextlvl
0EF8 clrzp
0F14 clrbuf
0F23 initpac
0F5C gameloop
0F6C rdinpt
0F7E move
0F85 chky
0F97 movs
0F9B chkmov
0FA8 chkrvw
0FBA chkrve
0FCA chkrvn
0FDA revs
0FE3 reverse
0FFB setnsrc
1031 chkcon
1044 scrfrt
1050 scrpel
105D screnzr
106A addscr
1088 lvlfrtpts
10AB lvlfrtspix
10C6 lvlfrtspof
10E7 showfrt
1153 hidefrt
1160 nodetbl
12FE pelltbl
1691 enzrlst
1695 pacalstn
169B pacalsts
16A1 pacalstw
16A7 pacalste
16AD plrowix
16F2 frtsptbl
4000 charset
4800 coltab
4BF0 mazegfx
4C00 scnmem
4FF8 sp0ptr
5000 sp0mem
D000 sp0x
D000 vic
D001 sp0y
D002 sp1x
D003 sp1y
D004 sp2x
D005 sp2y
D011 scroly
D012 raster
D015 spena
D018 vmcsb
D019 vicirq
D01A irqmsk
D01E spspcl
D01F spbgcl
D020 extcol
D021 bgcol0
D027 sp0col
D800 colmem
DC00 ci1pra
DC00 cia1
DC0D ci1icr
DD00 ci2pra
DD00 cia2
DD02 c2ddra
DD04 ti2a
DD06 ti2b
DD0D ci2icr
DD0E ci2cra
DD0F ci2crb
EA7E sysirq
FE56 sysnmi
